%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1912.i109.028.P.m004.c33.meeting room isometric set-01.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 3/27/2021
%%BoundingBox: 0 0 550 450
%%HiResBoundingBox: 0 0 550 450
%%CropBox: 0 0 550 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1912.i109.028.P.m004.c33.meeting room isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-03-27T08:09:58+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-03-27T08:09:58+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-03-27T08:09:57+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>136</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9OXur2trIIAGuLxhyW0h&#xA;AaUqduRqVVF/ynIHatcU0lGoy3c0bi/lVOIR/wBHxE+kUdwn72VjF6vf4aqvYq2QlKm/Dh4iO7f7&#xA;r8/uXeWPMelXMdppMMyPdQWcJcK6tuqKHWgNQV71/hiJi6a5YyBxdGRZNrdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirz/wAqfmNpfmLzfrWiJfLcRRRv9Xsnh4grFI0UvFyPjqOLEHsRTo2QiJWb5Nkj&#xA;GhXPqnnl+eZ7yJbVmi030ZOVnIeZV1MYXgx+JQOTDidvlkMeTiZZMfCBfUA/NkmXNLsVdirsVdir&#xA;sVdirsVdiqnHcQSSSRxyK8kJCyqCCVJFQGHbbFVTFWJjzTYXFxeXVlfMq27NGQ4LRN6KKWHpkqf2&#xA;6gpQnuT0yEcsDG7TjjKchGIu08sdYiuLlrOVfRvUDMYq8lZUCFmR6CoHqqNwD7ZYY0xBBSDXZBFr&#xA;zSsjOFMXBVJoZAAyAqCpc/CeKjcnKMgNhz9LKIjKyB+DyU9Hh1PWUvHS6e0NtO1tI5WsjTQgVNK7&#xA;IOWwPj0U74YwPU7scueJ2iPT+Px3+bz/AMi+XTb/AJu6hp9tdSqukRyTfWfhPrSEwrIrrSnF/Wat&#xA;Oh6dK5j44/vCO5ty5wcQFPcZnMcTOACVFaE8R9+ZpdeGNReZJZdchqZIrVkEL2ZEbVkYkrLyG9Bx&#xA;Zeu/XK9+Lnt3Mtq82TIyuoZTVSKg5YwbxV2KuxV2KuxV2KuxVpmVVLMQFUVJPQAYkqles+ZdL0rR&#xA;ZNYmczWiAlTD8ZYiuy027ZGMhIWEyBjd9Eo/L3znb+Y9InuZLpHuIZSJU+FCiMqsvw9eO5Wp6kHc&#xA;5PhI2aoZYyFjkywEEAg1B6HA2PJfKX5WRWn5heZrm9tov0WJLa40Mo7FkkNXZtzzDAmh+Khqfohf&#xA;MNhFAFnnluaO9Ml7Ahjghlu7H46cmktbp7ZzsW+HlbkjfocIG9sSU+yTF2KuxV2KuxV2KuxV2KsN&#xA;0r8ydGvPNGs6PLdQRJphZAH5Ryq0LLHL6nOgIZ5B6fDqPfI3uyoU8z0P8zbnQtT8zan+kYNU083R&#xA;VLK6cwXoq7tyiRh8aI0hSla0A6U45KU4sY45DmVez/5yePrAXvl+kJ+00NzVh8laMA/eMhxtnhqd&#xA;ze6T5hT6/wCS5Dayl2lvTIlPjlYhLe5QswpxrwKggb8WU1OYeSYxnl6D97dp4Vy2kE/8ued59Nvr&#xA;aTzBYtBLDbTwu9q8c0ZLG2VNuXJKrAzUJb/Wyz89js9/4H6GnJi8OI225fe9N1HSmnEk1lKtjqTq&#xA;qC/ESSyBAwJWjilDmW1sM8l+XNf8tXGqXOsauY7S+1m4uBAYoWFx9Z4qkhdKtHzb9ntTByZHdD6n&#xA;b+T/ACJ5mufNOp65OL6/M3HTVEbtIk7K3ARqpcqjr8LbeBOQERE31ZcRIpZqn5vQ2t1DHc2Lvpep&#xA;rxtZ1TgYXWodZ3kYQtyNCvFq0O46VMZ8QvvYUgNN1yBltYkmB1fUVl9AyHjcIfTBAERHNRUn9kU6&#xA;ZXIyBqufXuZmjE0eSZ/lta+aI9au/rrTJZQoyTxTsx5SkgqyKTv0PxDbKNNDIJHi5OPEEHd6Tmc2&#xA;OxV2KuxV2KuxV2KsC/OPzJeaR5ZMGn3LWuo3gf0nVOZ9OIAydiFryVanxyEzs2Yxu87tNb8zeY/L&#xA;dpY6oPq9uLmSdxESsjl14wQ8CBRXPqFftAnjt4wgCBTLJKJs3bLvJ+m6Dodt9Vt1iF8Q5YEq1wUU&#xA;leTVowSq02FMyzEkh10JCMTszSHVoIIGuVlVbVE5u5NU2FW2Hh7YSQTRCICUY8QPwYv5GPlbzd+k&#xA;ri/tYdUme4M5E8Ty2hVmYRtbrdKTyVPhcgUB6bZjgOcTsybQfIPlXRWEttpdkLxJ7ieG8W1hSWMX&#xA;EzyBEdV5ARrJ6a0P2RhpBLIcKHYq7FXYq7FXYq7FXnXmzzrbeV9cknkMCXOpH6tbzXBdY09IbGTi&#xA;GbiD/LtuKleogTRZgWHievfmLYafqmvX2pmK51N5CLHXbIxIvFeIjQho35hQuzbt+yDQk4CbZAUH&#xA;lMt15k1i3e70y3MVgWo2oXDBDK1fi9LmaufHjUj2w1XNeK+TI/LHlKaK2N7qNzetosbL9f1R4y8a&#xA;cnCkRAmlfi3HPpv7YDut1t1euflnpMmlT6xqPlu5TVLS5iksrQXsE6QXEiTRMysnFf7tFlXmGO56&#xA;ChGVzyCI3BPwZiJkeb2l/Jflua24x2UcYkMb1IL0CMGCjkTQew2+jDHT4xvXNqnkMtibT/L2DAfz&#xA;M8tatr+nxz6VqU2nanpvrNa+k5jRy4AIdgVKn4dmrtU7b5A7s47PPxbaz5fS8kvZ7a/1bXVml1Iz&#xA;RNNEHc0QIzFGaNVqODj8OtGfP4e1WwnMAqSeX/PusWmm2c/oX2iTW1XvJIYlhjYBlNY6O/qKB9v/&#xA;AIELvmdpZYpDil8nFzyykAY9r6s4i0DTLfXn1xXnudRCCK3ubllPoRqnApAkaoiKak9CdzvvlblM&#xA;y8tQg2z3RJZpTxBPTiu9QfcnFU5xV2KuxV2KuxV2KuxVhXn7RbG8uFuhzk1OG3ItYy/FBRiwoaVR&#xA;nbbmprsNsjI0yDzzRte1e280wQX1pHFOsMlwxSSP1Ilk+AVQVLVVl+Kgrk4ZTxUR8XHyaYAXH5JT&#xA;fXUHlrzBdX8M0l9qWrySUgC0VTdyn0lLEEkVBFRuKeG2DJMjkWeLEJR3FHqt1u01XWIP0fWSSJ4H&#xA;MwicCJGikjeIH1ACasDuOHUV6b4+ISjERu6cmXASTVWzT8tNQddV067YgLqsbW7QKSBGTF66tSnG&#xA;i+iYxvUVplsQwk9cybB2KuxV2KuxV2KuxV2Kvn78+tKubb/RbDRri5jmaI6dOsitGtzNLWZan4ow&#xA;6kKoZgtemwyEg2QeY+f9L06za0EuhXGkwvwhulu5I7qJ7kmvFDEGjG4NByNadBiRukHbdGaTrHlm&#xA;O/uEvdGvNUN4I7DT4ppGeKGZx+7X10SOlfBRyA+zjW1I4iSTyHc9E0ryZqPpfovVPMU9rdWcq3SW&#xA;NoeNrGjsXQRglOQV1qvxfDt8I6lMVEqZ9onlXULfT4W0W8hu9OmrxMrEuj829RmlQlZN9uIAockw&#xA;JZ1YQzwWNtBO6yTxRIksiKUVnVQGZVJYqCegqcKFfFUrvtKuWjm+qSBvV5VhmJ4gtvUOAzD5UP0Y&#xA;KTaRa35NtpraITRNeycqtQEcKDovH4qHvUnITxRlzDEgFN5dLube1+r2sMbQEBEhjAjEYI36niVr&#xA;4UPsckI1yZAt2PluCMiS9IuJB0j/AN1L9H7X0/dkkJyAAKDpirsVdirsVdirsVdirsVYD52tfMdn&#xA;d6prdnareB7WGC0ijDvIDB6rKGRabvLcEbV2AyJFsgUH5R/KprSOGbVJiZEtnhKrs5kkMJ9U8T6a&#xA;n9wa/CWblVmJGEClMra138pJrmO6kt79pHuIPq7QcQgKqzMpqS1TV+hoK79QKAxUSpW8g+V9ZjbT&#xA;9SvrZLUC3lhvoJ0PqyCcRl14noFlgWlR0r44QFJZxpWiaVpUTRadbJbo7vIwWu7SMXbc1NOTGg6D&#xA;thYo3FXYq7FXYq7FXYq7FXYqkGuaFql5fJPaXEaxkKsiSihUCtWUqp5V22b7+2KsT88fkvpHmHy+&#xA;bWZ5bq5tg1zbws/FJbtInWPkxNQpZ+7fhgpNpd+XPknzn5c8qW9pNYiG8jlnW4iFxG7lTNyhdGUh&#xA;CvByDyYMKDbtipeiWehx3GnQpq9tE12jMzFGYmhkJWr/AAsarTmOnUbjChNo44441jjUIiAKqqKA&#xA;AdABiq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp&#xA;R3MbyGI1SUbmNqA08RSoI+WKquKuxV2KuxV2KuxV2KuxV2KpbPrtqkywwI9yfVSGaSKnpxM7iP43&#xA;JAJBO6rVh3A642mkyxQ7FXYq7FUPqNytrp91dM6xrBDJKZHICqEUtyYnagpir5r/AC0/N3zJqF3b&#xA;w61eXUGpXJkXVr9Yo5HKJNRFhhbiE4GR9lieg3C0JIpECCTd22kggCuT2DzX57sW0qay0e4lF44U&#xA;JcoOIC1BajEhgeO3TDmBMaGxaqJGyn5E85sLM2GqyXF1diRmjmCtNSIgUDEVc0avbI4BICpGyoiQ&#xA;N0r87axo2vSw30P1izuPL7zTaZqhrCy3ATg7KrbMnE/ZkWjb1WmTMmwBn3lHUbrU/Kuj6hdsrXl3&#xA;ZW810UAA9Z4lMgoOlHrt2yxrKbYq7FXYq7FXYq7FXYq7FXYq7FXn35jfmHfeWNd0a1gtGkt5yz3E&#xA;jAhJACqmOMg/E6qxanSpX5ZElkBsbTybVop5BfJG0+nXEcZgkqVCMnMu24qvUAkffkJ5PTYHEnHG&#xA;zV0ivLmq3F/awsXjmIVfrQqVeNmjVwBseVeQO5HzOTgSYgnqz1MIwyyhH+E0neSaXYq7FXYq7FXY&#xA;q7FWM6rfSvqE8V25Gl28hjkiRvT5Uhjk+M/ak5NLx4gqtK8uWVznXucnBg4wa+ravx0SPzFfSx2c&#xA;cunsLWeCaBDKIhJFDFHIkvoKlVVSeA3O/QqCvSI72eSojgva/n5n9A+e7PbW4S5tYbhAQkyLIoPW&#xA;jgEfry5w1UkAVOwHU4qleheaNB15Jm0q8W4a2cx3MJDRzRNUgepE4WRK0qOS7jADaSCOaaYUMZu/&#xA;OejzapP5ejVnvnEkCGUcbZpeBpGzAl6E/DsuUfmI8fD1Y8Qunkdnp9r5L1i9kFpGt9aRerd2ok9c&#xA;xxNHy9OKRgjGMVPAsK+O+Treg3GW1ldNrC69cNfWrwxLK1GJBonFehXYluleRGExINFEZAixurQa&#xA;7eaIlwPrUawEAtNxAUncD4WL0b2qa4K6LfVRu9Ll8w21gk7yzxatIHtgkvpSSsrEEEsCwHxfEeOw&#xA;OAncA80x5Ejk9T0/zZo+jyab5YuYfq15DDb2rR25MtrC5RVSISycZGA2HIr8++ROoiJcPVpMhbLc&#xA;vZOxV2KuxV2KuxV2KuxVhfmP81/K+i6np+ntOk5v+Tm6Vx9Wjiif05KyrzBkB6J95G1YmXczEO/Z&#xA;gn5d/m7r13e6tc69DJPADK6yxskdvGkcjiH043IKLwUhjVmrSu9cohlJmRWzdkwiMR/Ob1fzTqXn&#xA;e4tbq306CCHRJFuzbyXCieZBIjuEZlUUKwkHbv3y3itqMIjqz/yV5w0fW9JEVnA6Q2KRwyQsOUkQ&#xA;C0UkCtV+E0ZfpAyUarZjKJCbGbRNFkjmDrHHqUyRRlBy5ysKKartSigVp8zjPIBVsCQnOSS7FXYq&#xA;7FXYq7FXYqx3VtHkF3JfNbz6jHJMHjtLT0opUJhSNnaWaaEU/cinAhhXuK5ExBNtkcsoggGgebCL&#xA;N7nXvys02HUILzR+DQTjU7UROpZLncRJHJNNV1JB5R779ehEuSxq3qMtxaWVszOyQ29uhLMxCoiI&#xA;NySdgFAybW82/MX80dCj8r/7jbpLt9QbgvGRoAsKu6ySsWC1TlCUIqOQPWh3iZC+E82UYyriHJiH&#xA;5PatoFv+a+oQRao2pajrNo7RRup9eCKIrKFuDRURgKpxH8ooADsRGlM+J6RYefNWuPOjaHJYotuJ&#xA;ZItg/rKqAkSMSeNDSvTvmJHUSOThrZp496UW8p6mnmFtdW0aTUl+MJ6kItTIF4lwCOdW67nqa5d4&#xA;EePi6s6D5f0vz/5suJbhNVuvrcfDjeXl4iSShRQBXncczxC1QF+ozIx8FHiRlGQEcD2LQriez0iS&#xA;3tdFhJ1BUkaakRZS6jZQzIFOw6L1yuUSDTZGQItBato9/d2s9jLZvG9erNGQHQ1FeDsaVG9MABSa&#xA;eP8Amv8AMDzV5etI4PL+qOIJXIi1OFeLpVQzC2YqrWwbkQVWhI+1WpwCIO/VnKR5dH03pXlPWr06&#xA;Prd9BN+l0tbZ3DSwtCZUjHF5iQZHZajkeW5Ue9YnBEy4urSQHpq8uI5U5U3p0rlyt4q7FXYq7FXY&#xA;q7FXzz+ZHnzz1qfnPzV5IhUpof1RbG2SCGhka6grJJLK45qY+RoVotKdQeWIHFe4FJPpIuJIl1DF&#xA;7XTLPR7G1m1G+j1G90aZoorGWIm1SNqFqONj8Y6fDv2OUbX5uRxXsd/vROv6rLr1ra3NlHbW7x0i&#xA;EVvCyJHGSeNWpxY7bb/RjuT5IAolBPqttpVgmpeYoVkt0jMWnRF405yuo9MuEKuVNNwDX3yQEQfL&#xA;yQbrauLzZl/zjt5ug1Tzt5l0u205raG2t45Gmdy55+pTguygKeZK1rsB4bzEYj6TYajKZHrFHue6&#xA;XWkWNzJFJJH8UMyXK02Hqx14sR0r8XXrhIBYozCrsVdirsVdirsVdirsVQ7OBVEoqrtxG2KvG/PX&#xA;5nah5dPmS282QJHo80TwadDEp9R4WkaIkcWqWmieteYC0GwrleSRqo/U2Qh1J2fP2peZfNmt/oiy&#xA;8oSajHDqUrpbWKyCS5CBioHKKOEBeJYtxHHxxERbKUjT2n8nPyXvdE/MqfzXfM7LDHNDaiOPhErc&#xA;FhPqmYiT1GUt8MalRTdugNhkSbLSIiIocnuUGkenrc2o/B+9QJyA+MgUoGNOg3pvgpbTLCry3UPy&#xA;L0i81uXUJhDPPcLIJdRlVPWBkJO9sI/q0j77SMKig61OCk2iPMXkSz0fRFh0qdxJGoW2teK8nCUL&#xA;BfTC708FyrOJGBrmxIvks8n+Tl1PTX/S08iyvUyWZUiRYnqo5lxsW4ttTpkdPCQhUliCOaFP5CaJ&#xA;+kracJb1s0pbal6cYuEYGoYWwi+q8wd/U41r2y4RpmZW9XGw6198kxdirsVdirsVdirsVdirwH83&#xA;tBvbfzVeXdv6l1FeokkhI5cG48Qj8RUoAoIPYbdsrMS3wmCN2E6Nc2Usi6dqtyWt3ctNFaxRySki&#xA;hoqn4tglfo6ZCgyPelWsfmBdw3f+EfLjXMi3BkuPVCL8cIjLJ+7QO5PwnkOw99ggnnzCTHej6Ss8&#xA;m/lD5589Wtnda21wjC+eeaJ1WPgoKkrUnjBy5seJir3VW3xvc1+xIjsDI1183075F/LTRPJ8t3cW&#xA;FPrF7tcGJBDGwDclrGparDxJ26KANssjCuZacmQEUBTL8m1OxV2KuxV2KuxV2KuxV2Ksc86aldaL&#xA;o76jZxerLzVW5VKIG/bahBpXb5nKNRMwjYRKVB5Fr35Zal+ZNo2qXayRrdOsDSQlPijR+TcY5gFU&#xA;DosiljWtRsMGCZnGymE7D0zyd+WGgaBo+mWf1ZUawhVfq6O0sIkD+oXDOBIx5b9hXfiMvpNs0wod&#xA;irsVdiqjd2VrdxiO5iEig1WvUHxBG4+jFWrSwtLNWW2iEYc1cipJI8Sak4qr4q7FXYq7FXYq7FXY&#xA;q7FXYqlWteW9P1bi8/KOdBxWZKA060NagjFWN3H5SeX7y6huL9vrEkBBik9NVkWhqKPueu+NJBpK&#xA;9C/IPyhpmvPq0qLcsFaOKMoQeBBFGJd179Y1Sp3ykYuh5fjm5J1PUD1fjl3PSLa1trWBLe2iSCBN&#xA;kijUKorvsBloFOMZEmyq4UOxV2KuxV2KuxV2KuxV2KuxVC6nZ/XbCa1+Gko4kMKqRUEgjwPTFW9M&#xA;tDZ2MNsaful4gLsoFdgPYYqicVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a826c13a-3cc0-2840-b277-bab6ad833b55</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a826c13a-3cc0-2840-b277-bab6ad833b55</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:293b6978-c68a-4088-b96a-150fc1d15f84</stRef:instanceID>
            <stRef:documentID>xmp.did:fe32ca6b-56c2-6847-9c32-e22b4d61ea6b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C10F092A1323EA1194E6F74FAB225782</stEvt:instanceID>
                  <stEvt:when>2019-12-20T15:26:20+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BC225866B423EA1182E49F22E3394091</stEvt:instanceID>
                  <stEvt:when>2019-12-21T13:13:33+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4114473C5325EA11BADEA395995CDBA4</stEvt:instanceID>
                  <stEvt:when>2019-12-23T13:09:16+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fe32ca6b-56c2-6847-9c32-e22b4d61ea6b</stEvt:instanceID>
                  <stEvt:when>2021-03-26T04:07:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a826c13a-3cc0-2840-b277-bab6ad833b55</stEvt:instanceID>
                  <stEvt:when>2021-03-27T08:09:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>550.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
550 450 li
550 0 li
cp
clp
386.113 270.317 mo
371.796 262.052 li
371.022 262.82 370.131 263.559 368.989 264.218 cv
365.427 266.275 360.758 267.303 356.089 267.303 cv
352.819 267.303 349.549 266.798 346.659 265.79 cv
357.918 259.29 li
357.918 255.418 li
353.062 252.614 li
354.38 252.051 355.766 251.478 356.519 250.508 cv
356.779 250.173 356.827 249.528 356.784 248.848 cv
356.888 247.565 356.374 245.641 356.374 245.641 cv
356.374 245.641 354.406 245.455 352.287 245.455 cv
350.267 245.455 348.11 245.625 347.396 246.288 cv
347.003 246.652 346.625 246.991 346.26 247.308 cv
331.309 238.676 li
337.88 234.882 li
337.88 236.425 li
379.875 212.178 li
433.818 243.322 li
389.03 269.182 li
388.555 268.908 li
386.113 270.317 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.698039 .698039 .698039 rgb
f
344.234 236.931 mo
344.234 230.669 li
338.314 230.669 li
338.314 236.931 li
338.314 237.369 338.602 237.805 339.181 238.138 cv
340.338 238.806 342.213 238.806 343.368 238.138 cv
343.945 237.805 344.234 237.369 344.234 236.931 cv
cp
.329412 .270588 .25098 rgb
f
343.368 231.881 mo
342.213 232.547 340.338 232.547 339.181 231.881 cv
338.025 231.212 338.025 230.128 339.181 229.462 cv
340.338 228.795 342.213 228.795 343.368 229.462 cv
344.522 230.128 344.522 231.212 343.368 231.881 cv
cp
.513726 .431373 .411765 rgb
f
377.953 217.466 mo
377.953 211.202 li
372.033 211.202 li
372.033 217.466 li
372.033 217.904 372.322 218.34 372.9 218.673 cv
374.055 219.339 375.929 219.339 377.085 218.673 cv
377.661 218.34 377.953 217.904 377.953 217.466 cv
cp
.329412 .270588 .25098 rgb
f
377.085 212.414 mo
375.929 213.082 374.055 213.082 372.9 212.414 cv
371.744 211.743 371.744 210.663 372.9 209.997 cv
374.055 209.325 375.929 209.325 377.085 209.997 cv
378.242 210.663 378.242 211.743 377.085 212.414 cv
cp
.513726 .431373 .411765 rgb
f
337.88 189.763 mo
331.309 185.973 li
378.539 158.705 li
385.104 162.5 li
379.942 168.274 li
337.88 189.763 li
.968627 .968627 .968627 rgb
f
337.88 236.425 mo
331.309 232.632 li
331.309 185.973 li
337.88 189.763 li
346.732 195.881 li
337.88 236.425 li
cp
.956863 .937255 .913725 rgb
f
385.104 209.159 mo
337.88 236.425 li
337.88 189.763 li
385.104 162.5 li
385.104 209.159 li
.819608 .819608 .819608 rgb
f
381.061 258.082 mo
338.918 233.75 li
338.918 217.563 li
365.784 230.323 li
381.061 241.892 li
381.061 258.082 li
cp
.956863 .937255 .913725 rgb
f
427.246 231.417 mo
381.061 258.082 li
381.061 241.892 li
393.952 229.307 li
427.246 215.226 li
427.246 231.417 li
cp
.819608 .819608 .819608 rgb
f
381.061 241.892 mo
338.918 217.563 li
385.104 190.896 li
427.246 215.226 li
381.061 241.892 li
cp
.968627 .968627 .968627 rgb
f
377.76 243.794 mo
335.622 219.465 li
335.622 210.99 li
362.487 223.751 li
377.76 235.324 li
377.76 243.794 li
cp
.956863 .937255 .913725 rgb
f
427.246 215.226 mo
377.76 243.794 li
377.76 235.324 li
390.656 222.74 li
427.246 206.753 li
427.246 215.226 li
cp
.819608 .819608 .819608 rgb
f
377.76 235.324 mo
335.622 210.99 li
385.106 182.42 li
427.246 206.753 li
377.76 235.324 li
cp
.968627 .968627 .968627 rgb
f
427.246 174.614 mo
427.246 206.753 li
414.759 213.961 li
417.526 181.343 li
419.91 178.851 li
427.246 174.614 li
cp
.819608 .819608 .819608 rgb
f
385.106 150.285 mo
427.246 174.614 li
419.91 178.851 li
402.566 173.977 li
377.77 154.519 li
385.106 150.285 li
.968627 .968627 .968627 rgb
f
419.91 178.851 mo
414.759 213.961 li
372.617 189.632 li
377.77 154.519 li
419.91 178.851 li
.956863 .937255 .913725 rgb
f
346.151 169.194 mo
342.513 167.51 349.009 160.697 350.987 162.821 cv
351.953 163.858 353.296 165.533 353.296 165.533 cv
348.459 170.368 li
348.459 170.368 348.288 170.183 346.151 169.194 cv
cp
.341176 .286275 .262745 rgb
f
347.25 161.355 mo
347.25 161.355 344.639 159.11 343.467 158.404 cv
342.293 157.692 338.556 156.714 338.166 157.399 cv
337.776 158.085 340.584 159.428 340.584 159.428 cv
335.492 159.632 li
335.492 159.632 332.986 158.295 332.34 158.905 cv
331.13 160.036 336.006 166.047 338.313 166.228 cv
339.228 166.304 344.661 166.12 344.661 166.12 cv
346.554 166.745 li
348.827 163.553 li
347.25 161.355 li
cp
.941176 .776471 .705882 rgb
f
347.887 169.538 mo
344.661 166.12 li
344.661 166.12 347.946 164.874 347.25 161.355 cv
351.843 164.898 li
347.887 169.538 li
cp
.968627 .968627 .968627 rgb
f
346.151 169.195 mo
346.151 169.195 350.621 168.608 350.987 162.822 cv
356.629 166.851 361.098 169.562 361.098 169.562 cv
361.098 169.562 369.304 163.188 374.506 156.467 cv
376.173 154.307 380 155.423 380 155.423 cv
381.831 164.724 li
381.831 164.724 365.785 179.162 361.831 179.162 cv
358.535 179.162 346.151 169.195 346.151 169.195 cv
.709804 .686275 .654902 rgb
f
347.396 247.068 mo
343.917 250.289 341.571 251.57 340.07 252.889 cv
338.566 254.21 338.796 256.526 338.935 256.956 cv
339.667 259.229 341.766 259.284 344.712 257.981 cv
347.616 256.7 349.573 254.515 351.185 253.522 cv
352.796 252.533 355.381 251.974 356.519 250.508 cv
357.222 249.601 356.374 246.424 356.374 246.424 cv
356.374 246.424 348.858 245.712 347.396 247.068 cv
.129412 .101961 .101961 rgb
f
347.396 246.288 mo
343.917 249.508 341.571 250.794 340.07 252.111 cv
338.566 253.43 338.796 255.747 338.935 256.178 cv
339.667 258.449 341.766 258.504 344.712 257.205 cv
347.616 255.919 349.573 253.736 351.185 252.745 cv
352.796 251.752 355.381 251.193 356.519 249.73 cv
357.222 248.82 356.374 245.641 356.374 245.641 cv
356.374 245.641 348.858 244.929 347.396 246.288 cv
.419608 .266667 .0784314 rgb
f
366.924 195.785 mo
354.722 204.782 352.232 209.599 346.345 214.929 cv
344.15 216.917 344.697 221.517 345.013 223.898 cv
346.619 235.99 347.106 241.46 347.031 245.515 cv
346.958 249.571 357.177 248.417 356.687 244.12 cv
356.197 239.819 356.846 229.251 355.793 220.932 cv
356.336 220.091 375.051 210.725 375.051 210.725 cv
380.868 202.775 li
375.977 194.498 li
375.977 194.498 369.164 195.804 366.924 195.785 cv
cp
.639216 .611765 .584314 rgb
f
352.125 261.584 mo
351.27 262.574 351.393 264.064 351.441 264.566 cv
352.224 267.884 358.403 267.092 361.663 264.311 cv
364.578 261.822 368.292 259.129 368.292 257.998 cv
368.292 256.859 368.292 256.971 368.292 256.971 cv
368.292 256.971 352.98 260.596 352.125 261.584 cv
cp
.129412 .101961 .101961 rgb
f
359.712 252.944 mo
356.962 256.358 352.98 259.814 352.125 260.804 cv
351.27 261.792 351.393 263.282 351.441 263.786 cv
352.224 267.108 358.403 266.314 361.663 263.529 cv
364.578 261.042 368.292 258.35 368.292 257.215 cv
368.292 256.081 368.292 253.451 368.292 253.451 cv
368.292 253.451 361.977 252.609 359.712 252.944 cv
cp
.419608 .266667 .0784314 rgb
f
376.903 197.22 mo
376.852 201.422 378.371 204.352 378.371 204.352 cv
378.371 204.352 363.232 218.248 361.285 221.049 cv
359.34 223.843 358.581 227.122 358.727 229.594 cv
359.283 238.971 360.07 248.546 359.685 252.377 cv
359.307 256.211 369 255.776 369.148 252.062 cv
369.431 244.878 370.552 240.277 369.867 229.287 cv
370.468 228.914 389.068 216.478 392.463 212.714 cv
394.254 210.737 393.069 204.052 393.069 204.052 cv
391.858 194.972 li
378.819 193.912 li
378.819 193.912 377.548 196.927 376.903 197.22 cv
cp
.709804 .686275 .654902 rgb
f
392.435 157.485 mo
394.388 159.732 li
391.505 171.602 li
381.493 182.005 li
376.706 181.08 li
375.046 168.524 li
377.081 159.635 li
381.351 154.261 li
385.4 154.703 li
392.435 157.485 li
.968627 .968627 .968627 rgb
f
382.141 164.702 mo
379.001 170.429 377.634 181.175 377.634 181.175 cv
377.634 181.175 380.943 182.814 381.223 182.543 cv
380.566 176.01 383.53 165.314 383.53 165.314 cv
383.081 164.056 li
383.081 164.056 382.171 164.433 382.141 164.702 cv
.219608 .6 .596078 rgb
f
381.493 162.925 mo
382.141 164.702 li
383.53 165.314 li
385.341 164.592 li
385.615 162.658 li
383.657 162.566 li
382.355 161.714 li
381.493 162.925 li
.254902 .501961 .501961 rgb
f
391.606 153.026 mo
391.798 154.703 li
391.798 157.926 li
388.014 161.98 li
385.743 162.958 li
383.657 162.566 li
381.883 161.443 li
381.351 157.678 li
381.223 154.703 li
383.253 151.211 li
389.54 150.893 li
391.606 153.026 li
.780392 .643137 .584314 rgb
f
392.092 156.804 mo
392.092 156.804 393.119 159.291 391.8 162.958 cv
389.672 168.877 382.622 172.495 379.527 180.006 cv
375.238 162.958 380.461 157.58 383.543 155.581 cv
383.643 154.703 379.93 154.261 379.93 154.261 cv
379.93 154.261 376.292 155.627 375.024 161.248 cv
372.238 169.036 373.175 175.414 373.175 175.414 cv
373.175 175.414 373.805 185.423 373.076 188.135 cv
372.344 190.847 367.725 194.985 366.924 195.785 cv
367.971 196.828 371.576 198.783 373.175 204.052 cv
376.578 204.421 378.023 199.883 378.023 199.883 cv
378.023 199.883 377.701 204.06 376.819 206.405 cv
387.377 207.076 386.651 215.367 393.069 212.467 cv
394.472 211.832 399.585 203.767 398.999 197.319 cv
398.413 190.872 401.029 191.827 400.296 183.55 cv
400.086 181.159 402.445 165.262 402.371 164.81 cv
396.389 158.888 392.092 156.804 392.092 156.804 cv
.847059 .819608 .780392 rgb
f
382.058 186.531 mo
382.428 186.779 382.727 187.387 382.727 187.886 cv
382.727 188.386 382.428 188.589 382.058 188.337 cv
381.691 188.091 381.392 187.482 381.392 186.982 cv
381.392 186.484 381.691 186.282 382.058 186.531 cv
cp
.258824 .258824 .258824 rgb
f
382.058 193.727 mo
382.428 193.974 382.727 194.582 382.727 195.083 cv
382.727 195.578 382.428 195.782 382.058 195.534 cv
381.691 195.283 381.392 194.676 381.392 194.178 cv
381.392 193.677 381.691 193.475 382.058 193.727 cv
cp
f
376.16 183.082 mo
376.528 183.336 376.826 183.939 376.826 184.438 cv
376.826 184.938 376.528 185.143 376.16 184.891 cv
375.79 184.642 375.494 184.035 375.494 183.534 cv
375.494 183.039 375.79 182.834 376.16 183.082 cv
cp
f
376.16 190.279 mo
376.528 190.526 376.826 191.135 376.826 191.634 cv
376.826 192.135 376.528 192.334 376.16 192.085 cv
375.79 191.835 375.494 191.232 375.494 190.731 cv
375.494 190.231 375.79 190.027 376.16 190.279 cv
cp
f
380.699 164.551 mo
380.699 164.551 379.775 162.381 380.065 159.201 cv
380.147 159.062 380.231 158.928 380.316 158.798 cv
380.106 161.714 380.909 163.77 380.909 163.77 cv
381.111 163.606 381.364 163.454 381.636 163.317 cv
381.797 163.759 li
381.379 164.041 380.977 164.325 380.699 164.551 cv
.67451 .67451 .67451 rgb
f
381.797 163.759 mo
381.636 163.317 li
382.547 162.857 383.657 162.566 383.657 162.566 cv
383.657 162.566 382.69 163.157 381.797 163.759 cv
.176471 .34902 .34902 rgb
f
380.065 159.201 mo
380.121 158.583 380.223 157.927 380.387 157.241 cv
380.414 157.244 380.46 157.247 380.519 157.25 cv
380.416 157.786 380.352 158.304 380.316 158.798 cv
380.231 158.928 380.147 159.062 380.065 159.201 cv
.592157 .572549 .545098 rgb
f
383.657 162.566 mo
383.657 162.566 382.276 160.333 382.226 156.925 cv
382.337 156.883 381.845 156.898 381.367 156.914 cv
381.019 156.925 380.679 156.936 380.585 156.925 cv
379.747 160.794 380.909 163.77 380.909 163.77 cv
381.786 163.057 383.657 162.566 383.657 162.566 cv
.968627 .968627 .968627 rgb
f
392.274 157.421 mo
391.798 157.233 li
391.798 155.891 li
392.134 156.561 392.826 157.105 393.069 157.343 cv
393.069 157.344 393.069 157.346 393.069 157.347 cv
392.437 156.971 392.092 156.804 392.092 156.804 cv
392.092 156.804 392.182 157.021 392.274 157.421 cv
.67451 .67451 .67451 rgb
f
383.96 166.352 mo
383.945 165.989 383.921 165.581 383.891 165.171 cv
385.341 164.592 li
385.577 162.927 li
385.743 162.958 li
388.014 161.98 li
391.798 157.926 li
391.798 157.233 li
392.274 157.421 li
392.42 158.054 392.572 159.144 392.389 160.559 cv
390.266 165.61 383.96 166.352 383.96 166.352 cv
f
383.891 165.171 mo
383.797 163.879 383.657 162.566 383.657 162.566 cv
383.657 162.566 li
385.577 162.927 li
385.341 164.592 li
383.891 165.171 li
.176471 .34902 .34902 rgb
f
385.743 162.958 mo
385.577 162.927 li
383.657 162.566 li
383.657 162.566 383.672 162.566 383.7 162.566 cv
384.269 162.566 390.328 162.405 391.673 155.581 cv
391.704 155.687 391.747 155.79 391.798 155.891 cv
391.798 157.233 li
391.798 157.926 li
388.014 161.98 li
385.743 162.958 li
.545098 .447059 .407843 rgb
f
392.389 160.559 mo
392.572 159.144 392.42 158.054 392.274 157.421 cv
392.182 157.021 392.092 156.804 392.092 156.804 cv
392.092 156.804 392.437 156.971 393.069 157.347 cv
393.023 158.575 392.775 159.638 392.389 160.559 cv
.592157 .572549 .545098 rgb
f
391.798 154.703 mo
390.387 161.864 383.657 162.566 383.657 162.566 cv
383.657 162.566 384.366 164.131 384.423 165.641 cv
384.423 165.641 392.523 164.014 393.069 157.193 cv
392.79 156.918 392.043 155.507 391.798 154.703 cv
cp
.968627 .968627 .968627 rgb
f
387.007 207.34 mo
383.96 209.188 380.1 202.18 381.883 201.322 cv
383.005 200.908 384.923 199.493 384.923 199.493 cv
389.65 205.281 li
389.65 205.281 387.614 206.516 387.007 207.34 cv
cp
.0392157 .0313726 .0313726 rgb
f
387.377 205.842 mo
384.806 207.34 li
380.958 202.537 li
383.299 200.762 li
386.058 201.43 li
387.024 203.063 li
387.377 205.842 li
cp
.968627 .968627 .968627 rgb
f
400.249 164.47 mo
404.924 164.112 405.233 169.94 405.233 169.94 cv
405.233 169.94 404.108 192.754 403.572 195.046 cv
403.033 197.345 389.138 205.779 387.007 207.34 cv
387.721 206.45 385.034 200.641 381.883 201.322 cv
383.784 200.05 395.021 191.718 395.168 190.945 cv
395.351 189.983 395.755 170.134 395.755 170.134 cv
395.755 170.134 395.804 164.815 400.249 164.47 cv
cp
.709804 .686275 .654902 rgb
f
384.732 207.505 mo
385.827 205.538 381.972 201.823 380.689 202.661 cv
379.403 203.496 376.218 205.022 375.144 206.281 cv
374.069 207.541 371.98 210.763 371.833 211.569 cv
371.689 212.374 372.621 213.388 373.175 213.778 cv
374.362 214.61 376.01 214.725 377.182 214.61 cv
378.353 214.501 381.786 211.41 381.786 211.41 cv
381.786 211.41 383.63 209.469 384.732 207.505 cv
cp
.941176 .776471 .705882 rgb
f
379.527 180.006 mo
379.294 181.656 379.151 183.316 379.027 184.975 cv
378.894 186.631 378.811 188.293 378.714 189.95 cv
378.44 194.919 li
378.396 195.749 378.335 196.575 378.265 197.401 cv
378.207 198.231 378.116 199.052 378.023 199.883 cv
378.455 198.271 378.693 196.616 378.89 194.959 cv
379.088 193.306 379.198 191.642 379.297 189.983 cv
379.381 188.321 379.448 186.659 379.476 184.998 cv
379.519 182.505 li
379.527 180.006 li
cp
.639216 .611765 .584314 rgb
f
376.914 142.004 mo
376.914 142.004 376.028 145.433 376.25 146.571 cv
376.327 146.976 376.724 147.363 376.724 147.363 cv
376.724 147.363 374.158 150.307 374.304 150.93 cv
374.453 151.552 376.028 151.843 376.028 151.843 cv
376.028 151.843 376.213 155.995 376.461 156.609 cv
377.346 158.77 383.346 157.091 384.912 156.474 cv
386.477 155.853 385.974 153.689 386.303 153.763 cv
389.087 153.407 389.54 150.646 389.54 150.646 cv
388.812 143.383 li
381.742 140.564 li
376.914 142.004 li
cp
.941176 .776471 .705882 rgb
f
376.914 142.004 mo
376.914 142.004 379.714 141.785 380.527 143.657 cv
381.342 145.522 382.397 146.804 383.02 147.428 cv
383.643 148.054 383.739 150.97 383.801 151.618 cv
383.861 152.264 384.576 152.462 384.923 151.86 cv
385.272 151.258 385.106 149.8 386.316 149.884 cv
388.124 150.003 387.928 151.519 387.856 151.86 cv
387.343 154.279 387.44 155.011 388.54 155.473 cv
389.638 155.942 392.409 155.662 392.945 154.427 cv
395.108 149.442 395.217 141.897 392.873 140.982 cv
388.355 132.727 384.667 136.438 378.674 135.89 cv
375.337 135.583 376.914 142.004 376.914 142.004 cv
cp
.67451 .533333 .329412 rgb
f
377.402 140.968 mo
377.402 140.968 383.409 134.62 390.2 138.622 cv
383.704 135.89 377.402 140.968 377.402 140.968 cv
cp
.658824 .486275 .286275 rgb
f
392.945 265.056 mo
392.945 258.793 li
387.025 258.793 li
387.025 265.056 li
387.025 265.493 387.315 265.929 387.892 266.261 cv
389.047 266.93 390.921 266.93 392.081 266.261 cv
392.658 265.929 392.945 265.493 392.945 265.056 cv
cp
.329412 .270588 .25098 rgb
f
392.081 259.999 mo
390.921 260.669 389.047 260.669 387.892 259.999 cv
386.739 259.334 386.739 258.252 387.892 257.586 cv
389.047 256.92 390.921 256.92 392.081 257.586 cv
393.236 258.252 393.236 259.334 392.081 259.999 cv
cp
.513726 .431373 .411765 rgb
f
426.662 245.589 mo
426.662 239.328 li
420.742 239.328 li
420.742 245.585 li
420.742 246.024 421.031 246.464 421.607 246.797 cv
422.766 247.464 424.64 247.464 425.795 246.797 cv
426.373 246.464 426.662 246.028 426.662 245.589 cv
cp
.329412 .270588 .25098 rgb
f
425.795 240.533 mo
424.64 241.2 422.766 241.2 421.607 240.533 cv
420.453 239.867 420.453 238.787 421.607 238.12 cv
422.766 237.45 424.64 237.45 425.795 238.12 cv
426.954 238.787 426.954 239.867 425.795 240.533 cv
cp
.513726 .431373 .411765 rgb
f
386.589 217.887 mo
380.021 214.097 li
427.246 186.831 li
433.818 190.623 li
428.653 196.397 li
386.589 217.887 li
cp
.968627 .968627 .968627 rgb
f
386.589 264.548 mo
380.021 260.755 li
380.021 214.097 li
386.589 217.887 li
395.442 229.864 li
386.589 264.548 li
cp
.956863 .937255 .913725 rgb
f
433.818 237.281 mo
386.589 264.548 li
386.589 217.887 li
433.818 190.623 li
433.818 237.281 li
cp
.819608 .819608 .819608 rgb
f
266.184 340.106 mo
209.332 307.282 li
233.454 293.356 li
266.184 312.253 li
266.184 308.381 li
266.184 312.249 li
333.795 273.217 li
357.444 286.869 li
290.272 325.648 li
290.272 326.199 li
266.184 340.106 li
.698039 .698039 .698039 rgb
f
298.28 245.142 mo
215.545 292.905 li
216.602 294.739 li
299.337 246.971 li
299.471 246.894 299.556 246.726 299.556 246.485 cv
299.556 246.012 299.22 245.432 298.81 245.193 cv
298.601 245.076 298.414 245.06 298.28 245.142 cv
.329412 .270588 .25098 rgb
f
216.073 292.961 mo
216.487 293.198 216.823 293.78 216.823 294.253 cv
216.823 294.731 216.487 294.923 216.073 294.687 cv
215.66 294.45 215.327 293.869 215.327 293.391 cv
215.327 292.913 215.66 292.719 216.073 292.961 cv
cp
.513726 .431373 .411765 rgb
f
217.358 307.105 mo
217.358 279.518 li
211.438 279.518 li
211.438 307.105 li
211.438 307.544 211.728 307.977 212.305 308.313 cv
213.463 308.978 215.338 308.978 216.493 308.313 cv
217.071 307.977 217.358 307.544 217.358 307.105 cv
cp
.329412 .270588 .25098 rgb
f
216.493 280.725 mo
215.338 281.389 213.463 281.389 212.305 280.725 cv
211.151 280.059 211.151 278.979 212.305 278.309 cv
213.463 277.64 215.338 277.64 216.493 278.309 cv
217.65 278.979 217.65 280.059 216.493 280.725 cv
cp
.513726 .431373 .411765 rgb
f
303.862 257.16 mo
303.862 229.576 li
297.942 229.576 li
297.942 257.16 li
297.942 257.597 298.23 258.038 298.81 258.372 cv
299.965 259.038 301.839 259.038 302.994 258.372 cv
303.574 258.038 303.862 257.6 303.862 257.16 cv
cp
.329412 .270588 .25098 rgb
f
302.994 230.784 mo
301.839 231.45 299.965 231.45 298.81 230.784 cv
297.652 230.118 297.652 229.036 298.81 228.365 cv
299.965 227.699 301.839 227.699 302.994 228.365 cv
304.151 229.036 304.151 230.118 302.994 230.784 cv
cp
.513726 .431373 .411765 rgb
f
303.523 245.142 mo
351.541 272.862 li
350.485 274.695 li
302.466 246.971 li
302.33 246.894 302.249 246.726 302.249 246.485 cv
302.249 246.012 302.583 245.432 302.994 245.193 cv
303.202 245.076 303.391 245.06 303.523 245.142 cv
cp
.329412 .270588 .25098 rgb
f
351.012 272.914 mo
350.599 273.151 350.263 273.733 350.263 274.209 cv
350.263 274.688 350.599 274.88 351.012 274.644 cv
351.424 274.404 351.759 273.822 351.759 273.346 cv
351.759 272.869 351.424 272.678 351.012 272.914 cv
cp
.513726 .431373 .411765 rgb
f
350.064 275.04 mo
267.331 322.803 li
268.387 324.635 li
351.122 276.87 li
351.257 276.791 351.34 276.625 351.34 276.385 cv
351.34 275.909 351.006 275.329 350.592 275.092 cv
350.386 274.97 350.198 274.959 350.064 275.04 cv
cp
.329412 .270588 .25098 rgb
f
267.859 322.855 mo
268.272 323.097 268.606 323.674 268.606 324.151 cv
268.606 324.63 268.272 324.821 267.859 324.586 cv
267.446 324.349 267.11 323.766 267.11 323.288 cv
267.11 322.809 267.446 322.618 267.859 322.855 cv
cp
.513726 .431373 .411765 rgb
f
217.024 295.083 mo
265.038 322.803 li
263.98 324.635 li
215.963 296.918 li
215.83 296.834 215.744 296.666 215.744 296.431 cv
215.744 295.952 216.08 295.372 216.493 295.135 cv
216.699 295.017 216.888 295.004 217.024 295.083 cv
cp
.329412 .270588 .25098 rgb
f
264.512 322.855 mo
264.096 323.097 263.762 323.674 263.762 324.151 cv
263.762 324.63 264.096 324.821 264.512 324.586 cv
264.924 324.349 265.257 323.766 265.257 323.288 cv
265.257 322.809 264.924 322.618 264.512 322.855 cv
cp
.513726 .431373 .411765 rgb
f
269.145 337.002 mo
269.145 309.415 li
263.225 309.415 li
263.225 337 li
263.225 337.435 263.511 337.875 264.092 338.209 cv
265.246 338.878 267.12 338.878 268.28 338.209 cv
268.856 337.875 269.145 337.441 269.145 337.002 cv
cp
.329412 .270588 .25098 rgb
f
268.28 310.621 mo
267.12 311.29 265.246 311.29 264.092 310.621 cv
262.936 309.957 262.936 308.874 264.092 308.209 cv
265.246 307.538 267.12 307.538 268.28 308.209 cv
269.433 308.874 269.433 309.957 268.28 310.621 cv
cp
.513726 .431373 .411765 rgb
f
355.647 287.057 mo
355.647 259.475 li
349.727 259.475 li
349.727 287.057 li
349.727 287.495 350.016 287.931 350.592 288.268 cv
351.748 288.935 353.624 288.935 354.78 288.268 cv
355.358 287.931 355.647 287.495 355.647 287.057 cv
cp
.329412 .270588 .25098 rgb
f
354.78 260.682 mo
353.624 261.348 351.748 261.348 350.592 260.682 cv
349.438 260.016 349.438 258.93 350.592 258.263 cv
351.748 257.597 353.624 257.597 354.78 258.263 cv
355.936 258.93 355.936 260.016 354.78 260.682 cv
cp
.513726 .431373 .411765 rgb
f
266.184 312.253 mo
209.335 279.43 li
209.332 275.557 li
257.782 296.661 li
266.184 308.381 li
266.184 312.253 li
.211765 .172549 .160784 rgb
f
357.918 259.29 mo
266.184 312.249 li
266.184 308.381 li
287.234 288.221 li
357.918 255.418 li
357.918 259.29 li
.0392157 .0313726 .0313726 rgb
f
266.184 308.381 mo
209.332 275.557 li
301.067 222.594 li
357.918 255.418 li
266.184 308.381 li
.341176 .286275 .262745 rgb
f
309.214 240.953 mo
293.126 250.241 li
270.912 237.413 li
286.999 228.125 li
309.214 240.953 li
cp
.968627 .968627 .968627 rgb
f
302.4 241.835 mo
300.738 242.792 298.037 242.792 296.373 241.835 cv
294.706 240.87 294.709 239.311 296.37 238.351 cv
298.036 237.392 300.737 237.392 302.402 238.351 cv
304.066 239.314 304.065 240.87 302.4 241.835 cv
cp
.729412 .952941 1 rgb
f
294.794 246.268 mo
293.134 247.225 290.433 247.225 288.769 246.268 cv
287.102 245.304 287.104 243.746 288.766 242.784 cv
290.43 241.825 293.133 241.825 294.799 242.784 cv
296.463 243.748 296.462 245.304 294.794 246.268 cv
cp
.709804 .686275 .654902 rgb
f
296.404 236.426 mo
285.341 242.814 li
282.292 241.055 li
293.355 234.665 li
296.404 236.426 li
cp
.847059 .819608 .780392 rgb
f
278.572 239.782 mo
274.498 237.431 li
278.637 235.041 li
282.712 237.395 li
278.572 239.782 li
cp
f
309.214 244.833 mo
293.126 254.119 li
293.126 250.241 li
309.214 240.953 li
309.214 244.833 li
cp
.819608 .819608 .819608 rgb
f
293.126 254.119 mo
270.912 241.293 li
270.912 237.413 li
293.126 250.241 li
293.126 254.119 li
cp
.956863 .937255 .913725 rgb
f
270.5 288.158 mo
254.412 297.445 li
232.198 284.618 li
248.285 275.33 li
270.5 288.158 li
.968627 .968627 .968627 rgb
f
265.147 287.762 mo
254.086 294.153 li
251.037 292.392 li
262.098 286.002 li
265.147 287.762 li
cp
.847059 .819608 .780392 rgb
f
259.049 284.243 mo
247.988 290.631 li
244.939 288.87 li
256.001 282.482 li
259.049 284.243 li
cp
f
252.952 280.721 mo
241.89 287.11 li
238.841 285.35 li
249.903 278.96 li
252.952 280.721 li
f
274.357 277.928 mo
258.27 287.214 li
236.054 274.388 li
252.143 265.101 li
274.357 277.928 li
cp
.968627 .968627 .968627 rgb
f
254.181 272.332 mo
252.732 273.169 250.39 273.169 248.941 272.332 cv
247.495 271.496 247.491 270.145 248.94 269.307 cv
250.386 268.473 252.732 268.473 254.179 269.307 cv
255.627 270.145 255.627 271.503 254.181 272.332 cv
cp
.639216 .611765 .584314 rgb
f
261.548 273.401 mo
250.486 279.79 li
247.438 278.029 li
258.499 271.64 li
261.548 273.401 li
cp
.847059 .819608 .780392 rgb
f
267.646 276.922 mo
256.584 283.313 li
253.535 281.552 li
264.597 275.161 li
267.646 276.922 li
cp
f
243.715 276.756 mo
239.642 274.407 li
243.781 272.017 li
247.856 274.371 li
243.715 276.756 li
cp
f
235.908 286.761 mo
235.523 286.663 235.163 286.522 234.848 286.34 cv
234.534 286.159 234.293 285.952 234.125 285.731 cv
235.908 286.761 li
.239216 .2 .184314 rgb
f
237.306 286.931 mo
236.829 286.931 236.352 286.874 235.908 286.761 cv
234.125 285.731 li
233.759 285.252 233.735 284.707 234.052 284.219 cv
234.052 284.888 li
234.052 285.369 234.369 285.846 235.004 286.217 cv
235.641 286.582 236.474 286.765 237.307 286.765 cv
238.139 286.765 238.97 286.582 239.604 286.217 cv
239.729 286.144 239.842 286.066 239.942 285.986 cv
240.125 286.091 li
240.017 286.178 239.895 286.261 239.759 286.34 cv
239.082 286.734 238.195 286.931 237.306 286.931 cv
240.557 284.359 mo
240.557 284.223 li
240.579 284.256 240.599 284.29 240.617 284.324 cv
240.557 284.359 li
.67451 .67451 .67451 rgb
f
240.125 286.091 mo
239.942 285.986 li
240.351 285.657 240.557 285.274 240.557 284.888 cv
240.557 284.359 li
240.617 284.324 li
240.937 284.914 240.773 285.572 240.125 286.091 cv
.592157 .572549 .545098 rgb
f
234.052 284.888 mo
234.052 278.009 li
240.557 278.009 li
240.557 284.888 li
240.557 285.369 240.238 285.846 239.604 286.217 cv
238.336 286.948 236.278 286.948 235.004 286.217 cv
234.369 285.846 234.052 285.369 234.052 284.888 cv
.705882 .807843 .839216 rgb
f
235.004 279.334 mo
236.278 280.073 238.336 280.073 239.604 279.334 cv
240.872 278.602 240.872 277.416 239.604 276.681 cv
238.336 275.944 236.278 275.944 235.004 276.681 cv
233.734 277.416 233.734 278.602 235.004 279.334 cv
.909804 .952941 1 rgb
f
239.437 276.778 mo
238.261 276.094 236.351 276.094 235.172 276.778 cv
233.993 277.459 233.993 278.56 235.172 279.236 cv
236.351 279.923 238.261 279.923 239.437 279.236 cv
240.616 278.56 240.616 277.459 239.437 276.778 cv
.705882 .807843 .839216 rgb
f
237.306 285.8 mo
236.552 285.8 235.798 285.634 235.222 285.304 cv
234.648 284.973 234.362 284.54 234.362 284.104 cv
234.362 280.911 li
234.385 281.328 234.672 281.74 235.222 282.058 cv
235.798 282.391 236.552 282.558 237.306 282.558 cv
238.059 282.558 238.812 282.391 239.386 282.058 cv
239.962 281.725 240.249 281.29 240.249 280.855 cv
240.25 280.855 li
240.25 284.104 li
240.25 284.54 239.961 284.973 239.386 285.304 cv
238.812 285.634 238.059 285.8 237.306 285.8 cv
.458824 .635294 .701961 rgb
f
237.306 279.751 mo
236.722 279.751 236.138 279.653 235.633 279.456 cv
236.135 279.256 236.721 279.156 237.306 279.156 cv
237.891 279.156 238.476 279.256 238.977 279.457 cv
238.473 279.653 237.889 279.751 237.306 279.751 cv
.54902 .792157 .870588 rgb
f
237.306 282.558 mo
236.552 282.558 235.798 282.391 235.222 282.058 cv
234.672 281.74 234.385 281.328 234.362 280.911 cv
234.337 280.459 234.623 280.001 235.222 279.654 cv
235.29 279.615 235.361 279.578 235.433 279.543 cv
235.994 279.773 236.651 279.888 237.307 279.888 cv
237.962 279.888 238.618 279.773 239.176 279.544 cv
239.248 279.578 239.319 279.615 239.386 279.654 cv
239.961 279.987 240.248 280.421 240.249 280.855 cv
240.249 281.29 239.962 281.725 239.386 282.058 cv
238.812 282.391 238.059 282.558 237.306 282.558 cv
f
237.307 279.888 mo
236.651 279.888 235.994 279.773 235.433 279.543 cv
235.498 279.513 235.565 279.484 235.633 279.456 cv
236.138 279.653 236.722 279.751 237.306 279.751 cv
237.889 279.751 238.473 279.653 238.977 279.457 cv
239.045 279.484 239.111 279.513 239.176 279.544 cv
238.618 279.773 237.962 279.888 237.307 279.888 cv
.65098 .862745 .94902 rgb
f
326.575 270.483 mo
297.366 287.349 li
275.152 274.523 li
304.361 257.657 li
326.575 270.483 li
.968627 .968627 .968627 rgb
f
318.942 268.575 mo
307.43 275.22 li
300.8 271.393 li
312.31 264.747 li
318.942 268.575 li
cp
.847059 .819608 .780392 rgb
f
307.398 264.834 mo
305.736 265.792 303.036 265.792 301.371 264.834 cv
299.706 263.87 299.708 262.311 301.368 261.352 cv
303.034 260.392 305.735 260.392 307.4 261.352 cv
309.067 262.314 309.064 263.87 307.398 264.834 cv
cp
.729412 .952941 1 rgb
f
299.796 269.267 mo
298.134 270.224 295.433 270.224 293.768 269.267 cv
292.102 268.304 292.103 266.745 293.765 265.786 cv
295.431 264.824 298.132 264.824 299.797 265.786 cv
301.462 266.748 301.46 268.304 299.796 269.267 cv
.709804 .686275 .654902 rgb
f
308.101 277.668 mo
297.038 284.056 li
293.991 282.296 li
305.053 275.907 li
308.101 277.668 li
cp
.847059 .819608 .780392 rgb
f
290.74 270.983 mo
283.477 275.179 li
281.475 274.019 li
288.738 269.827 li
290.74 270.983 li
cp
f
292.683 280.908 mo
285.396 276.702 li
292.799 272.427 li
300.085 276.634 li
292.683 280.908 li
cp
f
281.475 270.064 mo
278.047 270.064 274.619 269.307 272 267.792 cv
266.773 264.782 266.773 259.881 272 256.862 cv
274.619 255.349 278.047 254.592 281.475 254.592 cv
284.902 254.592 288.328 255.349 290.942 256.862 cv
293.937 258.59 295.218 260.933 294.786 263.185 cv
282.955 270.017 li
282.463 270.048 281.969 270.064 281.475 270.064 cv
.239216 .2 .184314 rgb
f
282.955 270.017 mo
294.786 263.185 li
294.463 264.87 293.182 266.504 290.942 267.792 cv
288.705 269.088 285.874 269.83 282.955 270.017 cv
.67451 .67451 .67451 rgb
f
290.675 261.952 mo
290.675 256.764 li
272.48 256.764 li
272.48 261.953 li
272.48 263.297 273.372 264.64 275.153 265.66 cv
278.699 267.732 284.469 267.732 288.016 265.66 cv
289.789 264.64 290.675 263.297 290.675 261.952 cv
cp
.819608 .819608 .819608 rgb
f
288.016 253.049 mo
284.469 250.998 278.699 250.998 275.153 253.049 cv
271.589 255.098 271.589 258.433 275.153 260.467 cv
278.699 262.541 284.469 262.541 288.016 260.467 cv
291.559 258.433 291.559 255.098 288.016 253.049 cv
cp
.968627 .968627 .968627 rgb
f
286.062 255.662 mo
283.591 254.233 279.574 254.233 277.099 255.662 cv
276.299 256.138 275.737 256.695 275.464 257.289 cv
275.757 257.883 276.299 258.452 277.099 258.9 cv
279.574 260.339 283.591 260.339 286.062 258.9 cv
286.863 258.452 287.423 257.883 287.689 257.289 cv
287.423 256.695 286.875 256.138 286.062 255.662 cv
cp
.341176 .215686 .0666667 rgb
f
286.062 253.731 mo
283.591 252.295 279.574 252.295 277.099 253.731 cv
275.43 254.708 274.885 256.069 275.464 257.289 cv
275.737 256.695 276.299 256.138 277.099 255.662 cv
279.574 254.233 283.591 254.233 286.062 255.662 cv
286.875 256.138 287.423 256.695 287.689 257.289 cv
288.276 256.069 287.728 254.708 286.062 253.731 cv
cp
.819608 .819608 .819608 rgb
f
281.694 242.468 mo
280.805 242.468 280.076 243.186 280.076 244.083 cv
280.076 259.881 li
281.716 260.183 283.285 259.872 283.285 259.872 cv
283.285 244.083 li
283.285 243.186 282.576 242.468 281.694 242.468 cv
cp
.580392 .305882 .223529 rgb
f
290.591 247.471 mo
290.591 252.606 286.601 256.766 281.683 256.766 cv
276.759 256.766 272.768 252.606 272.768 247.471 cv
272.768 242.338 276.759 238.175 281.683 238.175 cv
286.601 238.175 290.591 242.338 290.591 247.471 cv
cp
.529412 .631373 .372549 rgb
f
290.316 247.511 mo
290.316 252.464 286.468 256.479 281.719 256.479 cv
280.022 256.479 278.438 255.964 277.107 255.077 cv
274.709 253.488 291.545 257.817 286.289 239.914 cv
288.707 241.499 290.316 244.311 290.316 247.511 cv
cp
.47451 .6 .352941 rgb
f
287.885 290.852 mo
286.996 290.852 286.107 290.655 285.426 290.261 cv
284.432 289.687 284.167 288.851 284.633 288.138 cv
284.633 288.81 li
284.633 289.292 284.948 289.767 285.582 290.138 cv
286.219 290.503 287.052 290.686 287.885 290.686 cv
288.717 290.686 289.548 290.503 290.181 290.138 cv
290.817 289.767 291.136 289.292 291.136 288.81 cv
291.136 288.143 li
291.597 288.855 291.331 289.688 290.338 290.261 cv
289.661 290.655 288.774 290.852 287.885 290.852 cv
.239216 .2 .184314 rgb
f
284.633 288.81 mo
284.633 281.93 li
291.136 281.93 li
291.136 288.81 li
291.136 289.292 290.817 289.767 290.181 290.138 cv
288.916 290.869 286.856 290.869 285.582 290.138 cv
284.948 289.767 284.633 289.292 284.633 288.81 cv
.705882 .807843 .839216 rgb
f
285.582 283.255 mo
286.856 283.995 288.916 283.995 290.181 283.255 cv
291.453 282.523 291.453 281.338 290.181 280.604 cv
288.916 279.865 286.856 279.865 285.582 280.604 cv
284.314 281.338 284.314 282.523 285.582 283.255 cv
.909804 .952941 1 rgb
f
290.016 280.699 mo
288.839 280.016 286.929 280.016 285.75 280.699 cv
284.572 281.38 284.572 282.482 285.75 283.157 cv
286.929 283.844 288.839 283.844 290.016 283.157 cv
291.194 282.482 291.194 281.38 290.016 280.699 cv
.705882 .807843 .839216 rgb
f
287.885 289.722 mo
287.132 289.722 286.378 289.557 285.802 289.226 cv
285.226 288.894 284.941 288.461 284.941 288.025 cv
284.941 284.836 li
284.965 285.251 285.252 285.662 285.802 285.979 cv
286.378 286.313 287.132 286.479 287.885 286.479 cv
288.639 286.479 289.392 286.313 289.965 285.979 cv
290.54 285.648 290.828 285.213 290.827 284.778 cv
290.829 284.778 li
290.829 288.025 li
290.829 288.461 290.54 288.894 289.965 289.226 cv
289.392 289.557 288.639 289.722 287.885 289.722 cv
.458824 .635294 .701961 rgb
f
287.884 283.672 mo
287.3 283.672 286.717 283.574 286.212 283.378 cv
286.714 283.177 287.3 283.077 287.885 283.077 cv
288.47 283.077 289.055 283.177 289.556 283.378 cv
289.051 283.574 288.468 283.672 287.884 283.672 cv
.54902 .792157 .870588 rgb
f
287.885 286.479 mo
287.132 286.479 286.378 286.313 285.802 285.979 cv
285.252 285.662 284.965 285.251 284.941 284.836 cv
284.915 284.382 285.202 283.923 285.802 283.575 cv
285.87 283.536 285.94 283.5 286.012 283.465 cv
286.573 283.695 287.229 283.81 287.885 283.81 cv
288.541 283.81 289.197 283.695 289.755 283.465 cv
289.827 283.499 289.898 283.536 289.965 283.575 cv
290.539 283.909 290.826 284.344 290.827 284.778 cv
290.828 285.213 290.54 285.648 289.965 285.979 cv
289.392 286.313 288.639 286.479 287.885 286.479 cv
f
287.885 283.81 mo
287.229 283.81 286.573 283.695 286.012 283.465 cv
286.077 283.434 286.144 283.405 286.212 283.378 cv
286.717 283.574 287.3 283.672 287.884 283.672 cv
288.468 283.672 289.051 283.574 289.556 283.378 cv
289.624 283.405 289.69 283.434 289.755 283.465 cv
289.197 283.695 288.541 283.81 287.885 283.81 cv
.65098 .862745 .94902 rgb
f
339.022 259.723 mo
338.134 259.723 337.245 259.526 336.564 259.133 cv
335.568 258.558 335.303 257.721 335.77 257.008 cv
335.77 257.683 li
335.77 258.164 336.085 258.639 336.72 259.009 cv
337.357 259.374 338.19 259.557 339.022 259.557 cv
339.854 259.557 340.686 259.374 341.319 259.009 cv
341.953 258.639 342.274 258.164 342.274 257.683 cv
342.274 257.015 li
342.735 257.727 342.468 258.56 341.474 259.133 cv
340.798 259.526 339.91 259.723 339.022 259.723 cv
.239216 .2 .184314 rgb
f
335.77 257.683 mo
335.77 250.801 li
342.274 250.801 li
342.274 257.683 li
342.274 258.164 341.953 258.639 341.319 259.009 cv
340.052 259.739 337.994 259.739 336.72 259.009 cv
336.085 258.639 335.77 258.164 335.77 257.683 cv
.705882 .807843 .839216 rgb
f
336.72 252.126 mo
337.994 252.867 340.052 252.867 341.319 252.126 cv
342.59 251.394 342.59 250.209 341.319 249.475 cv
340.052 248.736 337.994 248.736 336.72 249.475 cv
335.45 250.209 335.45 251.394 336.72 252.126 cv
.909804 .952941 1 rgb
f
341.154 249.57 mo
339.976 248.887 338.067 248.887 336.887 249.57 cv
335.71 250.251 335.71 251.353 336.887 252.029 cv
338.067 252.715 339.976 252.715 341.154 252.029 cv
342.331 251.353 342.331 250.251 341.154 249.57 cv
.705882 .807843 .839216 rgb
f
339.022 258.594 mo
338.269 258.594 337.515 258.428 336.938 258.097 cv
336.363 257.765 336.079 257.333 336.079 256.896 cv
336.079 253.723 li
336.109 254.133 336.396 254.537 336.938 254.85 cv
337.515 255.183 338.269 255.35 339.022 255.35 cv
339.776 255.35 340.529 255.183 341.103 254.85 cv
341.678 254.519 341.965 254.084 341.965 253.649 cv
341.967 253.649 li
341.967 256.896 li
341.967 257.333 341.677 257.765 341.103 258.097 cv
340.529 258.428 339.776 258.594 339.022 258.594 cv
.458824 .635294 .701961 rgb
f
339.021 252.543 mo
338.438 252.543 337.854 252.445 337.349 252.25 cv
337.851 252.049 338.437 251.948 339.022 251.948 cv
339.607 251.948 340.192 252.049 340.693 252.249 cv
340.189 252.445 339.605 252.543 339.021 252.543 cv
.54902 .792157 .870588 rgb
f
339.022 255.35 mo
338.269 255.35 337.515 255.183 336.938 254.85 cv
336.396 254.537 336.109 254.133 336.079 253.723 cv
336.045 253.265 336.331 252.799 336.938 252.447 cv
337.006 252.408 337.077 252.371 337.15 252.337 cv
337.71 252.567 338.366 252.682 339.022 252.682 cv
339.678 252.682 340.333 252.567 340.892 252.336 cv
340.965 252.371 341.035 252.408 341.103 252.447 cv
341.677 252.78 341.964 253.215 341.965 253.649 cv
341.965 254.084 341.678 254.519 341.103 254.85 cv
340.529 255.183 339.776 255.35 339.022 255.35 cv
f
339.022 252.682 mo
338.366 252.682 337.71 252.567 337.15 252.337 cv
337.214 252.306 337.281 252.277 337.349 252.25 cv
337.854 252.445 338.438 252.543 339.021 252.543 cv
339.605 252.543 340.189 252.445 340.693 252.249 cv
340.761 252.277 340.827 252.305 340.892 252.336 cv
340.333 252.567 339.678 252.682 339.022 252.682 cv
.65098 .862745 .94902 rgb
f
313.632 238.669 mo
312.744 238.669 311.854 238.472 311.173 238.079 cv
310.179 237.504 309.914 236.668 310.38 235.955 cv
310.38 236.629 li
310.38 237.11 310.696 237.585 311.33 237.955 cv
311.967 238.32 312.8 238.503 313.633 238.503 cv
314.465 238.503 315.296 238.32 315.93 237.955 cv
316.564 237.585 316.883 237.11 316.883 236.629 cv
316.883 235.96 li
317.344 236.672 317.078 237.505 316.085 238.079 cv
315.408 238.472 314.521 238.669 313.632 238.669 cv
.239216 .2 .184314 rgb
f
310.38 236.629 mo
310.38 229.747 li
316.883 229.747 li
316.883 236.629 li
316.883 237.11 316.564 237.585 315.93 237.955 cv
314.663 238.685 312.604 238.685 311.33 237.955 cv
310.696 237.585 310.38 237.11 310.38 236.629 cv
.705882 .807843 .839216 rgb
f
311.33 231.072 mo
312.604 231.813 314.663 231.813 315.93 231.072 cv
317.2 230.34 317.2 229.155 315.93 228.42 cv
314.663 227.682 312.604 227.682 311.33 228.42 cv
310.061 229.155 310.061 230.34 311.33 231.072 cv
.909804 .952941 1 rgb
f
315.765 228.515 mo
314.587 227.833 312.677 227.833 311.498 228.515 cv
310.321 229.196 310.321 230.298 311.498 230.974 cv
312.677 231.661 314.587 231.661 315.765 230.974 cv
316.942 230.298 316.942 229.196 315.765 228.515 cv
.705882 .807843 .839216 rgb
f
313.632 237.54 mo
312.879 237.54 312.126 237.374 311.549 237.043 cv
310.974 236.711 310.688 236.279 310.688 235.842 cv
310.688 232.653 li
310.712 233.068 310.999 233.479 311.549 233.796 cv
312.126 234.129 312.879 234.296 313.632 234.296 cv
314.385 234.296 315.138 234.129 315.712 233.796 cv
316.288 233.464 316.576 233.03 316.575 232.595 cv
316.576 232.595 li
316.576 235.842 li
316.576 236.279 316.288 236.711 315.712 237.043 cv
315.138 237.374 314.385 237.54 313.632 237.54 cv
.458824 .635294 .701961 rgb
f
313.632 231.489 mo
313.049 231.489 312.466 231.391 311.962 231.195 cv
312.464 230.995 313.048 230.894 313.632 230.894 cv
314.217 230.894 314.8 230.995 315.301 231.196 cv
314.797 231.391 314.215 231.489 313.632 231.489 cv
.54902 .792157 .870588 rgb
f
313.632 234.296 mo
312.879 234.296 312.126 234.129 311.549 233.796 cv
310.999 233.479 310.712 233.068 310.688 232.653 cv
310.662 232.2 310.949 231.742 311.549 231.395 cv
311.618 231.355 311.689 231.318 311.762 231.283 cv
312.322 231.513 312.977 231.628 313.633 231.628 cv
314.288 231.628 314.942 231.513 315.5 231.283 cv
315.573 231.318 315.644 231.355 315.712 231.395 cv
316.287 231.727 316.574 232.161 316.575 232.595 cv
316.576 233.03 316.288 233.464 315.712 233.796 cv
315.138 234.129 314.385 234.296 313.632 234.296 cv
f
313.633 231.628 mo
312.977 231.628 312.322 231.513 311.762 231.283 cv
311.827 231.252 311.894 231.223 311.962 231.195 cv
312.466 231.391 313.049 231.489 313.632 231.489 cv
314.215 231.489 314.797 231.391 315.301 231.196 cv
315.369 231.223 315.436 231.252 315.5 231.283 cv
314.942 231.513 314.288 231.628 313.633 231.628 cv
.65098 .862745 .94902 rgb
f
190.533 383.784 mo
135.252 351.867 li
182.48 324.602 li
237.759 356.516 li
190.533 383.784 li
.698039 .698039 .698039 rgb
f
148.177 350.124 mo
148.177 343.864 li
142.258 343.864 li
142.258 350.124 li
142.258 350.561 142.546 350.997 143.122 351.334 cv
144.281 352 146.154 352 147.31 351.334 cv
147.888 350.997 148.177 350.561 148.177 350.124 cv
cp
.329412 .270588 .25098 rgb
f
147.31 345.073 mo
146.154 345.74 144.281 345.74 143.122 345.073 cv
141.968 344.406 141.968 343.324 143.122 342.654 cv
144.281 341.987 146.154 341.987 147.31 342.654 cv
148.47 343.324 148.47 344.406 147.31 345.073 cv
cp
.513726 .431373 .411765 rgb
f
181.894 330.659 mo
181.894 324.399 li
175.974 324.399 li
175.974 330.659 li
175.974 331.095 176.265 331.532 176.84 331.869 cv
177.998 332.537 179.874 332.537 181.029 331.869 cv
181.608 331.532 181.894 331.095 181.894 330.659 cv
cp
.329412 .270588 .25098 rgb
f
181.029 325.608 mo
179.874 326.274 177.998 326.274 176.84 325.608 cv
175.688 324.941 175.688 323.857 176.84 323.188 cv
177.998 322.522 179.874 322.522 181.029 323.188 cv
182.185 323.857 182.185 324.941 181.029 325.608 cv
cp
.513726 .431373 .411765 rgb
f
141.82 302.961 mo
135.252 299.165 li
182.48 271.899 li
189.048 275.692 li
183.887 281.469 li
141.82 302.961 li
cp
.968627 .968627 .968627 rgb
f
141.82 349.62 mo
135.252 345.828 li
135.252 299.165 li
141.82 302.961 li
150.675 309.075 li
141.82 349.62 li
cp
.956863 .937255 .913725 rgb
f
189.048 322.351 mo
141.82 349.62 li
141.82 302.961 li
189.048 275.692 li
189.048 322.351 li
cp
.819608 .819608 .819608 rgb
f
183.963 371.874 mo
141.82 347.543 li
141.82 331.355 li
168.69 344.114 li
183.963 355.686 li
183.963 371.874 li
cp
.956863 .937255 .913725 rgb
f
230.152 345.209 mo
183.963 371.874 li
183.963 355.686 li
196.855 343.101 li
230.152 329.023 li
230.152 345.209 li
cp
.819608 .819608 .819608 rgb
f
183.963 355.686 mo
141.82 331.355 li
188.011 304.689 li
230.152 329.023 li
183.963 355.686 li
cp
.968627 .968627 .968627 rgb
f
183.962 355.686 mo
160.947 347.852 li
141.82 331.355 li
141.82 322.885 li
168.689 335.639 li
183.962 347.211 li
183.962 355.686 li
cp
.956863 .937255 .913725 rgb
f
233.447 327.115 mo
183.962 355.686 li
183.962 347.211 li
196.853 334.629 li
233.447 318.644 li
233.447 327.115 li
cp
.819608 .819608 .819608 rgb
f
183.962 347.211 mo
141.82 322.885 li
191.307 294.312 li
233.447 318.644 li
183.962 347.211 li
cp
.968627 .968627 .968627 rgb
f
216.075 321.723 mo
219.664 321.891 li
219.664 321.891 220.008 325.541 219.785 326.079 cv
217.716 327.509 216.98 327.637 215.44 328.814 cv
213.899 329.987 212.679 331.49 211.395 331.796 cv
210.113 332.102 208.762 331.902 208.508 331.157 cv
208.138 330.079 209.187 327.299 209.187 327.299 cv
216.075 321.723 li
cp
.721569 .560784 .352941 rgb
f
234.366 328.986 mo
236.128 331.499 233.974 332.816 233.974 332.816 cv
233.974 332.816 226.564 336.357 223.068 337.606 cv
220.666 338.461 218.027 337.075 218.071 336.304 cv
218.112 335.533 218.071 335.81 218.071 335.81 cv
218.071 335.81 234.013 328.478 234.366 328.986 cv
cp
f
216.075 321.229 mo
219.664 321.397 li
219.664 321.397 220.008 325.047 219.785 325.585 cv
217.716 327.018 216.98 327.145 215.44 328.318 cv
213.899 329.495 212.679 330.996 211.395 331.304 cv
210.113 331.605 208.762 331.411 208.508 330.661 cv
208.138 329.587 208.565 326.348 208.565 326.348 cv
216.075 321.229 li
cp
.419608 .266667 .0784314 rgb
f
215.488 312.126 mo
215.488 312.126 215.86 318.19 216.589 321.726 cv
217.541 326.336 208.604 328.599 208.508 326.059 cv
208.409 323.518 207.283 313.817 207.283 313.817 cv
215.488 312.126 li
cp
.211765 .172549 .160784 rgb
f
227.139 327.307 mo
227.139 327.307 230.678 327.392 232.071 327.307 cv
233.463 327.223 234.013 327.985 234.366 328.488 cv
236.128 331.005 233.974 332.323 233.974 332.323 cv
233.974 332.323 226.564 335.865 223.068 337.108 cv
220.666 337.968 218.027 336.583 218.071 335.81 cv
218.112 335.039 218.382 330.88 218.382 330.88 cv
227.139 327.307 li
cp
.419608 .266667 .0784314 rgb
f
229.64 306.392 mo
228.652 318.177 227.681 318.499 227.458 327.637 cv
227.44 328.437 227.458 331.103 223.72 331.639 cv
219.423 332.257 218.063 331.15 218.071 330.028 cv
218.079 328.906 218.071 323.73 218.672 311.897 cv
218.72 310.979 221.571 307.074 221.571 307.074 cv
226.173 306.069 li
226.173 306.069 229.112 305.419 229.64 306.392 cv
cp
.25098 .207843 .192157 rgb
f
201.62 293.373 mo
201.62 293.373 207.085 292.622 209.857 292.176 cv
215.186 291.317 215.918 295.065 216.013 296.869 cv
216.106 298.671 215.692 301.245 215.692 301.245 cv
203.313 303.904 li
201.62 293.373 li
cp
.211765 .172549 .160784 rgb
f
203.5 301.453 mo
203.5 301.453 212.561 299.743 224.012 298.809 cv
227.377 298.53 228.934 300.667 229.447 301.943 cv
229.959 303.219 229.64 306.392 229.64 306.392 cv
229.64 306.392 226.368 311.43 220.146 310.962 cv
219.557 311.579 202.206 321.296 196.845 322.441 cv
191.48 323.585 184.253 319.334 184.253 319.334 cv
184.253 319.334 177.801 315.205 178.051 313.817 cv
178.156 313.231 203.5 301.453 203.5 301.453 cv
cp
.25098 .207843 .192157 rgb
f
175.463 288.354 mo
171.887 290.096 li
170.026 285.974 li
175.081 284.507 li
175.463 288.354 li
cp
.231373 .231373 .231373 rgb
f
179.922 268.477 mo
179.922 268.477 174.579 265.662 171.751 268.477 cv
168.232 271.977 167.573 279.169 165.333 286.445 cv
164.805 288.176 165.469 289.599 167.084 290.453 cv
169.6 291.782 171.887 290.096 171.887 290.096 cv
171.887 290.096 174.437 285.334 175.81 282.087 cv
176.404 280.688 179.922 268.477 179.922 268.477 cv
cp
.329412 .270588 .25098 rgb
f
194.268 260.868 mo
194.093 262.294 193.544 263.396 193.037 263.337 cv
192.526 263.274 192.254 262.07 192.426 260.645 cv
192.598 259.22 193.149 258.11 193.661 258.175 cv
194.17 258.234 194.44 259.44 194.268 260.868 cv
cp
.941176 .776471 .705882 rgb
f
180.909 260.444 mo
181.132 261.862 180.906 263.077 180.401 263.16 cv
179.896 263.241 179.305 262.157 179.079 260.738 cv
178.855 259.314 179.08 258.101 179.584 258.018 cv
180.09 257.937 180.682 259.021 180.909 260.444 cv
cp
f
181.805 265.616 mo
181.43 269.898 li
188.573 273.126 li
191.577 271.838 li
191.577 265.907 li
181.805 265.616 li
cp
f
186.777 248.178 mo
180.404 248.178 179.664 253.215 179.635 254.293 cv
179.416 262.462 181.282 265.03 181.282 265.03 cv
181.282 265.03 182.429 267.081 186.777 267.081 cv
190.846 267.081 191.973 265.541 191.973 265.541 cv
191.973 265.541 193.78 261.952 193.773 254.659 cv
193.773 253.938 193.152 248.178 186.777 248.178 cv
cp
.639216 .611765 .584314 rgb
f
193.503 274.144 mo
199.107 279.276 li
199.381 292.682 li
201.27 303.62 li
201.27 303.62 205.485 305.473 205.573 310.306 cv
205.658 315.141 200.163 319.608 197.709 320.744 cv
189.759 322.855 185.737 319.282 183.165 317.707 cv
179.428 315.415 176.498 313.528 175.864 308.709 cv
175.645 307.052 175.769 301.153 175.81 295.982 cv
175.851 290.812 172.53 283.98 171.97 279.817 cv
171.303 274.88 172.197 271.866 174.169 270.37 cv
176.84 268.34 179.922 268.477 179.922 268.477 cv
183.859 270.973 li
193.503 274.144 li
cp
.407843 .341176 .313726 rgb
f
193.165 270.658 mo
193.165 270.658 187.008 270.584 183.689 268.821 cv
182.027 267.942 181.645 266.596 181.645 266.596 cv
179.922 268.477 li
179.922 268.477 180.416 270.446 183.066 271.922 cv
187.762 274.536 193.696 274.119 193.696 274.119 cv
193.165 270.658 li
cp
.968627 .968627 .968627 rgb
f
191.299 310.837 mo
196.454 340.006 li
183.963 347.211 li
181.577 317.566 li
183.962 315.075 li
191.299 310.837 li
cp
.819608 .819608 .819608 rgb
f
149.16 286.506 mo
191.299 310.837 li
183.962 315.075 li
166.617 310.2 li
141.82 290.742 li
149.16 286.506 li
cp
.968627 .968627 .968627 rgb
f
183.962 315.075 mo
183.963 347.211 li
160.721 337.165 li
141.82 322.885 li
141.82 290.742 li
183.962 315.075 li
cp
.956863 .937255 .913725 rgb
f
196.89 378.248 mo
196.89 371.989 li
190.97 371.989 li
190.97 378.248 li
190.97 378.684 191.258 379.122 191.835 379.454 cv
192.991 380.127 194.866 380.127 196.022 379.454 cv
196.6 379.122 196.89 378.684 196.89 378.248 cv
cp
.329412 .270588 .25098 rgb
f
196.022 373.196 mo
194.866 373.863 192.991 373.863 191.835 373.196 cv
190.68 372.53 190.68 371.446 191.835 370.777 cv
192.991 370.11 194.866 370.11 196.022 370.777 cv
197.176 371.446 197.176 372.53 196.022 373.196 cv
cp
.513726 .431373 .411765 rgb
f
230.607 358.783 mo
230.607 352.52 li
224.684 352.52 li
224.684 358.783 li
224.684 359.219 224.973 359.655 225.552 359.989 cv
226.71 360.656 228.581 360.656 229.738 359.989 cv
230.314 359.655 230.607 359.219 230.607 358.783 cv
cp
.329412 .270588 .25098 rgb
f
229.738 353.731 mo
228.581 354.399 226.71 354.399 225.552 353.731 cv
224.394 353.061 224.394 351.981 225.552 351.311 cv
226.71 350.645 228.581 350.645 229.738 351.311 cv
230.896 351.981 230.896 353.061 229.738 353.731 cv
cp
.513726 .431373 .411765 rgb
f
190.533 331.081 mo
183.963 327.288 li
231.192 300.022 li
237.759 303.816 li
232.598 309.589 li
190.533 331.081 li
cp
.968627 .968627 .968627 rgb
f
190.533 377.74 mo
183.963 373.947 li
183.963 327.288 li
190.533 331.081 li
199.385 343.061 li
190.533 377.74 li
cp
.956863 .937255 .913725 rgb
f
237.759 350.474 mo
190.533 377.74 li
190.533 331.081 li
237.759 303.816 li
237.759 350.474 li
cp
.819608 .819608 .819608 rgb
f
218.473 300.794 mo
218.473 300.794 221.899 298.697 223.178 298.21 cv
224.452 297.713 226.042 298.583 226.463 298.953 cv
227.104 299.521 227.354 300.332 227.393 300.695 cv
227.669 303.16 227.055 305.922 226.173 306.069 cv
225.284 306.218 225.074 305.62 225.074 305.62 cv
225.074 305.62 222.529 306.349 221.469 306.389 cv
220.407 306.43 219.694 306.081 219.694 306.081 cv
217.932 303.852 li
218.473 300.794 li
cp
.941176 .776471 .705882 rgb
f
216.112 301.361 mo
216.112 301.361 216.706 301.109 218.014 300.757 cv
219.63 300.323 220.902 305.971 219.265 306.385 cv
217.225 306.897 216.805 307.074 216.805 307.074 cv
216.112 301.361 li
cp
.968627 .968627 .968627 rgb
f
205.233 301.648 mo
205.233 301.648 214.177 301.006 216.434 300.772 cv
218.69 300.542 220.019 306.952 216.555 307.838 cv
213.09 308.723 207.063 310.441 202.618 310.99 cv
201.27 304.592 li
205.233 301.648 li
cp
.329412 .270588 .25098 rgb
f
202.618 310.99 mo
198.943 311.444 197.705 307.641 197.705 307.641 cv
191.128 287.067 li
191.128 287.067 189.189 280.366 193.647 278.717 cv
201.219 275.919 202.375 286.192 202.375 286.192 cv
205.233 301.648 li
202.618 310.99 li
cp
f
440.093 296.293 mo
438.525 296.293 436.958 296.185 435.426 295.969 cv
420.987 287.632 li
419.419 283.912 421.151 279.817 426.185 276.911 cv
430.028 274.688 435.061 273.577 440.093 273.577 cv
445.125 273.577 450.156 274.688 453.997 276.911 cv
461.678 281.342 461.678 288.538 453.997 292.956 cv
450.156 295.18 445.125 296.293 440.093 296.293 cv
.698039 .698039 .698039 rgb
f
427.686 246.244 mo
424.451 250.775 421.281 261.6 421.281 267.846 cv
421.281 280.734 429.759 291.222 440.266 291.222 cv
450.743 291.222 459.233 280.734 459.233 267.846 cv
459.233 260.039 457.639 252.047 452.41 245.747 cv
449.293 242.422 431.077 243.084 427.686 246.244 cv
cp
.819608 .819608 .819608 rgb
f
449.692 243.383 mo
444.486 240.369 436.02 240.369 430.813 243.383 cv
425.577 246.39 425.577 251.285 430.813 254.278 cv
436.02 257.318 444.486 257.318 449.692 254.278 cv
454.899 251.285 454.899 246.39 449.692 243.383 cv
cp
.968627 .968627 .968627 rgb
f
446.833 247.218 mo
443.195 245.127 437.303 245.127 433.664 247.218 cv
432.495 247.918 431.673 248.736 431.264 249.612 cv
431.695 250.482 432.495 251.315 433.664 251.974 cv
437.303 254.089 443.195 254.089 446.833 251.974 cv
448.005 251.315 448.825 250.482 449.217 249.612 cv
448.825 248.736 448.019 247.918 446.833 247.218 cv
cp
.341176 .215686 .0666667 rgb
f
446.833 244.385 mo
443.195 242.273 437.303 242.273 433.664 244.385 cv
431.213 245.815 430.422 247.817 431.264 249.612 cv
431.673 248.736 432.495 247.918 433.664 247.218 cv
437.303 245.127 443.195 245.127 446.833 247.218 cv
448.019 247.918 448.825 248.736 449.217 249.612 cv
450.079 247.817 449.276 245.815 446.833 244.385 cv
cp
.819608 .819608 .819608 rgb
f
440.411 227.845 mo
439.111 227.845 438.042 228.905 438.042 230.22 cv
438.042 253.415 li
440.444 253.855 442.744 253.398 442.744 253.398 cv
442.744 230.22 li
442.744 228.905 441.708 227.845 440.411 227.845 cv
cp
.580392 .305882 .223529 rgb
f
467.806 223.704 mo
467.806 237.586 455.531 248.84 440.39 248.84 cv
425.257 248.84 412.983 237.586 412.983 223.704 cv
412.983 209.825 425.257 198.575 440.39 198.575 cv
455.531 198.575 467.806 209.825 467.806 223.704 cv
cp
.529412 .631373 .372549 rgb
f
466.958 223.816 mo
466.958 237.208 455.113 248.066 440.517 248.066 cv
435.295 248.066 430.422 246.678 426.324 244.284 cv
418.955 239.973 470.736 251.681 454.565 203.272 cv
462.011 207.566 466.958 215.162 466.958 223.816 cv
cp
.47451 .6 .352941 rgb
f
333.192 390.793 mo
285.965 363.523 li
299.559 355.675 li
339.759 378.882 li
339.759 362.693 li
339.759 362.69 li
381.9 338.361 li
374.564 334.125 li
416.222 310.074 li
444.61 326.462 li
333.192 390.793 li
.698039 .698039 .698039 rgb
f
356.431 299.868 mo
356.431 299.868 352.548 299.69 352.291 301.227 cv
352.035 302.768 355.032 303.697 355.032 303.697 cv
355.032 303.697 358.214 304.356 360.146 305.282 cv
362.073 306.212 362.646 306.874 364.114 307.567 cv
365.582 308.26 366.851 308.456 367.347 307.45 cv
367.641 306.853 367.44 305.623 367.44 305.623 cv
361.934 301.853 li
356.431 299.868 li
cp
.0392157 .0313726 .0313726 rgb
f
356.431 301.374 mo
356.431 301.374 359.763 302.641 361.491 303.534 cv
363.367 304.502 363.515 305.334 365.125 306.06 cv
366.264 306.57 367.344 306.223 367.422 305.883 cv
367.568 305.211 366.86 302.742 366.86 302.742 cv
366.25 302.364 li
357.786 299.868 li
356.431 301.374 li
cp
.941176 .776471 .705882 rgb
f
360.852 301.959 mo
365.214 304.964 367.677 302.742 367.677 302.742 cv
367.677 302.742 368.227 297.054 369.643 290.512 cv
369.877 290.166 361.05 287.486 361.05 287.486 cv
361.05 287.486 360.619 301.632 360.852 301.959 cv
cp
.0392157 .0313726 .0313726 rgb
f
353.429 303.182 mo
353.429 303.182 348.482 301.815 347.373 303.889 cv
346.349 305.802 349.107 307.497 350.311 308.073 cv
351.512 308.648 356.084 310.89 357.639 311.588 cv
359.191 312.294 360.364 312.331 361.096 311.756 cv
361.695 311.286 361.433 308.948 361.433 308.948 cv
353.429 303.182 li
cp
f
353.429 303.182 mo
353.429 303.182 351.25 303.031 350.445 303.635 cv
349.641 304.235 352.586 306.761 355.112 308.043 cv
357.64 309.327 360.13 309.984 361.303 309.289 cv
361.743 309.025 360.955 306.458 360.955 306.458 cv
359.802 304.856 li
353.429 303.182 li
cp
.941176 .776471 .705882 rgb
f
351.64 281.513 mo
351.462 287.23 354.38 296.431 354.417 298.737 cv
354.454 301.047 353.429 303.182 353.429 303.182 cv
353.429 303.182 352.885 304.672 356.407 306.071 cv
360.389 307.654 361.439 306.071 361.439 306.071 cv
361.439 306.071 361.981 297.257 361.798 288.984 cv
361.777 287.957 359.974 283.695 359.974 283.695 cv
355.085 280.938 li
355.085 280.938 352.115 281.219 351.64 281.513 cv
cp
.211765 .172549 .160784 rgb
f
431.684 324.722 mo
431.684 318.459 li
437.604 318.459 li
437.604 324.722 li
437.604 325.159 437.315 325.594 436.737 325.931 cv
435.582 326.597 433.708 326.597 432.549 325.931 cv
431.971 325.594 431.684 325.159 431.684 324.722 cv
cp
.329412 .270588 .25098 rgb
f
432.549 319.67 mo
433.708 320.337 435.582 320.337 436.737 319.67 cv
437.894 318.999 437.894 317.919 436.737 317.251 cv
435.582 316.585 433.708 316.585 432.549 317.251 cv
431.395 317.919 431.395 318.999 432.549 319.67 cv
cp
.513726 .431373 .411765 rgb
f
397.967 305.255 mo
397.967 298.994 li
403.887 298.994 li
403.887 305.255 li
403.887 305.694 403.599 306.131 403.022 306.464 cv
401.863 307.132 399.989 307.132 398.834 306.464 cv
398.257 306.131 397.967 305.694 397.967 305.255 cv
cp
.329412 .270588 .25098 rgb
f
398.834 300.199 mo
399.989 300.872 401.863 300.872 403.022 300.199 cv
404.177 299.534 404.177 298.454 403.022 297.788 cv
401.863 297.115 399.989 297.115 398.834 297.788 cv
397.678 298.454 397.678 299.534 398.834 300.199 cv
cp
.513726 .431373 .411765 rgb
f
438.04 277.555 mo
444.61 273.762 li
397.383 246.499 li
390.813 250.289 li
395.976 256.063 li
438.04 277.555 li
cp
.968627 .968627 .968627 rgb
f
438.04 324.214 mo
444.61 320.421 li
444.61 273.762 li
438.04 277.555 li
429.187 283.672 li
438.04 324.214 li
cp
.819608 .819608 .819608 rgb
f
390.813 296.95 mo
438.04 324.214 li
438.04 277.555 li
390.813 250.289 li
390.813 296.95 li
cp
.956863 .937255 .913725 rgb
f
339.759 378.882 mo
438.04 322.139 li
438.04 305.953 li
411.175 318.708 li
339.759 362.69 li
339.759 378.882 li
cp
.819608 .819608 .819608 rgb
f
293.57 352.217 mo
339.759 378.882 li
339.759 362.69 li
326.868 350.108 li
293.57 336.024 li
293.57 352.217 li
.956863 .937255 .913725 rgb
f
339.759 362.69 mo
381.9 338.361 li
335.711 311.696 li
293.57 336.024 li
339.759 362.69 li
f
339.759 362.693 mo
418.916 322.443 li
438.04 305.953 li
438.04 297.478 li
411.176 310.237 li
339.759 354.219 li
339.759 362.693 li
cp
.819608 .819608 .819608 rgb
f
290.272 334.123 mo
339.759 362.693 li
339.759 354.219 li
326.869 341.636 li
290.272 325.648 li
290.272 334.123 li
.956863 .937255 .913725 rgb
f
339.759 354.219 mo
438.04 297.478 li
388.555 268.908 li
290.272 325.648 li
339.759 354.219 li
.968627 .968627 .968627 rgb
f
362.491 278.654 mo
362.491 278.654 362.474 275.907 362.842 274.609 cv
363.208 273.313 365.251 271.261 368.666 271.958 cv
372.074 272.656 381.928 276.535 381.928 276.535 cv
382.366 283.207 li
377.312 285.109 li
362.491 278.654 li
cp
.0392157 .0313726 .0313726 rgb
f
378.8 281.889 mo
378.8 281.889 362.958 278.319 358.137 277.536 cv
353.316 276.758 351.64 281.513 351.64 281.513 cv
356.504 285.77 li
356.504 285.77 372.33 295.597 379.803 298.786 cv
383.442 300.343 385.626 299.985 388.083 299.179 cv
391.416 298.079 394.091 296.013 394.091 296.013 cv
394.091 296.013 399.588 292.364 399.823 290.859 cv
399.904 290.353 378.8 281.889 378.8 281.889 cv
cp
.211765 .172549 .160784 rgb
f
350.944 275.974 mo
350.944 263.48 li
368.652 253.273 li
368.673 266.093 li
350.944 275.974 li
cp
.215686 .462745 .568627 rgb
f
381.112 274.929 mo
362.89 285.451 li
362.89 284.402 li
376.57 275.143 li
381.112 273.888 li
381.112 274.929 li
cp
.639216 .611765 .584314 rgb
f
350.745 278.433 mo
362.89 285.451 li
362.89 284.402 li
360.582 281.835 li
350.745 277.387 li
350.745 278.433 li
cp
.847059 .819608 .780392 rgb
f
350.745 277.387 mo
368.962 266.875 li
376.661 271.318 li
358.442 281.835 li
350.745 277.387 li
cp
.709804 .686275 .654902 rgb
f
362.89 284.402 mo
381.112 273.888 li
376.661 271.318 li
358.442 281.835 li
362.89 284.402 li
cp
.901961 .882353 .866667 rgb
f
368.184 280.443 mo
374.253 276.938 li
371.034 275.08 li
364.966 278.588 li
368.184 280.443 li
cp
.709804 .686275 .654902 rgb
f
363.942 277.713 mo
364.865 277.182 li
363.942 276.651 li
363.021 277.182 li
363.942 277.713 li
cp
.819608 .819608 .819608 rgb
f
362.918 278.306 mo
363.839 277.774 li
362.918 277.244 li
361.993 277.774 li
362.918 278.306 li
cp
f
364.966 277.128 mo
370.048 274.192 li
369.124 273.661 li
364.045 276.592 li
364.966 277.128 li
cp
f
361.894 278.899 mo
362.817 278.369 li
361.894 277.836 li
360.971 278.369 li
361.894 278.899 li
cp
f
359.053 280.541 mo
361.808 278.951 li
360.886 278.416 li
358.132 280.007 li
359.053 280.541 li
cp
f
372.184 272.958 mo
373.109 272.43 li
372.184 271.893 li
371.261 272.43 li
372.184 272.958 li
cp
f
371.162 273.548 mo
372.086 273.013 li
371.162 272.481 li
370.239 273.013 li
371.162 273.548 li
cp
f
373.21 272.367 mo
374.399 271.681 li
373.481 271.149 li
372.286 271.833 li
373.21 272.367 li
cp
f
370.135 274.14 mo
371.06 273.608 li
370.135 273.073 li
369.216 273.608 li
370.135 274.14 li
cp
f
362.871 277.102 mo
363.796 276.57 li
362.871 276.036 li
361.951 276.57 li
362.871 277.102 li
cp
f
361.849 277.691 mo
362.771 277.159 li
361.849 276.625 li
360.927 277.159 li
361.849 277.691 li
cp
f
360.825 278.279 mo
361.747 277.75 li
360.825 277.218 li
359.901 277.75 li
360.825 278.279 li
cp
f
357.984 279.921 mo
360.74 278.332 li
359.818 277.803 li
357.063 279.393 li
357.984 279.921 li
cp
f
365.957 275.318 mo
366.883 274.789 li
365.957 274.251 li
365.037 274.789 li
365.957 275.318 li
cp
f
364.921 275.919 mo
365.842 275.385 li
364.921 274.851 li
363.997 275.385 li
364.921 275.919 li
cp
f
363.896 276.511 mo
364.822 275.974 li
363.896 275.446 li
362.976 275.974 li
363.896 276.511 li
cp
f
370.091 272.934 mo
371.013 272.4 li
370.091 271.866 li
369.168 272.4 li
370.091 272.934 li
cp
f
369.068 273.521 mo
369.99 272.991 li
369.068 272.455 li
368.146 272.991 li
369.068 273.521 li
cp
f
368.044 274.114 mo
368.967 273.584 li
368.044 273.046 li
367.12 273.584 li
368.044 274.114 li
cp
f
367.018 274.706 mo
367.94 274.175 li
367.018 273.639 li
366.097 274.175 li
367.018 274.706 li
cp
f
362.373 276.211 mo
363.299 275.676 li
362.373 275.143 li
361.451 275.676 li
362.373 276.211 li
cp
f
361.348 276.802 mo
362.274 276.268 li
361.348 275.735 li
360.429 276.268 li
361.348 276.802 li
cp
f
360.327 277.393 mo
361.246 276.86 li
360.327 276.329 li
359.404 276.86 li
360.327 277.393 li
cp
f
359.294 277.99 mo
360.217 277.459 li
359.294 276.925 li
358.369 277.459 li
359.294 277.99 li
cp
f
356.969 279.334 mo
359.177 278.054 li
358.252 277.524 li
356.04 278.799 li
356.969 279.334 li
cp
f
365.462 274.429 mo
366.384 273.899 li
365.462 273.367 li
364.534 273.899 li
365.462 274.429 li
cp
f
364.425 275.027 mo
365.349 274.496 li
364.425 273.963 li
363.5 274.496 li
364.425 275.027 li
cp
f
363.4 275.622 mo
364.321 275.088 li
363.4 274.558 li
362.474 275.088 li
363.4 275.622 li
cp
f
369.595 272.043 mo
370.515 271.511 li
369.595 270.977 li
368.673 271.511 li
369.595 272.043 li
cp
f
368.569 272.631 mo
369.49 272.1 li
368.569 271.57 li
367.647 272.1 li
368.569 272.631 li
cp
f
367.546 273.228 mo
368.468 272.69 li
367.546 272.16 li
366.623 272.69 li
367.546 273.228 li
cp
f
366.521 273.818 mo
367.442 273.284 li
366.521 272.756 li
365.595 273.284 li
366.521 273.818 li
cp
f
361.609 275.465 mo
362.53 274.931 li
361.609 274.4 li
360.686 274.931 li
361.609 275.465 li
cp
f
360.582 276.054 mo
361.508 275.521 li
360.582 274.992 li
359.664 275.521 li
360.582 276.054 li
cp
f
359.558 276.648 mo
360.481 276.115 li
359.558 275.582 li
358.635 276.115 li
359.558 276.648 li
cp
f
358.525 277.244 mo
359.449 276.713 li
358.525 276.176 li
357.604 276.713 li
358.525 277.244 li
cp
f
357.493 277.84 mo
358.418 277.306 li
357.493 276.778 li
356.57 277.306 li
357.493 277.84 li
cp
f
355.937 278.739 mo
357.375 277.907 li
356.452 277.376 li
355.014 278.206 li
355.937 278.739 li
cp
f
364.693 273.686 mo
365.62 273.151 li
364.693 272.618 li
363.769 273.151 li
364.693 273.686 li
cp
f
363.657 274.284 mo
364.577 273.748 li
363.657 273.217 li
362.732 273.748 li
363.657 274.284 li
cp
f
362.63 274.872 mo
363.555 274.341 li
362.63 273.81 li
361.709 274.341 li
362.63 274.872 li
cp
f
368.826 271.296 mo
369.752 270.768 li
368.826 270.233 li
367.907 270.768 li
368.826 271.296 li
cp
f
369.847 270.706 mo
371.28 269.881 li
370.358 269.35 li
368.922 270.172 li
369.847 270.706 li
cp
f
370.617 271.452 mo
372.308 270.474 li
371.389 269.94 li
369.695 270.921 li
370.617 271.452 li
cp
f
371.118 272.341 mo
373.329 271.062 li
372.408 270.533 li
370.195 271.808 li
371.118 272.341 li
cp
f
367.804 271.889 mo
368.725 271.351 li
367.804 270.822 li
366.883 271.351 li
367.804 271.889 li
cp
f
366.777 272.477 mo
367.7 271.948 li
366.777 271.415 li
365.858 271.948 li
366.777 272.477 li
cp
f
365.751 273.073 mo
366.675 272.54 li
365.751 272.006 li
364.83 272.54 li
365.751 273.073 li
cp
f
361.083 274.572 mo
362.004 274.044 li
361.083 273.514 li
360.159 274.044 li
361.083 274.572 li
cp
f
360.058 275.166 mo
360.982 274.633 li
360.058 274.104 li
359.136 274.633 li
360.058 275.166 li
cp
f
359.034 275.76 mo
359.956 275.224 li
359.034 274.692 li
358.109 275.224 li
359.034 275.76 li
cp
f
358.002 276.355 mo
358.924 275.825 li
358.002 275.29 li
357.079 275.825 li
358.002 276.355 li
cp
f
356.97 276.951 mo
357.892 276.419 li
356.97 275.885 li
356.046 276.419 li
356.97 276.951 li
cp
f
354.905 278.144 mo
356.86 277.014 li
355.937 276.479 li
353.982 277.61 li
354.905 278.144 li
cp
f
354.294 277.426 mo
353.982 277.426 li
353.982 277.61 li
354.294 277.61 li
354.294 277.426 li
cp
f
353.573 277.011 mo
353.261 277.011 li
353.261 277.196 li
353.573 277.196 li
353.573 277.011 li
cp
f
354.605 276.409 mo
354.294 276.409 li
354.294 276.6 li
354.605 276.6 li
354.605 276.409 li
cp
f
355.325 278.021 mo
355.014 278.021 li
355.014 278.206 li
355.325 278.206 li
355.325 278.021 li
cp
f
356.355 278.613 mo
356.04 278.613 li
356.04 278.799 li
356.355 278.799 li
356.355 278.613 li
cp
f
357.373 279.203 mo
357.063 279.203 li
357.063 279.393 li
357.373 279.393 li
357.373 279.203 li
cp
f
358.442 279.821 mo
358.132 279.821 li
358.132 280.007 li
358.442 280.007 li
358.442 279.821 li
cp
f
361.808 278.761 mo
361.5 278.761 li
361.5 278.951 li
361.808 278.951 li
361.808 278.761 li
cp
f
362.817 278.369 mo
362.502 278.369 li
362.502 278.181 li
362.817 278.181 li
362.817 278.369 li
cp
f
361.285 278.181 mo
361.285 278.369 li
360.971 278.369 li
360.971 278.181 li
361.285 278.181 li
cp
f
361.747 277.75 mo
361.435 277.75 li
361.435 277.562 li
361.747 277.562 li
361.747 277.75 li
cp
f
360.214 277.562 mo
360.214 277.75 li
359.901 277.75 li
359.901 277.562 li
360.214 277.562 li
cp
f
360.217 277.459 mo
359.905 277.459 li
359.905 277.273 li
360.217 277.273 li
360.217 277.459 li
cp
f
358.682 277.273 mo
358.682 277.459 li
358.369 277.459 li
358.369 277.273 li
358.682 277.273 li
cp
f
358.418 277.306 mo
358.105 277.306 li
358.105 277.122 li
358.418 277.122 li
358.418 277.306 li
cp
f
356.884 277.122 mo
356.884 277.306 li
356.57 277.306 li
356.57 277.122 li
356.884 277.122 li
cp
f
357.892 276.419 mo
357.578 276.419 li
357.578 276.231 li
357.892 276.231 li
357.892 276.419 li
cp
f
356.357 276.231 mo
356.357 276.419 li
356.046 276.419 li
356.046 276.231 li
356.357 276.231 li
cp
f
359.449 276.713 mo
359.139 276.713 li
359.139 276.526 li
359.449 276.526 li
359.449 276.713 li
cp
f
357.917 276.526 mo
357.917 276.713 li
357.604 276.713 li
357.604 276.526 li
357.917 276.526 li
cp
f
361.246 276.86 mo
360.935 276.86 li
360.935 276.673 li
361.246 276.673 li
361.246 276.86 li
cp
f
359.717 276.673 mo
359.717 276.86 li
359.404 276.86 li
359.404 276.673 li
359.717 276.673 li
cp
f
362.771 277.159 mo
362.458 277.159 li
362.458 276.974 li
362.771 276.974 li
362.771 277.159 li
cp
f
361.238 276.974 mo
361.238 277.159 li
360.927 277.159 li
360.927 276.974 li
361.238 276.974 li
cp
f
363.839 277.774 mo
363.527 277.774 li
363.527 277.592 li
363.839 277.592 li
363.839 277.774 li
cp
f
362.309 277.592 mo
362.309 277.774 li
361.993 277.774 li
361.993 277.592 li
362.309 277.592 li
cp
f
364.865 277.182 mo
364.554 277.182 li
364.554 276.994 li
364.865 276.994 li
364.865 277.182 li
cp
f
363.332 276.994 mo
363.332 277.182 li
363.021 277.182 li
363.021 276.994 li
363.332 276.994 li
cp
f
363.796 276.57 mo
363.485 276.57 li
363.485 276.381 li
363.796 276.381 li
363.796 276.57 li
cp
f
362.263 276.381 mo
362.263 276.57 li
361.951 276.57 li
361.951 276.381 li
362.263 276.381 li
cp
f
363.299 275.676 mo
362.988 275.676 li
362.988 275.491 li
363.299 275.491 li
363.299 275.676 li
cp
f
361.765 275.491 mo
361.765 275.676 li
361.451 275.676 li
361.451 275.491 li
361.765 275.491 li
cp
f
362.53 274.931 mo
362.219 274.931 li
362.219 274.743 li
362.53 274.743 li
362.53 274.931 li
cp
f
361 274.743 mo
361 274.931 li
360.686 274.931 li
360.686 274.743 li
361 274.743 li
cp
f
359.956 275.224 mo
359.642 275.224 li
359.642 275.04 li
359.956 275.04 li
359.956 275.224 li
cp
f
358.423 275.04 mo
358.423 275.224 li
358.109 275.224 li
358.109 275.04 li
358.423 275.04 li
cp
f
360.982 274.633 mo
360.67 274.633 li
360.67 274.448 li
360.982 274.448 li
360.982 274.633 li
cp
f
359.447 274.448 mo
359.447 274.633 li
359.136 274.633 li
359.136 274.448 li
359.447 274.448 li
cp
f
364.321 275.088 mo
364.01 275.088 li
364.01 274.9 li
364.321 274.9 li
364.321 275.088 li
cp
f
362.787 274.9 mo
362.787 275.088 li
362.474 275.088 li
362.474 274.9 li
362.787 274.9 li
cp
f
365.842 275.385 mo
365.535 275.385 li
365.535 275.194 li
365.842 275.194 li
365.842 275.385 li
cp
f
364.31 275.194 mo
364.31 275.385 li
363.997 275.385 li
363.997 275.194 li
364.31 275.194 li
cp
f
366.883 274.789 mo
366.569 274.789 li
366.569 274.598 li
366.883 274.598 li
366.883 274.789 li
cp
f
365.349 274.598 mo
365.349 274.789 li
365.037 274.789 li
365.037 274.598 li
365.349 274.598 li
cp
f
367.94 274.175 mo
367.627 274.175 li
367.627 273.989 li
367.94 273.989 li
367.94 274.175 li
cp
f
366.406 273.989 mo
366.406 274.175 li
366.097 274.175 li
366.097 273.989 li
366.406 273.989 li
cp
f
368.967 273.584 mo
368.652 273.584 li
368.652 273.394 li
368.967 273.394 li
368.967 273.584 li
cp
f
367.432 273.394 mo
367.432 273.584 li
367.12 273.584 li
367.12 273.394 li
367.432 273.394 li
cp
f
369.99 272.991 mo
369.679 272.991 li
369.679 272.803 li
369.99 272.803 li
369.99 272.991 li
cp
f
368.458 272.803 mo
368.458 272.991 li
368.146 272.991 li
368.146 272.803 li
368.458 272.803 li
cp
f
371.013 272.4 mo
370.702 272.4 li
370.702 272.215 li
371.013 272.215 li
371.013 272.4 li
cp
f
369.481 272.215 mo
369.481 272.4 li
369.168 272.4 li
369.168 272.215 li
369.481 272.215 li
cp
f
370.515 271.511 mo
370.204 271.511 li
370.204 271.326 li
370.515 271.326 li
370.515 271.511 li
cp
f
368.985 271.326 mo
368.985 271.511 li
368.673 271.511 li
368.673 271.326 li
368.985 271.326 li
cp
f
369.49 272.1 mo
369.182 272.1 li
369.182 271.914 li
369.49 271.914 li
369.49 272.1 li
cp
f
367.959 271.914 mo
367.959 272.1 li
367.647 272.1 li
367.647 271.914 li
367.959 271.914 li
cp
f
368.468 272.69 mo
368.154 272.69 li
368.154 272.506 li
368.468 272.506 li
368.468 272.69 li
cp
f
366.935 272.506 mo
366.935 272.69 li
366.623 272.69 li
366.623 272.506 li
366.935 272.506 li
cp
f
367.442 273.284 mo
367.129 273.284 li
367.129 273.103 li
367.442 273.103 li
367.442 273.284 li
cp
f
365.908 273.103 mo
365.908 273.284 li
365.595 273.284 li
365.595 273.103 li
365.908 273.103 li
cp
f
365.62 273.151 mo
365.306 273.151 li
365.306 272.964 li
365.62 272.964 li
365.62 273.151 li
cp
f
364.082 272.964 mo
364.082 273.151 li
363.769 273.151 li
363.769 272.964 li
364.082 272.964 li
cp
f
366.675 272.54 mo
366.364 272.54 li
366.364 272.354 li
366.675 272.354 li
366.675 272.54 li
cp
f
365.141 272.354 mo
365.141 272.54 li
364.83 272.54 li
364.83 272.354 li
365.141 272.354 li
cp
f
367.7 271.948 mo
367.391 271.948 li
367.391 271.761 li
367.7 271.761 li
367.7 271.948 li
cp
f
366.169 271.761 mo
366.169 271.948 li
365.858 271.948 li
365.858 271.761 li
366.169 271.761 li
cp
f
364.577 273.748 mo
364.265 273.748 li
364.265 273.567 li
364.577 273.567 li
364.577 273.748 li
cp
f
363.046 273.567 mo
363.046 273.748 li
362.732 273.748 li
362.732 273.567 li
363.046 273.567 li
cp
f
366.384 273.899 mo
366.073 273.899 li
366.073 273.708 li
366.384 273.708 li
366.384 273.899 li
cp
f
364.848 273.708 mo
364.848 273.899 li
364.534 273.899 li
364.534 273.708 li
364.848 273.708 li
cp
f
363.555 274.341 mo
363.244 274.341 li
363.244 274.154 li
363.555 274.154 li
363.555 274.341 li
cp
f
362.019 274.154 mo
362.019 274.341 li
361.709 274.341 li
361.709 274.154 li
362.019 274.154 li
cp
f
362.004 274.044 mo
361.693 274.044 li
361.693 273.861 li
362.004 273.861 li
362.004 274.044 li
cp
f
360.474 273.861 mo
360.474 274.044 li
360.159 274.044 li
360.159 273.861 li
360.474 273.861 li
cp
f
363.029 273.451 mo
362.718 273.451 li
362.718 273.266 li
363.029 273.266 li
363.029 273.451 li
cp
f
361.5 273.266 mo
361.5 273.451 li
361.186 273.451 li
361.186 273.266 li
361.5 273.266 li
cp
f
364.052 272.862 mo
363.741 272.862 li
363.741 272.674 li
364.052 272.674 li
364.052 272.862 li
cp
f
362.516 272.674 mo
362.516 272.862 li
362.209 272.862 li
362.209 272.674 li
362.516 272.674 li
cp
f
365.092 272.262 mo
364.778 272.262 li
364.778 272.074 li
365.092 272.074 li
365.092 272.262 li
cp
f
363.559 272.074 mo
363.559 272.262 li
363.247 272.262 li
363.247 272.074 li
363.559 272.074 li
cp
f
366.148 271.651 mo
365.839 271.651 li
365.839 271.463 li
366.148 271.463 li
366.148 271.651 li
cp
f
364.616 271.463 mo
364.616 271.651 li
364.305 271.651 li
364.305 271.463 li
364.616 271.463 li
cp
f
367.176 271.058 mo
366.864 271.058 li
366.864 270.875 li
367.176 270.875 li
367.176 271.058 li
cp
f
365.641 270.875 mo
365.641 271.058 li
365.33 271.058 li
365.33 270.875 li
365.641 270.875 li
cp
f
368.201 270.467 mo
367.889 270.467 li
367.889 270.281 li
368.201 270.281 li
368.201 270.467 li
cp
f
366.668 270.281 mo
366.668 270.467 li
366.355 270.467 li
366.355 270.281 li
366.668 270.281 li
cp
f
369.225 269.874 mo
368.911 269.874 li
368.911 269.687 li
369.225 269.687 li
369.225 269.874 li
cp
f
367.693 269.687 mo
367.693 269.874 li
367.376 269.874 li
367.376 269.687 li
367.693 269.687 li
cp
f
370.25 269.285 mo
369.937 269.285 li
369.937 269.098 li
370.25 269.098 li
370.25 269.285 li
cp
f
368.716 269.098 mo
368.716 269.285 li
368.405 269.285 li
368.405 269.098 li
368.716 269.098 li
cp
f
369.752 270.768 mo
369.437 270.768 li
369.437 270.577 li
369.752 270.577 li
369.752 270.768 li
cp
f
368.214 270.577 mo
368.214 270.768 li
367.907 270.768 li
367.907 270.577 li
368.214 270.577 li
cp
f
368.725 271.351 mo
368.413 271.351 li
368.413 271.171 li
368.725 271.171 li
368.725 271.351 li
cp
f
367.191 271.171 mo
367.191 271.351 li
366.883 271.351 li
366.883 271.171 li
367.191 271.171 li
cp
f
365.349 274.496 mo
365.034 274.496 li
365.034 274.312 li
365.349 274.312 li
365.349 274.496 li
cp
f
363.81 274.312 mo
363.81 274.496 li
363.5 274.496 li
363.5 274.312 li
363.81 274.312 li
cp
f
361.508 275.521 mo
361.197 275.521 li
361.197 275.336 li
361.508 275.336 li
361.508 275.521 li
cp
f
359.974 275.336 mo
359.974 275.521 li
359.664 275.521 li
359.664 275.336 li
359.974 275.336 li
cp
f
364.821 275.974 mo
364.507 275.974 li
364.507 275.79 li
364.821 275.79 li
364.821 275.974 li
cp
f
363.285 275.79 mo
363.285 275.974 li
362.976 275.974 li
362.976 275.79 li
363.285 275.79 li
cp
f
371.06 273.608 mo
370.749 273.608 li
370.749 273.422 li
371.06 273.422 li
371.06 273.608 li
cp
f
369.527 273.422 mo
369.527 273.608 li
369.216 273.608 li
369.216 273.422 li
369.527 273.422 li
cp
f
372.086 273.013 mo
371.773 273.013 li
371.773 272.833 li
372.086 272.833 li
372.086 273.013 li
cp
f
370.552 272.833 mo
370.552 273.013 li
370.239 273.013 li
370.239 272.833 li
370.552 272.833 li
cp
f
373.109 272.43 mo
372.796 272.43 li
372.796 272.239 li
373.109 272.239 li
373.109 272.43 li
cp
f
371.575 272.239 mo
371.575 272.43 li
371.261 272.43 li
371.261 272.239 li
371.575 272.239 li
cp
f
374.399 271.681 mo
374.088 271.681 li
374.088 271.492 li
374.399 271.492 li
374.399 271.681 li
cp
f
373.329 271.062 mo
373.018 271.062 li
373.018 270.878 li
373.329 270.878 li
373.329 271.062 li
cp
f
370.506 271.808 mo
370.195 271.808 li
370.195 271.622 li
370.506 271.622 li
370.506 271.808 li
cp
f
370.008 270.921 mo
369.695 270.921 li
369.695 270.729 li
370.008 270.729 li
370.008 270.921 li
cp
f
372.308 270.474 mo
372 270.474 li
372 270.289 li
372.308 270.289 li
372.308 270.474 li
cp
f
371.28 269.881 mo
370.972 269.881 li
370.972 269.692 li
371.28 269.692 li
371.28 269.881 li
cp
f
369.234 270.172 mo
368.922 270.172 li
368.922 269.991 li
369.234 269.991 li
369.234 270.172 li
cp
f
370.048 274.192 mo
369.732 274.192 li
369.732 274.007 li
370.048 274.007 li
370.048 274.192 li
cp
f
364.354 276.592 mo
364.045 276.592 li
364.045 276.406 li
364.354 276.406 li
364.354 276.592 li
cp
f
372.597 271.649 mo
372.597 271.833 li
372.286 271.833 li
372.286 271.649 li
372.597 271.649 li
cp
f
362.274 276.268 mo
361.96 276.268 li
361.96 276.081 li
362.274 276.081 li
362.274 276.268 li
cp
f
360.741 276.081 mo
360.741 276.268 li
360.429 276.268 li
360.429 276.081 li
360.741 276.081 li
cp
f
360.481 276.115 mo
360.168 276.115 li
360.168 275.93 li
360.481 275.93 li
360.481 276.115 li
cp
f
358.949 275.93 mo
358.949 276.115 li
358.635 276.115 li
358.635 275.93 li
358.949 275.93 li
cp
f
358.924 275.825 mo
358.612 275.825 li
358.612 275.636 li
358.924 275.636 li
358.924 275.825 li
cp
f
357.389 275.636 mo
357.389 275.825 li
357.079 275.825 li
357.079 275.636 li
357.389 275.636 li
cp
f
360.74 278.148 mo
360.428 278.148 li
360.428 278.332 li
360.74 278.332 li
360.74 278.148 li
cp
f
359.177 277.87 mo
358.868 277.87 li
358.868 278.054 li
359.177 278.054 li
359.177 277.87 li
cp
f
357.375 277.721 mo
357.063 277.721 li
357.063 277.907 li
357.375 277.907 li
357.375 277.721 li
cp
f
356.86 276.83 mo
356.548 276.83 li
356.548 277.014 li
356.86 277.014 li
356.86 276.83 li
cp
f
354.786 276.826 mo
354.476 276.826 li
354.476 277.011 li
354.786 277.011 li
354.786 276.826 li
cp
f
355.819 276.229 mo
355.506 276.229 li
355.506 276.414 li
355.819 276.414 li
355.819 276.229 li
cp
f
355.637 275.813 mo
355.325 275.813 li
355.325 276.003 li
355.637 276.003 li
355.637 275.813 li
cp
f
356.852 275.633 mo
356.538 275.633 li
356.538 275.817 li
356.852 275.817 li
356.852 275.633 li
cp
f
356.668 275.217 mo
356.357 275.217 li
356.357 275.406 li
356.668 275.406 li
356.668 275.217 li
cp
f
357.884 275.037 mo
357.574 275.037 li
357.574 275.217 li
357.884 275.217 li
357.884 275.037 li
cp
f
357.702 274.626 mo
357.389 274.626 li
357.389 274.81 li
357.702 274.81 li
357.702 274.626 li
cp
f
358.917 274.44 mo
358.605 274.44 li
358.605 274.626 li
358.917 274.626 li
358.917 274.44 li
cp
f
358.727 274.031 mo
358.416 274.031 li
358.416 274.216 li
358.727 274.216 li
358.727 274.031 li
cp
f
359.941 273.846 mo
359.631 273.846 li
359.631 274.031 li
359.941 274.031 li
359.941 273.846 li
cp
f
359.751 273.44 mo
359.438 273.44 li
359.438 273.626 li
359.751 273.626 li
359.751 273.44 li
cp
f
360.964 273.257 mo
360.653 273.257 li
360.653 273.444 li
360.964 273.444 li
360.964 273.257 li
cp
f
360.777 272.848 mo
360.462 272.848 li
360.462 273.033 li
360.777 273.033 li
360.777 272.848 li
cp
f
361.989 272.667 mo
361.678 272.667 li
361.678 272.852 li
361.989 272.852 li
361.989 272.667 li
cp
f
361.802 272.259 mo
361.49 272.259 li
361.49 272.444 li
361.802 272.444 li
361.802 272.259 li
cp
f
363.01 272.074 mo
362.702 272.074 li
362.702 272.259 li
363.01 272.259 li
363.01 272.074 li
cp
f
362.837 271.658 mo
362.526 271.658 li
362.526 271.845 li
362.837 271.845 li
362.837 271.658 li
cp
f
364.052 271.474 mo
363.739 271.474 li
363.739 271.662 li
364.052 271.662 li
364.052 271.474 li
cp
f
363.896 271.049 mo
363.584 271.049 li
363.584 271.233 li
363.896 271.233 li
363.896 271.049 li
cp
f
365.111 270.862 mo
364.797 270.862 li
364.797 271.053 li
365.111 271.053 li
365.111 270.862 li
cp
f
364.921 270.457 mo
364.607 270.457 li
364.607 270.641 li
364.921 270.641 li
364.921 270.457 li
cp
f
366.135 270.268 mo
365.826 270.268 li
365.826 270.46 li
366.135 270.46 li
366.135 270.268 li
cp
f
365.946 269.861 mo
365.633 269.861 li
365.633 270.048 li
365.946 270.048 li
365.946 269.861 li
cp
f
367.161 269.681 mo
366.847 269.681 li
366.847 269.866 li
367.161 269.866 li
367.161 269.681 li
cp
f
366.971 269.272 mo
366.657 269.272 li
366.657 269.458 li
366.971 269.458 li
366.971 269.272 li
cp
f
368.184 269.088 mo
367.874 269.088 li
367.874 269.272 li
368.184 269.272 li
368.184 269.088 li
cp
f
367.996 268.68 mo
367.684 268.68 li
367.684 268.867 li
367.996 268.867 li
367.996 268.68 li
cp
f
369.21 268.496 mo
368.897 268.496 li
368.897 268.68 li
369.21 268.68 li
369.21 268.496 li
cp
f
364.167 272.796 mo
365.092 272.262 li
364.167 271.728 li
363.247 272.262 li
364.167 272.796 li
cp
f
363.13 273.394 mo
364.052 272.862 li
363.13 272.328 li
362.209 272.862 li
363.13 273.394 li
cp
f
362.106 273.983 mo
363.029 273.451 li
362.106 272.918 li
361.186 273.451 li
362.106 273.983 li
cp
f
368.3 270.408 mo
369.225 269.874 li
368.3 269.343 li
367.376 269.874 li
368.3 270.408 li
cp
f
367.278 270.999 mo
368.201 270.467 li
367.278 269.931 li
366.355 270.467 li
367.278 270.999 li
cp
f
369.325 269.817 mo
370.25 269.285 li
369.325 268.753 li
368.405 269.285 li
369.325 269.817 li
cp
f
366.256 271.589 mo
367.176 271.058 li
366.256 270.526 li
365.33 271.058 li
366.256 271.589 li
cp
f
365.224 272.18 mo
366.148 271.651 li
365.224 271.117 li
364.305 271.651 li
365.224 272.18 li
cp
f
360.041 273.977 mo
360.964 273.444 li
360.363 273.097 li
359.438 273.626 li
360.041 273.977 li
cp
f
359.017 274.565 mo
359.941 274.031 li
359.338 273.689 li
358.416 274.216 li
359.017 274.565 li
cp
f
357.997 275.154 mo
358.917 274.626 li
358.312 274.276 li
357.389 274.81 li
357.997 275.154 li
cp
f
356.962 275.751 mo
357.884 275.217 li
357.283 274.872 li
356.357 275.406 li
356.962 275.751 li
cp
f
355.927 276.348 mo
356.852 275.817 li
356.248 275.468 li
355.325 276.003 li
355.927 276.348 li
cp
f
354.894 276.947 mo
355.819 276.414 li
355.216 276.066 li
354.294 276.6 li
354.894 276.947 li
cp
f
353.862 277.544 mo
354.786 277.011 li
354.182 276.665 li
353.261 277.196 li
353.862 277.544 li
cp
f
363.128 272.192 mo
364.052 271.662 li
363.449 271.314 li
362.526 271.845 li
363.128 272.192 li
cp
f
362.091 272.793 mo
363.01 272.259 li
362.41 271.91 li
361.49 272.444 li
362.091 272.793 li
cp
f
361.063 273.385 mo
361.989 272.852 li
361.387 272.503 li
360.462 273.033 li
361.063 273.385 li
cp
f
367.263 269.808 mo
368.184 269.272 li
367.578 268.923 li
366.657 269.458 li
367.263 269.808 li
cp
f
366.238 270.399 mo
367.161 269.866 li
366.554 269.517 li
365.633 270.048 li
366.238 270.399 li
cp
f
368.286 269.217 mo
369.21 268.68 li
368.604 268.333 li
367.684 268.867 li
368.286 269.217 li
cp
f
365.217 270.987 mo
366.135 270.46 li
365.535 270.112 li
364.607 270.641 li
365.217 270.987 li
cp
f
364.186 271.584 mo
365.111 271.053 li
364.507 270.701 li
363.584 271.233 li
364.186 271.584 li
cp
f
363.942 277.529 mo
364.865 276.994 li
363.942 276.469 li
363.021 276.994 li
363.942 277.529 li
cp
.968627 .968627 .968627 rgb
f
362.918 278.122 mo
363.839 277.592 li
362.918 277.058 li
361.993 277.592 li
362.918 278.122 li
cp
f
364.966 276.938 mo
370.048 274.007 li
369.124 273.474 li
364.045 276.406 li
364.966 276.938 li
cp
f
361.894 278.71 mo
362.817 278.181 li
361.894 277.647 li
360.971 278.181 li
361.894 278.71 li
cp
f
359.053 280.351 mo
361.808 278.761 li
360.886 278.229 li
358.132 279.821 li
359.053 280.351 li
cp
f
372.184 272.769 mo
373.109 272.239 li
372.184 271.702 li
371.261 272.239 li
372.184 272.769 li
cp
f
371.162 273.361 mo
372.086 272.833 li
371.162 272.299 li
370.239 272.833 li
371.162 273.361 li
cp
f
373.21 272.18 mo
374.399 271.492 li
373.481 270.958 li
372.286 271.649 li
373.21 272.18 li
cp
f
370.135 273.956 mo
371.06 273.422 li
370.135 272.888 li
369.216 273.422 li
370.135 273.956 li
cp
f
362.871 276.915 mo
363.796 276.381 li
362.871 275.847 li
361.951 276.381 li
362.871 276.915 li
cp
f
361.849 277.503 mo
362.771 276.974 li
361.849 276.439 li
360.927 276.974 li
361.849 277.503 li
cp
f
360.825 278.098 mo
361.747 277.562 li
360.825 277.027 li
359.901 277.562 li
360.825 278.098 li
cp
f
357.984 279.737 mo
360.74 278.148 li
359.818 277.613 li
357.063 279.203 li
357.984 279.737 li
cp
f
365.957 275.133 mo
366.883 274.598 li
365.957 274.066 li
365.037 274.598 li
365.957 275.133 li
cp
f
364.921 275.729 mo
365.842 275.194 li
364.921 274.661 li
363.997 275.194 li
364.921 275.729 li
cp
f
363.896 276.321 mo
364.822 275.79 li
363.896 275.259 li
362.976 275.79 li
363.896 276.321 li
cp
f
370.091 272.745 mo
371.013 272.215 li
370.091 271.681 li
369.168 272.215 li
370.091 272.745 li
cp
f
369.068 273.337 mo
369.99 272.803 li
369.068 272.269 li
368.146 272.803 li
369.068 273.337 li
cp
f
368.044 273.93 mo
368.967 273.394 li
368.044 272.862 li
367.12 273.394 li
368.044 273.93 li
cp
f
367.018 274.519 mo
367.94 273.989 li
367.018 273.454 li
366.097 273.989 li
367.018 274.519 li
cp
f
362.373 276.025 mo
363.299 275.491 li
362.373 274.959 li
361.451 275.491 li
362.373 276.025 li
cp
f
361.348 276.617 mo
362.274 276.081 li
361.348 275.552 li
360.429 276.081 li
361.348 276.617 li
cp
f
360.327 277.206 mo
361.246 276.673 li
360.327 276.14 li
359.404 276.673 li
360.327 277.206 li
cp
f
359.294 277.803 mo
360.217 277.273 li
359.294 276.738 li
358.369 277.273 li
359.294 277.803 li
cp
f
356.969 279.145 mo
359.177 277.87 li
358.252 277.336 li
356.04 278.613 li
356.969 279.145 li
cp
f
365.462 274.243 mo
366.384 273.708 li
365.462 273.177 li
364.534 273.708 li
365.462 274.243 li
cp
f
364.425 274.842 mo
365.349 274.312 li
364.425 273.777 li
363.5 274.312 li
364.425 274.842 li
cp
f
363.4 275.432 mo
364.321 274.9 li
363.4 274.371 li
362.474 274.9 li
363.4 275.432 li
cp
f
369.595 271.855 mo
370.515 271.326 li
369.595 270.791 li
368.673 271.326 li
369.595 271.855 li
cp
f
368.569 272.444 mo
369.49 271.914 li
368.569 271.38 li
367.647 271.914 li
368.569 272.444 li
cp
f
367.546 273.037 mo
368.468 272.506 li
367.546 271.972 li
366.623 272.506 li
367.546 273.037 li
cp
f
366.521 273.631 mo
367.442 273.103 li
366.521 272.565 li
365.595 273.103 li
366.521 273.631 li
cp
f
361.609 275.277 mo
362.53 274.743 li
361.609 274.213 li
360.686 274.743 li
361.609 275.277 li
cp
f
360.582 275.872 mo
361.508 275.336 li
360.582 274.803 li
359.664 275.336 li
360.582 275.872 li
cp
f
359.558 276.464 mo
360.481 275.93 li
359.558 275.396 li
358.635 275.93 li
359.558 276.464 li
cp
f
358.525 277.058 mo
359.449 276.526 li
358.525 275.992 li
357.604 276.526 li
358.525 277.058 li
cp
f
357.493 277.65 mo
358.418 277.122 li
357.493 276.588 li
356.57 277.122 li
357.493 277.65 li
cp
f
355.937 278.552 mo
357.375 277.721 li
356.452 277.189 li
355.014 278.021 li
355.937 278.552 li
cp
f
364.693 273.499 mo
365.62 272.964 li
364.693 272.434 li
363.769 272.964 li
364.693 273.499 li
cp
f
363.657 274.096 mo
364.577 273.567 li
363.657 273.033 li
362.732 273.567 li
363.657 274.096 li
cp
f
362.63 274.688 mo
363.555 274.154 li
362.63 273.621 li
361.709 274.154 li
362.63 274.688 li
cp
f
368.826 271.111 mo
369.752 270.577 li
368.826 270.048 li
367.907 270.577 li
368.826 271.111 li
cp
f
369.847 270.522 mo
371.28 269.692 li
370.358 269.158 li
368.922 269.991 li
369.847 270.522 li
cp
f
370.617 271.263 mo
372.308 270.289 li
371.389 269.754 li
369.695 270.729 li
370.617 271.263 li
cp
f
371.118 272.156 mo
373.329 270.878 li
372.408 270.343 li
370.195 271.622 li
371.118 272.156 li
cp
f
367.804 271.698 mo
368.725 271.171 li
367.804 270.637 li
366.883 271.171 li
367.804 271.698 li
cp
f
366.777 272.292 mo
367.7 271.761 li
366.777 271.225 li
365.858 271.761 li
366.777 272.292 li
cp
f
365.751 272.885 mo
366.675 272.354 li
365.751 271.82 li
364.83 272.354 li
365.751 272.885 li
cp
f
361.083 274.39 mo
362.004 273.861 li
361.083 273.326 li
360.159 273.861 li
361.083 274.39 li
cp
f
360.058 274.981 mo
360.982 274.448 li
360.058 273.919 li
359.136 274.448 li
360.058 274.981 li
cp
f
359.034 275.574 mo
359.956 275.04 li
359.034 274.507 li
358.109 275.04 li
359.034 275.574 li
cp
f
358.002 276.165 mo
358.924 275.636 li
358.002 275.103 li
357.079 275.636 li
358.002 276.165 li
cp
f
356.97 276.767 mo
357.892 276.229 li
356.97 275.7 li
356.046 276.231 li
356.97 276.767 li
cp
f
354.905 277.958 mo
356.86 276.83 li
355.937 276.296 li
353.982 277.426 li
354.905 277.958 li
cp
f
364.167 272.612 mo
365.092 272.074 li
364.167 271.544 li
363.247 272.074 li
364.167 272.612 li
cp
f
363.13 273.207 mo
364.052 272.674 li
363.13 272.142 li
362.209 272.674 li
363.13 273.207 li
cp
f
362.106 273.798 mo
363.029 273.266 li
362.106 272.733 li
361.186 273.266 li
362.106 273.798 li
cp
f
368.3 270.222 mo
369.225 269.687 li
368.3 269.155 li
367.376 269.687 li
368.3 270.222 li
cp
f
367.278 270.812 mo
368.201 270.281 li
367.278 269.747 li
366.355 270.281 li
367.278 270.812 li
cp
f
369.325 269.629 mo
370.25 269.098 li
369.325 268.567 li
368.405 269.098 li
369.325 269.629 li
cp
f
366.256 271.404 mo
367.176 270.875 li
366.256 270.337 li
365.33 270.875 li
366.256 271.404 li
cp
f
365.224 271.999 mo
366.148 271.463 li
365.224 270.933 li
364.305 271.463 li
365.224 271.999 li
cp
f
360.041 273.788 mo
360.964 273.257 li
360.363 272.91 li
359.438 273.44 li
360.041 273.788 li
cp
f
359.017 274.381 mo
359.941 273.846 li
359.338 273.499 li
358.416 274.031 li
359.017 274.381 li
cp
f
357.997 274.973 mo
358.917 274.44 li
358.312 274.092 li
357.389 274.626 li
357.997 274.973 li
cp
f
356.962 275.57 mo
357.884 275.037 li
357.283 274.688 li
356.357 275.217 li
356.962 275.57 li
cp
f
355.927 276.161 mo
356.852 275.633 li
356.248 275.283 li
355.325 275.813 li
355.927 276.161 li
cp
f
354.894 276.758 mo
355.819 276.229 li
355.216 275.878 li
354.294 276.409 li
354.894 276.758 li
cp
f
353.862 277.354 mo
354.786 276.826 li
354.182 276.476 li
353.261 277.011 li
353.862 277.354 li
cp
f
363.128 272.006 mo
364.052 271.474 li
363.449 271.13 li
362.526 271.658 li
363.128 272.006 li
cp
f
362.091 272.612 mo
363.01 272.074 li
362.41 271.725 li
361.49 272.259 li
362.091 272.612 li
cp
f
361.063 273.196 mo
361.989 272.667 li
361.387 272.317 li
360.462 272.848 li
361.063 273.196 li
cp
f
367.263 269.622 mo
368.184 269.088 li
367.578 268.74 li
366.657 269.272 li
367.263 269.622 li
cp
f
366.238 270.21 mo
367.161 269.681 li
366.554 269.329 li
365.633 269.861 li
366.238 270.21 li
cp
f
368.286 269.029 mo
369.21 268.496 li
368.604 268.151 li
367.684 268.68 li
368.286 269.029 li
cp
f
365.217 270.802 mo
366.135 270.268 li
365.535 269.922 li
364.607 270.457 li
365.217 270.802 li
cp
f
364.186 271.397 mo
365.111 270.862 li
364.507 270.515 li
363.584 271.049 li
364.186 271.397 li
cp
f
350.745 277.387 mo
350.944 269.82 li
350.745 263.367 li
350.182 263.04 li
350.182 277.065 li
350.745 277.387 li
cp
.956863 .937255 .913725 rgb
f
368.352 253.693 mo
368.352 265.106 li
351.167 275.035 li
351.167 274.364 li
351.167 263.611 li
350.745 263.367 li
350.745 277.387 li
368.962 266.875 li
368.962 252.849 li
368.352 253.693 li
cp
.819608 .819608 .819608 rgb
f
351.167 275.035 mo
351.167 275.244 li
368.54 265.214 li
368.54 253.581 li
368.352 253.693 li
368.352 265.106 li
351.167 275.035 li
cp
.968627 .968627 .968627 rgb
f
368.962 252.849 mo
368.402 252.523 li
350.182 263.04 li
350.745 263.367 li
360.074 258.263 li
368.962 252.849 li
cp
f
368.352 253.693 mo
351.167 263.611 li
350.972 263.696 li
350.745 263.367 li
368.962 252.849 li
368.879 253.273 li
368.352 253.693 li
cp
.819608 .819608 .819608 rgb
f
397.29 250.089 mo
397.29 250.089 401.888 248.923 403.551 251.259 cv
405.556 254.082 403.52 257.864 403.52 257.864 cv
399.732 256.037 li
397.29 250.089 li
cp
.309804 .309804 .309804 rgb
f
376.587 271.111 mo
373.373 271.277 373.373 271.273 372.667 271.38 cv
372.001 271.481 369.274 273.876 369.702 274.414 cv
370.129 274.951 373.205 274.216 373.205 274.216 cv
375.738 274.414 li
376.587 271.111 li
cp
.941176 .776471 .705882 rgb
f
385.85 255.963 mo
384.001 258.404 380.585 260.053 380.585 260.053 cv
380.585 260.053 372.626 263.157 377.445 268.891 cv
378.156 269.738 379.309 276.867 378.828 280.451 cv
378.345 284.04 374.439 284.499 374.439 286.337 cv
374.435 291.464 376.848 293.605 379.905 295.357 cv
385.715 298.69 390.173 297.038 394.066 294.975 cv
397.961 292.917 400.773 290.913 401.067 288.032 cv
401.657 282.273 398.942 278.855 398.731 275.344 cv
398.52 271.829 403.599 261.849 403.551 257.13 cv
403.503 252.42 401.203 251.114 401.203 251.114 cv
401.203 251.114 399.464 249.19 390.781 250.122 cv
395.633 254.423 385.695 255.479 385.85 255.963 cv
cp
.34902 .34902 .34902 rgb
f
389.767 252.801 mo
387.901 253.789 385.666 253.46 385.666 253.46 cv
385.267 255.894 li
385.267 255.894 390.756 256.83 395.795 253.946 cv
395.774 253.642 389.622 252.471 389.767 252.801 cv
cp
.968627 .968627 .968627 rgb
f
388.029 230.931 mo
388.029 230.931 383.973 230.657 382.148 233.494 cv
379.407 237.755 382.622 246.927 381.412 250.882 cv
385.174 254.156 388.786 253.178 388.786 253.178 cv
388.786 253.178 388.639 253.863 387.859 254.498 cv
392.692 255.33 399.822 254.923 401.146 246.241 cv
401.552 243.565 399.875 235.35 394.6 232.029 cv
388.881 228.431 388.029 230.931 388.029 230.931 cv
cp
.780392 .619608 .392157 rgb
f
395.966 236.062 mo
394.394 233.431 388.029 230.931 388.029 230.931 cv
388.029 230.931 395.321 231.852 395.966 236.062 cv
cp
.67451 .533333 .329412 rgb
f
366.738 277.423 mo
366.738 277.423 365.083 275.903 364.437 275.79 cv
363.789 275.67 361.471 276.588 361.05 277.005 cv
360.624 277.419 359.397 279.293 359.769 279.741 cv
360.139 280.188 361.538 280.036 361.538 280.036 cv
361.538 280.036 362.786 281.318 364.197 281.513 cv
365.006 281.624 366.15 281.153 366.15 281.153 cv
366.738 277.423 li
cp
.941176 .776471 .705882 rgb
f
367.982 281.889 mo
367.982 281.889 366.637 281.835 365.485 281.582 cv
363.815 281.209 364.601 277.089 366.462 277.376 cv
367.395 277.524 368.666 277.725 368.666 277.725 cv
367.982 281.889 li
cp
.968627 .968627 .968627 rgb
f
384.624 260.419 mo
380.732 258.636 378.558 263.892 378.558 263.892 cv
378.558 263.892 374.381 275.147 373.871 275.878 cv
372.494 276.395 370.233 277.148 367.885 277.148 cv
364.902 277.148 364.371 281.861 366.714 282.076 cv
369.057 282.291 375.749 283.207 377.166 282.546 cv
378.582 281.889 386.005 267.185 386.005 267.185 cv
386.005 267.185 387.937 261.938 384.624 260.419 cv
cp
.309804 .309804 .309804 rgb
f
294.423 352.71 mo
292.148 352.11 290.017 351.269 288.145 350.188 cv
279.732 345.335 279.732 337.455 288.145 332.601 cv
288.822 332.21 289.533 331.851 290.272 331.523 cv
290.272 334.123 li
293.57 336.027 li
293.57 352.217 li
294.423 352.71 li
.698039 .698039 .698039 rgb
f
303.377 353.832 mo
300.318 353.832 297.259 353.458 294.423 352.71 cv
293.57 352.217 li
293.57 336.027 li
318.352 350.334 li
314.18 352.666 308.779 353.832 303.377 353.832 cv
.666667 .654902 .639216 rgb
f
318.352 350.334 mo
293.57 336.027 li
290.272 334.123 li
290.272 331.523 li
292.326 330.612 294.6 329.943 296.976 329.518 cv
323.95 345.092 li
322.948 346.957 321.168 348.713 318.61 350.188 cv
318.525 350.237 318.439 350.286 318.352 350.334 cv
f
323.95 345.092 mo
296.976 329.518 li
299.057 329.145 301.217 328.959 303.377 328.959 cv
308.891 328.959 314.404 330.173 318.61 332.601 cv
324.465 335.979 326.245 340.823 323.95 345.092 cv
.67451 .67451 .67451 rgb
f
301.445 332.626 mo
297.857 332.792 li
297.857 332.792 297.515 336.442 297.736 336.98 cv
299.808 338.413 300.543 338.539 302.082 339.713 cv
303.622 340.886 304.844 342.391 306.127 342.698 cv
307.408 343.004 308.76 342.806 309.016 342.059 cv
309.384 340.984 308.334 338.198 308.334 338.198 cv
301.445 332.626 li
cp
.721569 .560784 .352941 rgb
f
283.154 339.883 mo
281.393 342.397 283.549 343.722 283.549 343.722 cv
283.549 343.722 290.959 347.261 294.455 348.506 cv
296.857 349.363 299.497 347.975 299.452 347.205 cv
299.41 346.435 299.452 346.713 299.452 346.713 cv
299.452 346.713 283.507 339.38 283.154 339.883 cv
cp
f
301.445 332.132 mo
297.857 332.294 li
297.857 332.294 297.515 335.947 297.736 336.484 cv
299.808 337.921 300.543 338.047 302.082 339.22 cv
303.622 340.394 304.844 341.899 306.127 342.202 cv
307.408 342.51 308.76 342.307 309.016 341.565 cv
309.384 340.493 308.957 337.249 308.957 337.249 cv
301.445 332.132 li
cp
.419608 .266667 .0784314 rgb
f
302.033 323.03 mo
302.033 323.03 301.662 329.087 300.935 332.626 cv
299.981 337.236 308.919 339.497 309.016 336.958 cv
309.114 334.421 310.237 324.714 310.237 324.714 cv
302.033 323.03 li
cp
.0901961 .262745 .360784 rgb
f
290.385 338.206 mo
290.385 338.206 286.845 338.292 285.453 338.206 cv
284.058 338.121 283.507 338.889 283.154 339.391 cv
281.393 341.906 283.549 343.228 283.549 343.228 cv
283.549 343.228 290.959 346.768 294.455 348.012 cv
296.857 348.869 299.497 347.484 299.452 346.713 cv
299.41 345.938 299.141 341.783 299.141 341.783 cv
290.385 338.206 li
cp
.419608 .266667 .0784314 rgb
f
287.882 317.292 mo
288.869 329.076 289.84 329.403 290.064 338.537 cv
290.082 339.337 290.064 342.005 293.803 342.542 cv
298.099 343.161 299.46 342.053 299.452 340.932 cv
299.443 339.809 299.452 334.629 298.852 322.8 cv
298.801 321.877 295.953 317.978 295.953 317.978 cv
291.35 316.971 li
291.35 316.971 288.411 316.323 287.882 317.292 cv
cp
.152941 .360784 .470588 rgb
f
315.902 304.27 mo
315.902 304.27 310.438 303.522 307.667 303.073 cv
302.337 302.221 301.605 305.968 301.509 307.77 cv
301.416 309.572 301.83 312.147 301.83 312.147 cv
314.213 314.808 li
315.902 304.27 li
cp
.0901961 .262745 .360784 rgb
f
336.846 299.736 mo
339.859 302.331 li
342.709 298.815 li
338.195 296.113 li
336.846 299.736 li
cp
f
337.599 279.38 mo
337.599 279.38 343.485 278.021 345.501 281.462 cv
348.011 285.744 346.817 294.623 347.126 302.233 cv
347.199 304.039 346.195 305.246 344.415 305.66 cv
341.642 306.304 339.859 304.09 339.859 304.09 cv
339.859 304.09 338.61 297.078 338.106 293.586 cv
337.889 292.083 337.599 279.38 337.599 279.38 cv
cp
.160784 .380392 .490196 rgb
f
314.023 312.355 mo
314.023 312.355 304.962 310.646 293.508 309.708 cv
290.144 309.434 288.588 311.566 288.075 312.845 cv
287.563 314.118 287.882 317.292 287.882 317.292 cv
287.882 317.292 291.153 322.334 297.377 321.863 cv
297.966 322.478 315.316 332.199 320.678 333.339 cv
326.043 334.486 333.268 330.238 333.268 330.238 cv
333.268 330.238 339.722 326.109 339.471 324.714 cv
339.367 324.134 314.023 312.355 314.023 312.355 cv
cp
.152941 .360784 .470588 rgb
f
324.02 285.048 mo
318.416 290.175 li
318.142 303.584 li
316.253 314.522 li
316.253 314.522 312.036 316.375 311.949 321.207 cv
311.864 326.043 317.359 330.511 319.814 331.648 cv
327.762 333.758 331.786 330.184 334.356 328.607 cv
338.094 326.318 341.025 324.433 341.66 319.608 cv
341.879 317.952 341.753 312.056 341.711 306.887 cv
341.673 301.716 344.993 294.882 345.552 290.721 cv
346.218 285.782 345.325 282.765 343.355 281.272 cv
340.679 279.244 337.599 279.38 337.599 279.38 cv
333.664 281.872 li
324.02 285.048 li
cp
.258824 .564706 .721569 rgb
f
322.278 277.732 mo
322.278 277.732 325.111 277.895 325.332 278.411 cv
325.552 278.921 325.771 282.879 325.771 282.879 cv
331.633 282.253 li
335.516 280.132 li
335.879 277.5 li
335.879 277.5 335.376 275.963 335.298 274.565 cv
335.221 273.169 330.037 271.117 330.037 271.117 cv
322.278 273.61 li
322.278 277.732 li
cp
.941176 .776471 .705882 rgb
f
323.204 260.835 mo
319.422 262.484 319.812 268.179 319.837 268.556 cv
319.862 268.934 320.46 269.729 320.46 269.729 cv
320.46 269.729 320.009 270.999 320.254 272.588 cv
320.497 274.175 321.939 277.763 322.278 277.732 cv
324.954 277.496 325.049 275.966 325.049 275.966 cv
325.049 275.966 326.529 275.795 326.847 274.062 cv
327.485 272.865 328.227 261.522 328.227 261.522 cv
328.227 261.522 323.737 260.722 323.204 260.835 cv
cp
f
322.69 309.561 mo
326.394 297.972 li
326.394 297.972 328.336 291.27 323.875 289.621 cv
316.304 286.821 315.147 297.091 315.147 297.091 cv
313.065 308.357 li
318.746 311.668 li
322.69 309.561 li
cp
.160784 .380392 .490196 rgb
f
323.453 260.045 mo
322.584 261.411 324.233 263.658 324.136 264.099 cv
324.038 264.538 322.008 266.221 321.937 267.811 cv
321.864 269.399 322.719 272.548 323.134 272.94 cv
323.55 273.328 324.381 271.719 325.501 272.548 cv
326.627 273.377 326.212 274.552 328.384 276.747 cv
329.648 278.029 332.046 277.214 332.929 276.747 cv
333.807 276.285 335.644 274.869 336.507 272.122 cv
337.372 269.372 337.347 267.388 336.487 265.003 cv
335.627 262.622 333.537 261.279 331.018 259.937 cv
327.934 258.295 324.32 258.677 323.453 260.045 cv
cp
.341176 .286275 .262745 rgb
f
324.357 281.561 mo
324.357 281.561 330.515 281.484 333.835 279.722 cv
335.495 278.841 335.879 277.5 335.879 277.5 cv
337.599 279.38 li
337.599 279.38 337.105 281.348 334.456 282.824 cv
329.761 285.44 323.827 285.02 323.827 285.02 cv
324.357 281.561 li
cp
.968627 .968627 .968627 rgb
f
332.422 317.843 mo
327.268 347.013 li
339.759 354.219 li
342.144 324.573 li
339.76 322.08 li
332.422 317.843 li
cp
.956863 .937255 .913725 rgb
f
430.701 261.103 mo
332.422 317.843 li
339.76 322.08 li
413.244 284.794 li
438.04 265.342 li
430.701 261.103 li
cp
.968627 .968627 .968627 rgb
f
339.76 322.08 mo
339.759 354.219 li
419.139 311.76 li
438.04 297.478 li
438.04 265.342 li
339.76 322.08 li
cp
.819608 .819608 .819608 rgb
f
326.839 385.255 mo
326.839 378.992 li
332.759 378.992 li
332.759 385.255 li
332.759 385.692 332.467 386.129 331.891 386.462 cv
330.735 387.129 328.863 387.129 327.704 386.462 cv
327.126 386.129 326.839 385.692 326.839 385.255 cv
cp
.329412 .270588 .25098 rgb
f
327.704 380.199 mo
328.863 380.87 330.735 380.87 331.891 380.199 cv
333.045 379.532 333.045 378.452 331.891 377.786 cv
330.735 377.114 328.863 377.114 327.704 377.786 cv
326.547 378.452 326.547 379.532 327.704 380.199 cv
cp
.513726 .431373 .411765 rgb
f
293.12 365.791 mo
293.12 359.527 li
299.039 359.527 li
299.039 365.785 li
299.039 366.225 298.753 366.664 298.171 366.997 cv
297.018 367.664 295.143 367.664 293.987 366.997 cv
293.408 366.664 293.12 366.225 293.12 365.791 cv
cp
.329412 .270588 .25098 rgb
f
293.987 360.734 mo
295.143 361.405 297.018 361.405 298.171 360.734 cv
299.329 360.067 299.329 358.987 298.171 358.319 cv
297.018 357.648 295.143 357.648 293.987 358.319 cv
292.831 358.987 292.831 360.067 293.987 360.734 cv
cp
.513726 .431373 .411765 rgb
f
333.192 338.088 mo
339.762 334.293 li
292.535 307.027 li
285.965 310.823 li
291.129 316.598 li
333.192 338.088 li
cp
.968627 .968627 .968627 rgb
f
333.192 384.747 mo
339.762 380.954 li
339.762 334.293 li
333.192 338.088 li
324.342 350.064 li
333.192 384.747 li
cp
.819608 .819608 .819608 rgb
f
285.965 357.48 mo
333.192 384.747 li
333.192 338.088 li
285.965 310.823 li
285.965 357.48 li
cp
.956863 .937255 .913725 rgb
f
299.049 311.696 mo
299.049 311.696 295.623 309.602 294.343 309.109 cv
293.071 308.615 291.482 309.486 291.062 309.855 cv
290.417 310.42 290.17 311.233 290.128 311.593 cv
289.854 314.061 290.466 316.819 291.35 316.971 cv
292.238 317.118 292.45 316.519 292.45 316.519 cv
292.45 316.519 294.995 317.251 296.055 317.29 cv
297.114 317.332 297.828 316.98 297.828 316.98 cv
299.591 314.753 li
299.049 311.696 li
cp
.941176 .776471 .705882 rgb
f
301.409 312.261 mo
301.409 312.261 300.817 312.011 299.508 311.659 cv
297.893 311.224 296.62 316.874 298.256 317.286 cv
300.298 317.796 300.72 317.978 300.72 317.978 cv
301.409 312.261 li
cp
.968627 .968627 .968627 rgb
f
313.065 308.357 mo
312.289 312.551 li
314.905 321.893 li
318.58 322.345 319.819 318.545 319.819 318.545 cv
322.69 309.561 li
313.065 308.357 li
cp
.160784 .380392 .490196 rgb
f
312.289 312.551 mo
312.289 312.551 303.344 311.903 301.089 311.675 cv
298.832 311.444 297.502 317.852 300.968 318.737 cv
304.432 319.622 310.458 321.344 314.905 321.893 cv
316.253 315.493 li
312.289 312.551 li
cp
f
259.527 400.54 mo
254.495 400.54 249.462 399.428 245.619 397.204 cv
237.945 392.785 237.945 385.589 245.619 381.156 cv
249.462 378.934 254.495 377.824 259.527 377.824 cv
264.56 377.824 269.592 378.934 273.432 381.156 cv
281.112 385.589 281.112 392.785 273.432 397.204 cv
269.592 399.428 264.56 400.54 259.527 400.54 cv
.698039 .698039 .698039 rgb
f
247.121 350.492 mo
243.885 355.022 240.717 365.845 240.717 372.094 cv
240.717 384.983 249.196 395.47 259.702 395.47 cv
270.178 395.47 278.669 384.983 278.669 372.094 cv
278.669 364.286 277.074 356.294 271.846 349.994 cv
268.728 346.669 250.514 347.332 247.121 350.492 cv
cp
.819608 .819608 .819608 rgb
f
269.127 347.629 mo
263.921 344.615 255.454 344.615 250.248 347.629 cv
245.012 350.637 245.012 355.53 250.248 358.526 cv
255.454 361.566 263.921 361.566 269.127 358.526 cv
274.335 355.53 274.335 350.637 269.127 347.629 cv
cp
.968627 .968627 .968627 rgb
f
266.27 351.466 mo
262.631 349.375 256.737 349.375 253.098 351.466 cv
251.931 352.165 251.11 352.984 250.7 353.859 cv
251.129 354.728 251.931 355.562 253.098 356.221 cv
256.737 358.336 262.631 358.336 266.27 356.221 cv
267.439 355.562 268.261 354.728 268.651 353.859 cv
268.261 352.984 267.454 352.165 266.27 351.466 cv
cp
.341176 .215686 .0666667 rgb
f
266.27 348.632 mo
262.631 346.52 256.737 346.52 253.098 348.632 cv
250.649 350.062 249.858 352.062 250.7 353.859 cv
251.11 352.984 251.931 352.165 253.098 351.466 cv
256.737 349.375 262.631 349.375 266.27 351.466 cv
267.454 352.165 268.261 352.984 268.651 353.859 cv
269.513 352.062 268.712 350.062 266.27 348.632 cv
cp
.819608 .819608 .819608 rgb
f
259.846 332.092 mo
258.546 332.092 257.478 333.151 257.478 334.467 cv
257.478 357.663 li
259.879 358.102 262.179 357.645 262.179 357.645 cv
262.179 334.467 li
262.179 333.151 261.144 332.092 259.846 332.092 cv
cp
.580392 .305882 .223529 rgb
f
287.24 327.952 mo
287.24 341.833 274.966 353.088 259.825 353.088 cv
244.693 353.088 232.419 341.833 232.419 327.952 cv
232.419 314.072 244.693 302.822 259.825 302.822 cv
274.966 302.822 287.24 314.072 287.24 327.952 cv
cp
.529412 .631373 .372549 rgb
f
286.395 328.062 mo
286.395 341.456 274.548 352.312 259.951 352.312 cv
254.729 352.312 249.858 350.923 245.758 348.529 cv
238.39 344.221 290.172 355.929 274.001 307.52 cv
281.446 311.814 286.395 319.409 286.395 328.062 cv
cp
.47451 .6 .352941 rgb
f
231.641 227.661 mo
226.128 227.661 220.614 226.446 216.408 224.016 cv
207.995 219.161 207.995 211.285 216.408 206.431 cv
220.614 204.002 226.128 202.787 231.641 202.787 cv
237.154 202.787 242.667 204.002 246.872 206.431 cv
255.284 211.285 255.284 219.161 246.872 224.016 cv
242.667 226.446 237.154 227.661 231.641 227.661 cv
.698039 .698039 .698039 rgb
f
256.526 148.867 mo
259.356 148.356 li
261.606 146.818 li
262.109 144.138 li
260.131 143.234 li
255.258 146.066 li
256.526 148.867 li
cp
.403922 .196078 .215686 rgb
f
262.569 145.83 mo
264.594 146.557 li
264.594 146.557 267.281 148.68 267.453 149.321 cv
267.626 149.971 267.185 150.804 267.185 150.804 cv
267.185 150.804 267.828 152.826 269.192 154.908 cv
269.891 155.969 269.768 157.415 268.21 158.2 cv
266.65 158.989 263.903 158.163 262.632 156.997 cv
261.358 155.828 261.051 154.971 260.187 153.593 cv
259.323 152.215 258.211 149.141 258.211 149.141 cv
258.202 146.804 li
261.373 144.811 li
262.569 145.83 li
cp
.941176 .776471 .705882 rgb
f
255.873 146.481 mo
258.211 149.141 li
259.085 147.811 li
261.258 146.199 li
262.569 145.83 li
260.172 142.566 li
257.926 142.713 li
255.254 144.975 li
255.873 146.481 li
cp
.968627 .968627 .968627 rgb
f
239.912 105.774 mo
243.504 106.229 li
243.504 106.229 246.576 106.904 247.118 109.824 cv
247.66 112.746 250.894 130.176 250.894 130.176 cv
262.109 144.138 li
262.109 144.138 260.157 143.67 258.408 145.478 cv
256.658 147.283 256.526 148.867 256.526 148.867 cv
244.707 136.549 li
237.459 108.963 li
239.912 105.774 li
.529412 .321569 .231373 rgb
f
250.292 213.289 mo
252.379 214.614 250.585 217.436 250.325 217.839 cv
249.35 220.024 244.112 217.036 244.112 217.036 cv
244.112 217.036 241.205 215.089 239.655 214.309 cv
238.104 213.533 236.515 213.434 235.731 213.042 cv
233.745 212.041 233.254 211.403 233.254 210.82 cv
233.254 210.228 233.254 210.385 233.254 210.385 cv
240.265 210.944 li
240.265 210.944 249.323 212.674 250.292 213.289 cv
cp
.407843 .341176 .313726 rgb
f
222.014 210.55 mo
222.816 214.99 li
222.816 214.99 223.629 217.477 223.754 219.07 cv
223.88 220.659 223.146 222.529 219.959 222.641 cv
216.771 222.748 216.172 220.432 215.739 218.659 cv
215.305 216.888 215.7 211.499 215.7 211.499 cv
216.23 209.873 li
222.014 210.55 li
cp
f
241.237 205.94 mo
241.237 205.94 243.219 208.347 244.356 209.312 cv
245.492 210.274 249.323 212.142 250.292 212.758 cv
252.379 214.084 250.585 216.902 250.325 217.307 cv
249.35 219.493 244.112 216.505 244.112 216.505 cv
244.112 216.505 241.205 214.554 239.655 213.778 cv
238.104 212.999 236.515 212.904 235.731 212.506 cv
233.745 211.508 233.254 210.871 233.254 210.286 cv
233.254 209.7 233.254 207.403 233.254 207.403 cv
237.136 204.744 li
241.237 205.94 li
cp
.211765 .172549 .160784 rgb
f
229.599 157.92 mo
229.599 157.92 233.254 176.474 232.836 180.826 cv
232.524 184.066 232.21 183.863 232.114 188.354 cv
232.023 192.842 233.064 207.355 233.064 207.355 cv
233.064 207.355 233.871 209.345 237.876 209.078 cv
241.879 208.811 242.19 206.974 242.19 206.974 cv
242.19 206.974 242.447 185.502 242.998 180.473 cv
243.552 175.441 244.52 173.41 244.87 166.129 cv
245.22 158.848 244.803 153.941 244.803 153.941 cv
236.087 151.049 li
229.599 157.92 li
cp
.341176 .215686 .0666667 rgb
f
222.014 209.87 mo
222.816 214.309 li
222.816 214.309 223.629 216.795 223.754 218.388 cv
223.88 219.981 223.146 221.851 219.959 221.958 cv
216.771 222.068 216.172 219.754 215.739 217.981 cv
215.305 216.207 215.7 210.82 215.7 210.82 cv
216.23 209.195 li
222.014 209.87 li
cp
.211765 .172549 .160784 rgb
f
217.11 161.825 mo
216.856 170.361 217.922 177.755 217.127 181.128 cv
216.823 182.413 215.878 184.339 215.566 186.59 cv
214.073 197.412 214.847 210.212 214.847 210.212 cv
214.847 210.212 214.78 211.791 218.774 212.046 cv
223.022 212.31 223.17 210.212 223.17 210.212 cv
223.17 210.212 224.098 195.598 225.983 184.39 cv
226.512 181.257 228.698 178.869 230.932 160.977 cv
232.035 159.873 237.891 158.671 243.756 151.455 cv
243.752 151.115 243.737 148.351 243.737 148.351 cv
220.44 150.175 li
220.44 150.175 217.482 161.278 217.11 161.825 cv
cp
.419608 .266667 .0784314 rgb
f
226.378 103.195 mo
226.467 106.399 225.824 107.547 225.824 107.547 cv
225.235 109.806 li
226.381 114.203 li
229.08 116.513 li
233.085 116.491 li
234.816 116.202 li
237.228 113.961 li
237.475 111.743 li
236.955 107.306 li
232.63 102.822 li
227.7 102.422 li
227.7 102.422 226.653 103.175 226.378 103.195 cv
.780392 .643137 .584314 rgb
f
232.972 152.54 mo
232.972 152.54 237.297 152.385 240.333 149.667 cv
240.406 149.059 240.802 145.921 240.802 145.921 cv
231.612 147.622 li
231.348 150.341 li
232.972 152.54 li
cp
.129412 .101961 .101961 rgb
f
226.873 113.036 mo
230.938 115.41 li
234.453 115.576 li
236.145 113.442 li
235.907 109.418 li
237.744 109.407 li
242.075 119.251 li
242.075 119.251 240.799 146.441 240.802 147.037 cv
238.522 149.991 233.779 150.175 233.779 150.175 cv
229.908 150.197 li
224.1 114.746 li
225.104 113.328 li
226.873 113.036 li
.968627 .968627 .968627 rgb
f
234.781 109.421 mo
234.781 109.421 236.251 111.955 236.73 112.774 cv
239.425 118.022 239.542 128.119 239.542 128.119 cv
239.71 159.013 li
239.71 159.013 239.677 161.158 241.361 160.201 cv
243.047 159.24 244.543 158.387 244.543 158.387 cv
244.543 158.387 246.677 157.301 246.666 155.2 cv
246.653 153.101 246.498 124.761 246.488 123.161 cv
246.453 116.594 245.522 114.412 244.03 111.959 cv
242.537 109.503 239.429 107.474 239.429 107.474 cv
234.781 109.421 li
.6 .364706 .262745 rgb
f
234.453 115.576 mo
236.145 113.442 li
236.389 112.189 li
236.525 112.423 236.643 112.626 236.73 112.774 cv
236.984 113.269 237.216 113.808 237.426 114.378 cv
234.453 115.576 li
.67451 .67451 .67451 rgb
f
237.426 114.378 mo
237.216 113.808 236.984 113.269 236.73 112.774 cv
236.643 112.626 236.525 112.423 236.389 112.189 cv
236.651 110.839 li
238.569 109.942 li
240.139 113.284 li
237.426 114.378 li
.419608 .254902 .184314 rgb
f
237.821 111.512 mo
239.834 113.058 li
238.433 109.872 li
236.563 109.788 li
236.49 111.584 li
237.821 111.512 li
cp
.878431 .870588 .862745 rgb
f
235.211 110.239 mo
236.145 113.442 li
237.821 111.512 li
236.558 108.825 li
235.211 110.239 li
cp
.968627 .968627 .968627 rgb
f
217.639 112.875 mo
225.824 107.547 li
226.81 111.347 li
226.81 111.347 229.406 114.891 230.014 115.48 cv
233.181 119.324 233.675 129.7 233.675 129.7 cv
233.832 161.067 li
233.832 161.067 233.787 162.889 232.306 163.377 cv
225.912 165.473 221.802 164.847 220 163.984 cv
216.889 162.497 216.881 161.25 216.881 161.25 cv
217.756 143.377 li
216.702 128.951 li
217.639 112.875 li
.6 .364706 .262745 rgb
f
237.649 91.8667 mo
240.252 94.9678 li
240.252 94.9678 240.871 97.6576 240.876 98.5009 cv
240.883 99.3403 240.655 99.8959 240.655 99.8959 cv
240.655 99.8959 240.941 100.572 240.929 101.338 cv
240.918 102.107 240.839 102.385 240.769 103.752 cv
240.586 107.365 239.598 110.239 238.458 110.718 cv
237.312 111.194 236.148 111.227 235.403 110.926 cv
227.132 107.54 228.255 104.903 227.678 104.604 cv
226.326 103.902 225.937 102.542 225.937 102.542 cv
225.06 101.015 li
226.62 93.6334 li
232.917 90.2198 li
237.649 91.8667 li
cp
.941176 .776471 .705882 rgb
f
226.693 99.8587 mo
227.487 99.6373 228.6 101.114 228.538 102.173 cv
228.476 103.234 230.394 103.908 230.482 102.833 cv
230.573 101.756 230.827 99.4696 230.489 98.0456 cv
230.152 96.6147 228.786 95.1219 228.786 95.1219 cv
228.786 95.1219 232.338 97.5434 234.714 97.5325 cv
238.081 97.5144 240.036 95.5457 240.252 94.9678 cv
241.916 90.4593 231.932 85.4816 227.348 89.8856 cv
220.735 96.2321 225.937 102.542 225.937 102.542 cv
225.937 102.542 224.724 100.417 226.693 99.8587 cv
cp
.639216 .611765 .584314 rgb
f
195.429 147.512 mo
195.111 149.052 li
197.223 152.356 li
198.798 153.681 li
199.925 150.943 li
196.858 146.916 li
195.429 147.512 li
cp
.403922 .196078 .215686 rgb
f
193.108 149.124 mo
188.397 149.808 li
188.397 149.808 187.144 150.53 186.733 150.968 cv
186.321 151.404 186.526 152.094 186.526 152.094 cv
186.526 152.094 183.494 155.805 183.53 156.519 cv
183.567 157.233 186.223 160.249 190.504 158.515 cv
193.169 157.433 195.823 154.885 195.823 154.885 cv
195.823 154.885 196.326 154.403 196.425 153.696 cv
196.835 152.969 197.431 151.918 197.431 151.918 cv
195.436 148.615 li
193.108 149.124 li
cp
.941176 .776471 .705882 rgb
f
196.201 147.341 mo
193.108 149.124 li
193.108 149.124 194.684 149.09 195.794 150.765 cv
196.903 152.447 196.425 153.696 196.425 153.696 cv
199.565 152.094 li
199.693 149.833 li
197.776 146.912 li
196.201 147.341 li
cp
.968627 .968627 .968627 rgb
f
217.639 112.876 mo
217.075 113.188 214.135 114.8 214.135 114.8 cv
214.135 114.8 212.273 115.706 211.716 118.196 cv
211.16 120.683 209.832 126.617 209.832 126.617 cv
206.749 138.848 li
195.429 147.512 li
195.429 147.512 196.652 147.245 198.131 149.619 cv
199.609 151.993 198.798 153.681 198.798 153.681 cv
198.798 153.681 209.373 148.029 211.874 146.575 cv
214.371 145.119 214.857 142.894 214.857 142.894 cv
218.631 128.868 li
218.631 128.868 224.32 114.781 217.639 112.876 cv
cp
.529412 .321569 .231373 rgb
f
231.147 113.998 mo
234.453 115.576 li
234.453 115.576 230.856 116.235 229.736 114.737 cv
229.721 114.532 231.147 113.998 231.147 113.998 cv
.878431 .870588 .862745 rgb
f
229.741 114.711 mo
229.029 114.295 li
228.06 113.053 226.81 111.347 226.81 111.347 cv
226.453 109.971 li
228.297 113.03 li
231.147 113.998 li
231.147 113.998 229.832 114.491 229.741 114.711 cv
.545098 .447059 .407843 rgb
f
230.774 116.607 mo
230.54 116.19 230.287 115.811 230.014 115.48 cv
229.828 115.3 229.456 114.842 229.029 114.295 cv
229.741 114.711 li
229.738 114.72 229.736 114.729 229.736 114.737 cv
230.332 115.534 231.629 115.721 232.712 115.721 cv
233.665 115.721 234.453 115.576 234.453 115.576 cv
234.453 115.576 li
230.774 116.607 li
.67451 .67451 .67451 rgb
f
225.224 107.938 mo
225.224 107.934 225.224 107.932 225.224 107.932 cv
225.226 107.936 li
225.224 107.938 li
.698039 .698039 .698039 rgb
f
229.048 117.091 mo
229.048 117.091 226.849 114.84 226.023 112.833 cv
225.218 110.872 225.223 108.078 225.224 107.938 cv
225.226 107.936 li
226.453 109.971 li
226.81 111.347 li
226.81 111.347 228.06 113.053 229.029 114.295 cv
229.456 114.842 229.828 115.3 230.014 115.48 cv
230.287 115.811 230.54 116.19 230.774 116.607 cv
229.048 117.091 li
.419608 .254902 .184314 rgb
f
232.712 115.721 mo
231.629 115.721 230.332 115.534 229.736 114.737 cv
229.736 114.729 229.738 114.72 229.741 114.711 cv
229.832 114.491 231.147 113.998 231.147 113.998 cv
231.147 113.998 li
234.453 115.576 li
234.453 115.576 233.665 115.721 232.712 115.721 cv
.611765 .607843 .603922 rgb
f
232.58 115.285 mo
232.58 115.285 231.094 114.734 230.126 113.91 cv
230.017 113.994 229.441 114.425 229.611 114.716 cv
230.204 115.722 232.466 116.591 232.466 116.591 cv
232.994 116.105 li
232.58 115.285 li
cp
.529412 .0627451 .168627 rgb
f
235.648 116.962 mo
239.121 122.198 238.5 148.31 238.5 148.31 cv
236.701 151.049 li
234.808 149.384 li
236.379 126.272 234.216 117.457 234.216 117.457 cv
234.765 116.239 li
234.765 116.239 235.641 116.691 235.648 116.962 cv
cp
f
236.439 115.24 mo
236.848 113.796 236.738 112.76 236.738 112.76 cv
235.39 114.394 li
235.637 115.24 li
235.637 115.24 236.327 115.24 236.439 115.24 cv
cp
f
236.439 115.24 mo
235.648 116.962 li
234.216 117.457 li
232.466 116.591 li
232.58 115.285 li
234.453 115.576 li
235.39 114.394 li
236.439 115.24 li
cp
.431373 .0313726 .121569 rgb
f
229.088 116.691 mo
231.147 113.998 li
231.147 113.998 228.629 111.896 227.647 110.311 cv
226.664 108.726 226.126 106.574 226.126 106.574 cv
225.224 107.932 li
225.224 107.932 225.226 110.146 226.249 112.384 cv
227.268 114.62 229.088 116.691 229.088 116.691 cv
cp
.968627 .968627 .968627 rgb
f
183.27 218.791 mo
182.766 218.541 182.12 218.38 181.403 218.38 cv
148.931 218.38 li
148.931 197.158 li
148.931 196.25 147.65 195.508 146.073 195.508 cv
144.498 195.508 143.218 196.25 143.218 197.158 cv
143.218 218.38 li
110.748 218.38 li
109.915 218.38 109.171 218.592 108.651 218.92 cv
107.891 218.643 li
107.891 220.032 li
107.891 220.94 109.17 221.682 110.748 221.682 cv
143.218 221.682 li
143.218 242.904 li
143.218 243.816 144.498 244.555 146.073 244.555 cv
147.65 244.555 148.931 243.816 148.931 242.904 cv
148.931 221.682 li
181.403 221.682 li
182.977 221.682 184.258 220.94 184.258 220.032 cv
184.258 218.643 li
183.27 218.791 li
cp
.0392157 .0313726 .0313726 rgb
f
181.403 216.996 mo
148.931 216.996 li
148.931 195.771 li
148.931 194.861 147.65 194.123 146.073 194.123 cv
144.498 194.123 143.218 194.861 143.218 195.771 cv
143.218 216.996 li
110.748 216.996 li
109.17 216.996 107.891 217.733 107.891 218.643 cv
107.891 219.555 109.17 220.292 110.748 220.292 cv
143.218 220.292 li
143.218 241.517 li
143.218 242.429 144.498 243.164 146.073 243.164 cv
147.65 243.164 148.931 242.429 148.931 241.517 cv
148.931 220.292 li
181.403 220.292 li
182.977 220.292 184.258 219.555 184.258 218.643 cv
184.256 217.733 182.977 216.996 181.403 216.996 cv
cp
.341176 .286275 .262745 rgb
f
149.033 218.453 mo
149.033 217.237 li
143.112 217.237 li
143.112 218.453 li
143.112 218.887 143.404 219.325 143.98 219.659 cv
145.136 220.325 147.013 220.325 148.167 219.659 cv
148.746 219.325 149.033 218.887 149.033 218.453 cv
cp
.211765 .172549 .160784 rgb
f
148.167 218.446 mo
147.013 219.11 145.136 219.11 143.98 218.446 cv
142.826 217.773 142.826 216.693 143.98 216.027 cv
145.136 215.359 147.013 215.359 148.167 216.027 cv
149.324 216.693 149.324 217.773 148.167 218.446 cv
cp
.513726 .431373 .411765 rgb
f
148.415 217.142 mo
148.415 157.135 li
143.733 157.135 li
143.733 217.142 li
143.733 217.488 143.961 217.832 144.418 218.1 cv
145.333 218.626 146.816 218.626 147.731 218.1 cv
148.188 217.832 148.415 217.488 148.415 217.142 cv
cp
.211765 .172549 .160784 rgb
f
147.731 158.093 mo
146.816 158.621 145.333 158.621 144.418 158.093 cv
143.502 157.567 143.502 156.712 144.418 156.182 cv
145.333 155.651 146.816 155.651 147.731 156.182 cv
148.646 156.712 148.646 157.567 147.731 158.093 cv
cp
.341176 .286275 .262745 rgb
f
82.1941 118.748 mo
82.1941 202.22 li
83.7308 203.099 li
83.7308 119.625 li
83.6578 119.174 li
82.1941 118.748 li
cp
.407843 .341176 .313726 rgb
f
83.7308 119.625 mo
83.7308 203.099 li
203.732 133.814 li
203.732 50.3351 li
86.2746 116.917 li
83.7308 119.625 li
cp
.25098 .207843 .192157 rgb
f
202.865 130.732 mo
84.5975 199.019 li
84.5975 198.443 li
202.372 130.449 li
202.865 130.732 li
cp
.513726 .431373 .411765 rgb
f
202.372 130.449 mo
202.372 52.2199 li
202.865 51.9364 li
202.865 130.732 li
202.372 130.449 li
cp
.407843 .341176 .313726 rgb
f
202.372 52.2199 mo
202.372 130.449 li
84.5975 198.443 li
84.5975 120.217 li
202.372 52.2199 li
cp
.968627 .968627 .968627 rgb
f
82.1941 118.748 mo
202.198 49.46 li
203.732 50.3351 li
83.7308 119.625 li
82.1941 118.748 li
cp
.513726 .431373 .411765 rgb
f
187.713 127.98 mo
99.6092 178.894 li
99.6092 124.712 li
99.6092 124.322 99.2928 124.007 98.9048 124.007 cv
98.5168 124.007 98.2004 124.322 98.2004 124.712 cv
98.2004 180.068 li
98.2029 180.077 li
98.272 180.246 li
98.2939 180.42 li
98.3819 180.508 li
98.4148 180.57 li
98.4204 180.579 li
98.4782 180.603 li
98.6047 180.702 98.7479 180.772 98.9048 180.772 cv
99.0257 180.772 99.1468 180.742 99.257 180.677 cv
188.418 129.199 li
188.754 129.006 188.869 128.575 188.677 128.238 cv
188.476 127.899 188.041 127.784 187.713 127.98 cv
cp
.980392 .360784 .321569 rgb
f
117.407 122.746 mo
104.942 129.942 li
104.942 132.319 li
117.407 125.122 li
117.407 122.746 li
cp
f
117.407 127.414 mo
104.942 134.61 li
104.942 136.988 li
117.407 129.791 li
117.407 127.414 li
cp
f
112.244 135.062 mo
104.942 139.28 li
104.942 141.656 li
112.244 137.439 li
112.244 135.062 li
cp
f
102.94 173.523 mo
103.177 173.523 103.408 173.403 103.541 173.186 cv
114.938 154.565 li
129.651 155.733 li
130.001 155.775 130.286 155.553 130.381 155.239 cv
136.328 135.972 li
148.181 140.198 li
148.514 140.317 148.866 140.177 149.034 139.876 cv
167.042 107.39 li
167.042 115.761 li
167.042 116.15 167.357 116.465 167.746 116.465 cv
168.136 116.465 168.451 116.15 168.451 115.761 cv
168.451 104.666 li
168.436 104.629 li
168.426 104.466 168.376 104.308 168.258 104.183 cv
168.248 104.178 li
168.187 104.143 li
168.071 104.047 167.942 103.993 167.797 103.982 cv
167.746 103.962 li
167.645 104.004 li
167.441 104.032 li
157.579 108.773 li
157.228 108.941 157.081 109.362 157.25 109.712 cv
157.42 110.066 157.841 110.214 158.19 110.041 cv
166.058 106.259 li
148.091 138.671 li
136.108 134.399 li
135.925 134.334 135.727 134.346 135.556 134.432 cv
135.384 134.518 135.255 134.671 135.199 134.854 cv
129.201 154.285 li
114.619 153.128 li
114.351 153.107 114.1 153.236 113.962 153.462 cv
102.339 172.451 li
102.136 172.783 102.241 173.216 102.573 173.42 cv
102.687 173.49 102.813 173.523 102.94 173.523 cv
cp
f
190.969 108.825 mo
188.368 110.326 186.262 113.973 186.261 116.975 cv
186.262 119.977 188.368 121.194 190.967 119.693 cv
193.566 118.193 195.673 114.544 195.673 111.541 cv
195.673 108.54 193.566 107.324 190.969 108.825 cv
cp
f
190.969 91.9191 mo
188.368 93.4201 186.262 97.0673 186.261 100.069 cv
186.262 103.071 188.368 104.288 190.967 102.787 cv
193.566 101.287 195.673 97.6384 195.673 94.6348 cv
195.673 91.6342 193.566 90.4181 190.969 91.9191 cv
cp
f
190.967 85.8806 mo
193.566 84.381 195.673 80.7324 195.673 77.7288 cv
195.673 74.7282 193.566 73.5121 190.969 75.0131 cv
188.368 76.5141 186.262 80.1613 186.261 83.1635 cv
186.262 86.1654 188.368 87.3815 190.967 85.8806 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (1912.i109.028.P.m004.c33.meeting room isometric set-01.eps)
%%CreationDate: 3/27/2021 8:09 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBjVOso)Ja[rHun;L^OOs@J0k$$%sE.Jq3`M+W2Dcbq,IHIIMUNs8#djbk,EhUZ+kdbro,6Q/8OP]"4oQ\pA73UX?31/+rLn
%`]ksk/[K!@>/mFhg0alJRsS=!%,+dKa>Z`I>#=Z-Zl5d6h;2sI)m/g+B(JNtT%PWcdl57i]:`>Er12N>(/'un-b!TX'IqY+ctLse
%SW&c_(hfL[j]?<!71J02_qgNI)M*p#:59$>D0*IIgDamo(`<7As7"DnoT-0BHuprmITuI!rogr)phf&`L<lJ-cqJ>t&`"K3c!ma+
%WANnid7Qm+s5rRh9KkEdG,lW<SkNCH5'@\sB]<H4^BmH#CH43WSc@1"J)W-;MZD^c903%o([M*ScUPpu=JDF?K08ua6ifg$=>kSE
%a9m6##Ct%i+ITgC7^H-3?+0VW&`4W7[:Zi!$$_UBf?W*<-,[MOooH=2boR[+dOdQH4..DL0X?_&EI@c7`?2C%bTOar9(;RIk%RXC
%#;+%&\Q7mlnm@i(N.o7s_2$i]d!A]qFD.nQ+^[pl?DAK>M$S+o6FFm.U!S=>aqDb6ep5Uc/oFY#R&-(,VhO$Akgjp856C>T/j%a)
%#5.#rCED]&917&B=i8AF[V'5pbq_#7BV,4O%:sk'-;bkm_ff>0g]=\KI]IKqWNRk@2!MHL9?uC3<Q[%+]10dR58]$SVu6/(Ir_38
%G,H#'_ia9)al]2#7'u=;&\?i!QT#j@d(bQ)2Zam#Xda(c>^dXl_;A*'h58,E!@KN=<2!2[_ghXJL%rqT3N.,cbO&?*gYAd#2?*Hu
%I'26a%5P,>;Q%p:)(fLp:VY="$^l9H^7""^Ys`HUhbfeXZ-lkod3.E$$8UUFWlomH^XL]1oh/a@DEpIrlJI5/UT$($b,&hBTN\E5
%>8dDaC2gZQS\?NcS`1tn0^-/DeL!"DPK:VCE1*<kY:-&kQ):V<9"hD7L)!p`^Dj:J9N\^VD0JOr2-S\kT3tWV8!cN>FOAj?K`6"m
%#K=slD&GXQglA<Urer97WXDoIbVtI1C?<*.CgL(5R>k7VI??O-1oaF="29hB;SV7q:c$YG@[X[iqfRHcJ$6.CDhfUk7%FYP/ZL\,
%-i3B\ob%mLX'?eP*O5sS/9CH-OViPVEghk'O+,SR)q@Qm(:C;3%VXNp9%Dk`8%TG1P"J4j*o%kV-,5?$,f)]6V*EcDVX:H_-iG0/
%e?*hEG\o?R9rObRUPiS;?j_T6O5_MR'ACj`*G]A'jBe^!ile+KgSC'WTU@?$T//"ifA"!p(Sl6DkBs*//Y^no1#f7abks]5C7W(D
%+p,,$Vqk*5Jo$PVk$"lrDjf$BV-7a?FY7*5Q?R!eM8$ohc4?RB?d@u+2RecN5,(O4kK-'JMq+s]olm7f\JS5G?EAu]1]UZrEMAT+
%#V,!RSJ9_0"il<l)J&h=J]C!=NP^_j./Xo($Fu^kO/Ae&1i;iZkuo0'L]1H1M*;ia8i[&i-o<R3)QZph-M_>Fc<-=923e6R7-V[4
%W(`Y9luZI0A3nd>_.`+i=sM-%2*NpO7\eB=g>-K^0c:`H(HTQL>jC/!I]69D*i.at[IC\FW],r!'iG$%UXnRJn=cYo/Q$h1RmL/^
%7jE1\C^5Ypn?#>60?k9[;a.%^)2<]k'aCFeA8jY'BIH6_H61']7F8J5+k^N5Ck&@MS%.[lGj_NXD3]]i@<8@!\VK.9fX^=30#K44
%@DXaULGAMq_BrETNO0DCjU[?&Q'K`!=O%.aRFR^:2fZp_/A'"jiJ(NZf$(GshluIm>")?]X"PBVp<9raLs3AG]+dnXB%p%GD3r*m
%2Da`4VVTJ'S!eFUe*_Do<s-Sp.BQES2=]A.l#23gZs<^>WK<n(QaY7]\Y(H'3jQur/E<'RhQ^IF5W^PLAr!AX#,UYqe`0k"XmnQ.
%##CUedh/B:7TW)L?T#3LDUVB56iU3O1]:WKADh,@q.#k-%h"C*cZZWuWMc,j;R'ClTOnOqihBqP4Dbr"'o^;k1l<$7)AaI6lJKQ&
%.8V2bYZ#A7Zm8)^nX3Zs\?/j_F_b:$/uQKV/NbqD/&a'1#3Vtm?<M/NW#u*+XAU.C.4,n8)&,1.<%CNh4"f#r#h<CQ!.n[j>X@jr
%)X`N@NXMmb>)%o9f^fKj?o2oGnmaOcMY0RnPsC^%C]Cb&FG\d@Ipb<Z-Jhc8/rNuBGu:(5LP;5;P?H09h^a*-.?uD^/O!eH`HJN@
%DHD_gNT%N/feT373ahZn_q+TWPQb"Ka@n&<-=%VhZp/^p*LW*<"]G-j0$P(dJO3j&G#I6P%*o%dqY5#+V/_AQ\M<*RfW'$GC-a5l
%R_M^/3=XFH4/Yh-SM_9Y2`4f5CAms@2OK>dc"W9LS>&aK-6>SQUhp(!FZ.N*h$[EL!Jib]'3m8Lfbs@VSft#AL,8@KRFrJKljS.X
%cB*=+EJeRGX!q]Y`ge".e@:m_:GP!jSt-g-#>2=Dj4V!5fMJ'.)pcfh-ho7P`],>YkJe2!`LED;:UUZ[=3f+&Bl:rH(bq*rm6nS@
%3hm_iLhqZ"qb=Bk\F<*R;\LhCVW8.Jotas<5"h+](KNa[p$ueGWjl>1"dVd%ZC:p-h?joYD/uUm2X4h>f$ao<^)AHpV+KDOVTM7Q
%=F'SP'a420&j!iY=co!@`p3:jUDe5T>=!PBd43_&SiFr!B9V=9ZY-GIRHn\O3h*\*HFKqhFIf7+X_.R=Yq&JYQf?5kptn]GRk"A;
%<,u5kkG1?jW7#$%4Z,jb0tV/j'irM%e"mOYr0%4k4(23nn=.PnBfmrkTL:kdC[7T>km+1]W;\8Vdl(.+K5e1^@3bJI)&In`8>b^U
%81M?dM4VI2nX#BKrU77]Ar`344'n_P76"VL(P_lA1WR\_nM50ubT&8la32]s13:+P*&#&_:K)3D5'%jk*(W:SO<\JNhe3PKFS[)V
%/m$"f:".%m+9(2Hic.SfS"6c-c+X!G:KWbA@eZZGXJf/\r"er>M;qaAMGa:0``s8-QHq^BE:2d7W^t$7s(dH@-?`meoZ_@oZ8mW.
%j"-DCCj2C'D/A2j`h0U]-[p-,AT@Q(C/<R?q@bW4QGI:$_.d^8TKQ![]V\$X`]Wb%Ueef?YN_.Y&WaRC+&1LPl,t'/dL:EHCkoa3
%/<KoAq9:HXr'nCV>:)^YLY5N`kr<\V*c)0-c&uC,,3r!n5;:'G[^3=WA!@%SZa4i%_=1Yp3TZ[eNKFMK\LEUI;\Jks65Ys9W/9Uj
%lA94o8>@Jsa8`U>r`.-OZGkBt[F$C\kerb8C9_lkRLu2^ZWO5LI]R59<'/EeFLPUF\T+lZarnnI,F29fo.s9iSBIi2`k.A6BW=#k
%l&.m?.$bg%DdNJ'R:m`tkrR(mXJ&cnh1Ps,g_c_CXZ(T>3W19uXA*>&^V;F"h*IO,oUEjbIQU3Nn8O;'VUu)b\"tFe4ZkI.V5>Hm
%c;.uG\XD]*dc3:0[PLk(B8Z&/WI-X*.@TKh1S*`Z:FDUe+J7:LFo$L[ZQ%s]BD8$hPh?N:agr`V7H/Q87rB$Uc#/WhDNOlBJ,QQV
%P+1*`A^WNXBt?SogDjjqj(.]7`:&Vj$fodO2r6q5nui54V-e'!SCjIG8NpiEo4Na6c'aVW3f4lu&SJ4TWDfn4BN3Cs=JFYC^5/4"
%$VJIqenMT3eC3L:^+hZ[RS\cc\$f(rq*!8t&8L0D+]WG#FXis1YiE42]c<7uY#J?YQ7+mKjJM7JqQ-"B2"e6.%LT>r>F-+4RN$0.
%ji>$!N0G9F/]hcsC+_q]K,YuO\#FQJMVsj@.Ddm0r,9r[#Vm<.rg6.bL';M4:4,tS:;1SQGL]ldCb[Z@GPe7Q\"2X%R-[8K5L%ej
%s.&+]4DDI*+ihN!$LN2+AE&YG"5LIi*`-[MBZ3bQE8=<W%hgV2IV#^N7G.S9nfYn7_Aa^2ISS0_r"@GaBs-O@'^G3@Upju&X&*M)
%PKW,"m6`i&:q0Fd9gaXSiLMe\.8F@iiR_dLFc"OVQ6q<']l\KD`Q0kj=k:i2R;$<?m2;CQS'CTi(M4Ur%1Ze[#C-H4>K(pc/BnP2
%'?Kd\69*Yr9LkR5kJtp5dM$Q3rUarmRHrnjQkg0Wb>kTm7M=KE$g2.Kj@qZ)^1eaVIqSs`olq*6$_t?)3>bE'qLU)';CI/2TDE'k
%g.Mbs9k!+$BpsG=;]5+pAqhX=]M*J#Ep9$bI2pR%`A@f`s%]rlUl#%N:htGS+n03()lDBam"EpZc#^9j%uMfVdZo^?dU"C4<[g'^
%V!MNq6B1Y0F3Z.*N=1_Tp$^n$'WBABgF9R/m`;-`p]Q(0`QBWq9&3[[>"iGY-OPo1>.Q-s^d]78Y;&3l.eRh$<iN">mFVc76*ZVL
%[>:'Q'>9s-[2QG0!h5+-$PO^r[@$);5d=RsF=KX:Wl,O-MN/(F1n')T>M/f\`aUcVampkqO$DY/.Fp#W<0HXp3FZn&7BNONE(FQi
%9tJG#b@(,.<p]Ih:(9=QNIS*MT=X/TdkSe9fp7UF[nT`80u[q^ph+:g.IJBbpEOmG7_dX4VV.F8=4^[aj(@#s>RD+ff%b)d%:=0Y
%9!0MlR\P`"6JIOOhQTD)s$KF1"USAOEi#8f+<W3p/mYtl\\`]9;lu9KQkahHd2@pEo:f*!S>S?`Qq>#-Q[I(PntdJF9_-FRhb<T8
%^?!`pD/M1_r*:bLH88'X)].8,6foR`pZt^UE*VTX)/7GhPK74'Gq;i:OX;",a7t`-q>oga[NP]#>u`P^L#1b!-c/"YIc4HXBgQU4
%>ZjVlL>\$td[R)(RV"M+Ub//tZ1\k`Tdb7eF;hGYV86T+AEqJG26-,dY,$HJ[b^bAmO;RADJVr@m)e[bs((kG4Y8^AY5:8n4d.3e
%QY]Ah+`f!dDUu3pBM>qt9]ggS2#`sGNW5#Ea#Ia3B!57][Zr!Q9jO-!l7&0H>AY/A3IqfNp)p8b_sB\7CV>T`H]W:O^Wg)c*lg0!
%H]dn(DN6['#l^6EK,YL'0mecK#1(=3*Q9QNkZT2Orb)k\/4%d]DAoiXN="/k;d?l(Kka;7`\iH'KZuhAAg&,F^ZM^IAE,$)[(de9
%VUI)`[$d?5WtR9nD<brFl+4K8:=n;2h+iOH`5eOH6"7\U:^22%VBI>SbbHoaB\[E>/B'L+R7H:l)(@LV.8>Xh_j^^g7N*7Y*fUK`
%BkJKH8JU8AO2fD=EDnt<g,+(3;B^*k4;q.[MdgEV;&D(M-*gA2ij3LA*Y-4&frA<O](>R=4<9WcIs"5W869/Ai*%AI&iDj2KVliI
%9O[#;\@9/KqH5@$X%gg%;L_;cS\;'X=gpK@ah3IS9$M8.c0W-3]f3:lB(k)rDXXDu=_@Ba1t[.RpmCZ;=aVY"F_;KIA6F:/VJKl6
%bm_=S_)F1FqA7?!i(IK'l-j249j,('Bo#kd2'k2uk-ILRH.[E;D-8W?)1TtMAH.]mH.*IIWFo._h9Xpe)Q,Wb7XLVH\amdMjN"6V
%roD6mP:";HafR?4@hUN8d[8OJ0#hM?CLVru$>o[[8?Xkk9`3V3#++#k/<@gs/FFrL7QX>>TA1-+Q/Xq'`Z:eMR@oD'_,GapQthtX
%oGpCoA#RV31WPo"1PMlUo:f?j#M#TB)O/\'?i=!E`IWdnc4bXJ^]#]m',)g4fA)aa2@VDT^FN$4i(g*j9R\Je'`?HUqn-,)Y1bjZ
%Rs_'gX;4Gp/Z<meMTm*Njj]1;>`,;bRpkQWYb>uor7*R]J!n$3HK*suV"nL=D*':.aYPpPRnfECo7m$T2t6t:hGlmOZK9hT$AZHW
%&IE05RJbTtAr0<p8s\V!hgZeLfqbaYZW7Y82hg/]XAZ0tMqG"hDiUl`H;I:t'9%%\dU".mhAN0R\<+"OB`[KR6^mppU=?^"-s$@#
%r^_SI8aK3WPu>&KP2em.hPd>S3Q4mq>O,U87^(gI(*8q`Rpq[YKC`%T?^;Ycg.>^"2:<=5NJZN%c<?32)WAoZ`e?o5@+.3VJgm$:
%S]^\+b9\W!0!%t7$n?"#k:[[/dJ,$2O4CNaegn.-6>Z0fNF3)+ZBh@:&g[uBPAf5MJSh_MbJ-(EMgGdU;+f:OM5$p;]AC%oPVb0Q
%nNqK#6W$`uPEW`"b]9[Wr:Vq)7Ch*V.&CX877i-U`,A:I+h:N##a6?gP/>/*`M3:bP;6.C.&Eo'7FD,?@StRti8ef;ZWNHKO`.(1
%MFC*hbiGsf=Y.]\Q"F3lc+Afe25qAF%?]R-qr+VUiHMVrQmG,pEte(67kr:$9N>+\:=s14,!e.8CNKO*"&(Xn7n_m1]IEYsK%BFf
%HW/DT9^;eC5F6P*-KonSd%u!3HeJX/$51Pch+Z2?"<@f[\_N4JSSZj"OhbIo%FE4T7f@j@ktj`?9+nsi?uYe.^]*i!akqC']7Xjb
%IdV8\=idU`j#"hn[(>X_b[.P\4=?9&h^[(l7t$d;hej41e]PF1(0U:>dAS\HcYhuV^t6a;RB.A>+d!bi+$a\apjg2b&`PnImgUeB
%CE!5jItmIU?iTVDnQi<J3U6O@#&RNQcg-S*lhhQb`;BjLLLRaHq*^a*0P+QF8!R8a)FT:dbW^K/B+F_*D%VjsqN5o;boiO^NpAcu
%aWE@W+I'1GVE:*Fp,7[5HMH)&r:Q"4I3mP'7#9&nk//Pu;uV]h4N(Er50>^HK-HulIT79;#:U@_7T8KC=:I<^5bN+9RXX&`+$R8j
%rm@Ref!Pq_D:*;!U[.4)[uGkU4qe*Ni7n9`Wp)&4oq-jLrS*.5LrT:4PIk%5G7kSC:F]6&(O:k5"b1giUNY@iU8e0j8s(1YYTDku
%o8QWa8#Q/lLH'#9A2sdChsb8f7j<Jh>n-RT\Fc]9Oo56gR^o;%L@#Xq-Wf`AF!pSRlKsf(`E%>.j;psJn\n%Q-lPfAq<*_b<N982
%<3Fq'>m;P(B-'WHFE&K94KWROpX+a3<0hdk.-RJ;h81C7MdIi1r'!u\<2J_PdZL8%4A?EcMIE<Kl*3%]cO5Gln*.dmb"`/Y"4'lS
%h.b@c5lCRX(0tVjTr2<0V0//s;u_i"F#<_/aM0m0kuu6sZbIl<^MeWJDc\Hckn2s1C"c_5,6Mu^0ITu*^cU'k:-=^7)5m#bV]345
%eU29\HKh#DifPW"4,k=JgWFi6D2cDOAB:#Q_h;F*U`6b+FY%%p`/Sl%nM#Dc#\#'/2B%RUn2Y?-8CuK'c8tj)8rC7g4IH+?';JU4
%]G-r@IN3)XoEs=?-=Rt&TMmD*_K?<?nUGm>GKS?LP)AFedL=R@V7KM5JhhT@[F2SQR%>`sR+hr'1RlA[pL=#uo&%1SOk\:VbX!am
%#HdG\juE.6PM%Ee3lTQ?[F4luLD(JbS3Ea>FdndcQ'ab6#;+=u-_m&pd9q#WIV(6H?XsY)m7u$.r0O2@15A0-;=-gRF?LB4]:EQC
%1TH?#7JQQeDRW_4mhX6%bX&#WD2)i3=!!cu-JKq-.p6#tP+Y^Jg6*T-$&@+`QHSf["YFN/p15nY=KSrWC#3_c3q<.1Fu$UGV\*>T
%oJXO!KhRT=X>`b<%AM!jWt?L3Uhk`5<U9i+;P`!8csPMQ1lG(s\TWZ?i5A$k%GhdE?2[I%eN%I\>NJNbdDZuUg5L:%:s*oa`Ho.!
%CuK7T%C&g.VH'c<d\&/LfX>K)mo?8$K-9gue\WP8<q%![E%CJmNGLL*g96_6!p6nlmTQLU=INaPl5bGc'tguV)4kPUVOf?6@S<Ok
%g=:&l6Qrk%JgU#Zq;TAOSGVmE)un.jf7.l:_EG7:EXHa9l\uC\7Jlb?&X"MH"5DAGBsDt$1qV<3J/-<!l+#,?`Dc?N6R[3Ef<uJ1
%3!`^TAl(ggR;HE.'/$oi:M6%;gu,:pARggj]kp1G8B[Ml&rdYFnsa2O,T$b#Fd/W>HDcq"j^&AIqn2?0NNDE]]?KXV]%(ODU0c<I
%Li2kP:_lVP%nAqYBsC%UG8mAf'k4Vr"U;"G;/,%8TXBtZPZ>I_L8Bm4;\Gk]Bf.Lf"ijNn?Z$$4p1:^h*@.s1Hk35%)D5#?9j0:@
%MYogljrF:7<s`HM>,0'REp5[C*mG64(AS#Ohqk6]Bnj6)j*T-fid;t/Ru'p5NE/%f&"&0snr#sbq0aY3G%hdR\`@u*"0f/mrTKpF
%:J`?,4:<?"laF+TksgE9Jo(WETQm_JQ5aH)I`IpXZIUY*Ka,E%GSBQ',nk^kRB;+:TC5HQ9@MWkn&`/P.FfC-,\8HJjph-\ZrgKR
%p4@=]>>mT^[#iX4Qn0I='4i%k'?9mn@K"2-V92Eci[-X-;f_/3JlDQhm`X^4PZTQlY[YYXLiMH,7?eCq_=DBXmMik+Sg_5.bMAqM
%-)NO_[8;/`\O;o9kp6[t-<RS/&;l<2.7kjjm%rA`!>)]D*8>h`?Q5nGDPUC:L3c,;?;0eD)IZ4cS'HX-U"<M7P_pk^iUB_sP.7W;
%d,;EmX,#HDX>E_017'6.KkQIaVMUBG"d@KX_SAcmei;KbT/ACH?8IJc_iR!_FD=68oHE@L>/#8g]?Hj58SFWbAVCR8l>K&5f8?]R
%G$k&2"A1T0D$M?S==&e?i($^9`1N7hBKCBog56uOG3B<,'9?+68>)_1::21fI_`m"(?V7j[6)oT=bIIX`'nJr\6Tf8jV5o0MR(KI
%NNCWE4oHdtjcQ[&Z_+bgTS[SF>I*$adm8[u^S)k8gKDuB37Ci-Fea8KT(Rl)9K4:&EuL=De7];%X/'1$/(nVn;iO_?DCIr_HF0Do
%JpZ[;&&EFlLd\XenNK!_K,+3kXhL-n&I#ZuGZ:TuL+!mnZJ*k@G/Y<`"$?SjQL:;oiMB!W?Sp>qWQ[ghf3>D=O16$rZQnOJ3G;L>
%l`0Jk>U;j8V0D@M2S!AYXAU&bm"Jtf$ZS.(4=B<e+6@5fMkrS28?#Ia*Mrot``78VBV`Vp/lN+$)8dIs]N*68>#7_I8V'(0j;BB^
%(QI!qA".RJ1"I75C_*9#oBb!i-jtaljgm@W(h^F9=rUW6qZomMV.R.-isL>b$C0oD/%M&TFXkpp'5.Z;1hG3H1BfdL_5e.*]eQJ'
%^q<RLUKAJ?DHF+t(D@a<Z8A^490D+2FQ,`R2=."U54'67.XRu='taFC6D[_X3N<M[V$a1iUWUD$-F8'Kaq4NgolOAR[BH%7Us_#=
%[n;nQW-F:OXDV,hZn5i7.8%W*8PrS1ae3cu<psSBeIh@J'Pb)%)YGV7+3M"'VpUqi#L-;=d#G^`"-o94Bt@-$YF>*,[N:qTUQiti
%9>QK4NO_3(LJX'jTDFApW]Jia7L0KiF&]Al;'\d[\;FH<'m/B6WRLWOH44VnVjKP:pA`Uc-CmK.LVK`hX3ZN.:W]9(kC_!<5m??S
%WAk=lc#$]^37LD3V%)nY?K$Dc-4TMh,ob+W<>('[[',pI/lD%CU$ba6G.5T[p@h"P'1<3C`fQlA'i6<Kr7TB6b,2"KWNN+3Vu1h-
%O[T/.:iaY,DPu-M\Carn?Fl"573UnSBjY`DF4h`WlD'8s1ic2G<Df7CC_SsA0c0Pm%s+V?q)H-1[%G_Ta)[N*'gpHONsijaar77@
%WhMLe18ti/_b0kWG35*DLUC+YEHq_%Q'.-P7:_r9I0I0cHm\*GQB%GnD@,J=gc(cnFR[`I1cd+8&,+']X>HtDY/`-c/)H%RrNb/F
%d*h=44$=hGWF'6K9<Sh.4nIt/K/SY\8GLNS<FH.;LH4L#nj^ki^&Um)dHh/5=jkXlXDs]^(LO-_44i*DF1IlOK+<K[O%>;rOZft^
%;$e\945/KCna&A8WQ^](k,]s-pHC]EHh6J#C@U]N1\9K&d`-TK]6:H"?GH07E,0Imrar!oD;TJB4l(/HXK91jI_9;V=kWauIrE$N
%/\-QeA'^Xn/aJFo[I[bskDS'Mp!qCA#O?/`c1ZJ\\ZniaXKV'KC5&LUFZ.O;^>*"$Z\"ssb+m"RHo??O]W\NpniQ-`bnoMCh"TQo
%r7=^`f));_>ck9c-GJ\K4FHMNkn`j@h)?9[X7tLJ2u,8sg$-<'m^iCcqtfE0O1F;qm-EWDWo[8FXfl"G5-;#qZaGSa`OTkpI_0ts
%h(ZML?V^=,q6Nk8gl:TFp$KoT`^OP3_L8U8..ZJ+^814H>@2_ts,C]J#2S/6I/^ZBTC.-Nn!&$6D(Ks>n)fXrmaT2uhA4:?lGiib
%s0/k1Z<tmq?<ASUCUlIshSY<hMdIO.Dr,tDfF5>%*l!/Ik@1hu.UM+5jl+eDmY0k.f9V>4X)dsX9',ZNnj[ciao/'e_iNX/ma8^d
%5[\#Kp">$jh)MI=5HX,6V>IZUO7lV@h:fn>("Z`/T:*5jBh*Yt\Y;SgQL`AUYDI;frP3hkC?:`'k&QS2=l4Q_^U+ho<8E1q^u=,;
%h"p0Yg7:0,MnY2*6M[/_cCN#DB&iL#[FaLN/&phE:YbBuqAc4$fQhE@e+1>#j1MIG<0&sj(RuenTWcPNRf;Qs?@KGpG->lNiVOD%
%EU^q[DM=!F2qmN`*K0rBppdOT5HVWPH7m?Y/oH(LXVpSd*TH"dg;Csl[hau$POh;MTf8%`<m+iWI-0+@7SN4:DqJJW<,1Gr1k\Zp
%&G5cgLF<m>%'skhjA2/uq4R])Eo&lb9=a*\f8'1.jlbO0MT,I:2k8>u0@ufX:EJ\Z01qej_;3OGmas50!]g#(]/rukr-mu!QRCUF
%8qM=%h"ph%DU#4o>>N..He6?2*Gq(0Uss:%iSifYX)Gp-Tk3M$lU66tHGb(+XK^Pr?+dIDp>.pj=n:oObFof$YkW14iIC9lAeK6O
%oHC3PjJ"*gB(b,XmX-0beMjjJp'UcNegdDfa3JC/IJ(*k4*UV(e*X&FcYP),%qkoZlP<mKOD3UXQ!>uA\qb`2R(q6XfXu/5hf#'#
%CCfu%X0nl0#EMo\OU-h4jOi;6SNPAhkLPs5'X2,?BCe2lh4g,8@TL1;Dmec=rQcF0L!?r:Su+_:/Jg=g[<F/n#L(*Z7b)eV->qW'
%looa1nauV%URjbJ2`-P&5JMV,(JnHlf-"m'm;1lYUOTqij\#/ZZ*W9!IHp\?=039%1g/WX_eQO+XuIsnQTcB+$[6cc`d"Ti/,*ec
%V@OKYA:"h/4a[2[m.L9$aY]3qS_JRsh)Qq9E^sK.jd.KYjpRo7ZhmOhh!n_2I/Wa.:9h%b]mNK/X?G(A5"66#DCmbQ(km=^b$1>0
%Y.muJr,sa[JJUqd.)bbk&,19><^+*e401=^W9%>$T9:V8Dn1W>&$ib/muH\_N?Zcf![m<Sm_/SDh/C>[@LII#07T;"s#I>1*#8l/
%$b%`*&JDnPJ<lLLg@K1&![r#UfQi_H%qo2'DJUmGQQ?_^?bW3[rq>cta,_4(^WdcNY1GT_Q'Z&)G7-j"o?X$n>q2pmfaI^0@rqXB
%0$5:)Xj:i`T4qHPf8"UEY!.!bY$((o:RBmiVsb,citZS,UW;N1>Bb/`oL''^$Vt#Sl/:2r\GJ/0hsq;UI_L5$h#P+0Io%Gn&D,E-
%58Q7HCUl<Pg[TC_JH"&Hr)b8t;SbBI2%K-9-+3;h;r?Hebu(lM)uARl-G!ML/$F!C%?55n(uSD31AW9-i;ngE*UQ%>.DAoShd8mc
%O1@Wbp6]&O;b,V1o^*P5Tl*]b$,l\(O:L!Q+9BmP(u6/4OdFj_EUr(;JHl'RoT'K'.(kQ]p1#R@KO![afPg7"\&Pe[^KiJ[8!J??
%p6C+N&>:.cggSu&]&&<ki,NdsW7i/4PB-FY%,tuQ?B6/Je&OW0#M2+pMhEY.KATMd0[mZ3Xl(K6N15c'k6;4#n3"g@8*C/,#a?Mc
%jG(O6M^I&NDFAUg-+C_P65Ft@,\g^C`g+-OGRq;tgfL5]@'(98!Ltcs+*6],G\Mla0]+;%#r<d&-">Q"=sNP=M9.;OTTCGi'?3%A
%=b122lmquXa!?M2X<EB21:3]#(b4O^i?T7pruj($MjRp9&j&l7$]#r7ii6[s4\eO'Xe=U&fahjh$=g:F9LG\]R%)oSrm!KKhoml7
%EAoTW73(ibLI6*WSW@JEN6)6-$CN5sHlVagi8BED7^(aP,]B^R!)b4MSl\Kn=c'&;l,E&`X=F3*PQD6=?0?A(N-:Pk-L].A7e^us
%gu6r^F&IR]2g]_Th!s^nF_X@[gn*7a+c`ei*CYPE^78CXS90c5XKQ@D[iTG#IettWC7"A..Lupu7<duRm*qbG`X!TCP_=gL/ZJVX
%?Tm:cmZWO>n6qFO8)<[=gsu/2Kq*F6pDM^;8X(:%6/shoC$sR#igH']roBQFG-c0$j::KGYB!.(S_DZ4h<"In[oM^jYjTgp6S%A>
%+Z:0+%m(kn^ZG/J2\%#XYa1pk=j9bYPIN(LOh4eCFiY?7a(L2'B<;DG#.9T"T75M94b*(o]c>e-\]aC6IaF6-lE7HZR`3<`AEdV0
%=ZXoG+q6`<V1[?(pXQ2"H2d/Aqe3N\n:A)kleA;@%8>gULE>K8'rZfaQHFF[)-%e,quUeXqh=t"2^b)[YKl_(=`*Ss2":f3dH'g6
%/5Q#EgqWoV@RX&WgdfmjrN6$U*CS_Z22-M"%cY#jB*s?9ORjUc@m&&/0.f9u4hNTnIj'5\s8M0"_fqTnQ,eqdjEqQ1?kgVV8f1?j
%ZiICcfR?UmmbfNi!VL3aJ^\+10YV'oAL,+qU2Kh0TR2_'a2^j3i+_k,ConsW'kL#9bM`1CTi?JCpi>rXcYpR>cSdBl[LC56A)#`'
%D>3.oKo^kfWj().0Crh[*jX:mh4VD,Q6KPbfF<6P_*5'Y]Asl4T)D=+/U[Qii(d^]hYgp-q)+49?u>H%nd!Jmm699LH*C&r]W8`-
%IYmL)\_P@E8$<<rKlZrWbk$g@)Ar=VH[;@P5!No([XG?k`-?cWBCk-CXd+[&[nfacrq_kU3Qs\E\D2F%G0%L&]QdN9,l5/nBfruG
%?\Ah.\M1CUEil?MX*F`7^E;mCq3eC^):dL=Q!K.q\=%d@nB("U\$1WtGCB/[]A$ld?JJ04L#"P/ZsEZ'F7Z>AXM;@.a7Je6^2!jZ
%]JK)sPDaUNBA.i,ns-e[%C\BBgtk)+lDNsKYO6$<+.ltCDm,aT&&.1d?PVI,,?W](WG7-JlR%VTku&e-H^ug=[EplP-C=D(>dTI?
%VI6X+>KLKi.um`OL6K695IH*<GT!il)7Yip_-eR]Ijcif<*'HQqn;Ohn[hR-qO>.73<<KboM6n&mOB`4A,#%.,jDXQ5'pC<>$lRF
%oeP7-Nh+pYqPJ@P&dp<L^GRM:jgV;V+\D,I\'OV6nG*Hjg6Mirc9IKOoZ\U"S%l4*gOF#eFHIBj`dZNe:UE<%D`rL+S14HXR/=Zn
%cJ:S>4Li")hL)B*Sio5"?XJ(_Qr@0%>CpfTpntcYY:[J0SoWl6AhM8@o33NQ;kc:"^R>\%qn&q;3-TOkh#M9PT-*OXNecQ,Y3m@[
%k4ds)eqmH-PWq7TT5?/<p:<824niBcFAQ9,dA!FXomH1jUoT""D(iYKSNG\6a("[$Io,%lfB1[h97AgDE4Gg[V=N;$UPXKl5ZN*J
%k4E>TQtH'nkq!o`'i%d_Q@!s9*e16<1nWY,dCqam"n?f(Z>RrLD4YD5Vlpm_N+Ud*^ADcH0]2@9HG7a%GB]"UJS;g;LgM]M<,:2*
%ccqBkpWhfarHIS.9jd?Z:);r3Y4o6li9DL:jmqZFSg%Y"]O/fsrqlSHc+pm6*Tr@W7b,-2Bu]/Ab509[bGsVG.;\j*M%<f3Q/6t_
%`KT3&*?MD6lX:@Pc(4Q?jj@C]IAJW!FIkI1[l7Z1^4$]/Nfl!F.]![OS^QK5L@rRMoZdBu41AlNd9[UNT0:m#T7/>5Uim`g],tU@
%h4?^/cgU#Ao&k3\=mem<]1I<Hj[!6hB0cWYpL.ptmbA,9Hu81kq0b&EfHLO^*T+JU<&hF0&!f$qq=*FqkHCEh4&Yq^^YRR(h0:Wg
%ZM2`DO?5Y?G:UK_:NiIUGGU?po#@gD*YC<6b9)Knb0rG+c.j[E+4k_n(@mC(G3&<1j7P'H>K8bU5<S\B0,lc8F$gmGKN3.EKrq$S
%>A@TG^3CWsD3%@GURk_nY<?d;fr3K0HNVt-2D4HBSo%TuDSLMokbE9M&?ZY8"M.M29/JJtrO>_<gj)2oa]:c7JBiHCqr9L-CZf@K
%Rs2r$GjiZ^XQ\NC(YI:ShAp]YcemtuKuf=H^F89g21I>8[WrM^qj6KN1_q:Gn`@VgQ>CXW,@p8\(QGULe,3k/r98jVSA4rt[8t@K
%laPQJgVYst5.U5nF89>Fq=D"*TthO!O-U,WqUp7)-$OSqSC0@fZk4924-'`Z`uE</e)o,X@WehL)H@:`Ld7RB+]u)Hk<$.3H^<(5
%@e\ed@9r2hd)=O3$b%0.l=B(l64MhF'kDce`V@B02&iuP*m?8C"4TJW5DKJalZ3.2k%\=RVj?p-5/+O*a<0ah($:r#adG*(q7=-,
%hMN,G</h#Ja/Tpt:$16+4.A8,pN1h#.D%:,)\fil%A3Ab.^EXZYI$BX3GX*(e^f-FoFh@bSiF\(G\QQapH/tnLmQs-l/lZ'_cSl[
%ju3&=`VjF\(tR#SNJm`?Cg'79SQrQc9D47^T&BV3(uYQ=BOJQ5I.:nI,7KXDm8"enc"0s*hq9T/+r4:qb:8B3I!+$7o%Eu"22-;t
%4,]*8K7uaL<$Q1=/<0<P+/,hAId+7&<cjqH8fEBiGJt5jYe#(+J>qG@O#P6pL&'od^,jN_Y:i,s_&$*PDGQa7_PT/[gZKN`gYQ"#
%JQdQWPY3afDn)8qk$$/<ICXih46jO8qDAhrQ/AQ@g9c]Re6iuV/uqb+bMJaR>V"H6=ZbEo/+;=44QiE4iVAJpdai-mku(<fB\gTq
%O70dXZrR%0F*j\UnD8[Y4&SV@]Qd)u>uAHOHCB^m+1g]((E:TO$-hS\#N&&shg(ndd]]eMD[Z<Nc!\HSDNHS>#.\3SF-51h8)cA;
%<SdHHojBqt;gsSQO83G[o*(ZRmYJ3R>d[[DNG5G7Ds(0Rog$36GE?hq2;HcR1:V6Wp[Z-l#nhQj<7=k+r2eZ#G!9`G%9aXF[ZleR
%?@4s((;>/SC>^p)$5IfhEmpdk,HaMln;8%#R+!ZPd!"r&5(@aZH,o/3mlW(i<3sb?2jM^Ik;4FN#O]atLIX>^HIt;<k!IlL-,D(n
%XS_`2^Ad7T%$-pfh<lC@Jon\sinO/"_V<i@kKc>?b6MgTD^Qn!Ma`!d=d(,Qa(8oFFT5\$\jCuEifaE:oP*9[o4b2.IQoeeSh\57
%>%f`4cu-P2FQ$)PMqd"T^#P/XVoQ>,q/cF>-'i)H"RAoF,1.^4QCO6mSe4.hh7WNep8sE<=DtA/[C_Eo/(&@Nl2G,*Zrt&c5H$-"
%gbj.'fQr%UZNV*M?(,$`Lt;Q&!S^U/k:L7`_f;t6K\0eti4XL8jlpe/hp(\*lUt,CmP!Z0p"UVUW5f8bQ`Fmp;J/S.a1fi?P'9FP
%j)Q-2P%aUOm1"E9Ye3tBae()X;gs(@8!7#<moAe[Z2;Lcr,(CJjph%;JC5D2f64V=5Af2Ml:*?hfk#KWLA\;C2'4s(T=taEC"YXu
%])D&mq1Sua[#Ba$?A=F./gHpFO%>uu(%+&`QVX68:@s2Bp@E2AWkJFQ^&tNAF']lOQYFRU=tIn^o42.A4C$)p]61"D(N*^VFC'GY
%bOHoVR+labL,Ig>gj=NWc_!'Y4_.(35f^?ur#6\^b/`8mD"D`9q>1=K_#am_\A)&/hYum/5;eLMF7IpuiFMKO8ts5%U#W7Eh`e3O
%nn%FjU2V2EqV9?22O_p7Y48X-N$+Gbr27]L43Dq>U1!(cnb$4IJ&9ie8W*%EiVrOUi@4JiaDN10lHS.$rn51N[b>l3F*F[,\la\e
%o0gH1\*mc!:S>\/,ol!<h"B4D9ASCnVL(XqBpl'ljX%icj;PS%&._SoABs@=f2k2Mg2Q@>a*Ra6q'RD2<*`i@>9g[u:o8qK=X/S5
%.dC'nhY(hCNkENk]&t<(_f;8JcCO!lGOLNn>>#pY(\Mh=Y(-GJ7H8fR6jOb.B'%U!qcaRQPeQ7e]1[;'o'KYN%s5)nC:D;%G]gS,
%GO(c:rnl`qH8-9\R-.^7M&==j!5TY)4K'$j5k._!Pk,u?Wmr_/@q`5)8d=V2[iG^m@j:L7+C@)gDH1FuM"OP@p7QXOlm/`>oZ-Z[
%A]$>?WQT1X=7340`F3_g%X:fHD-1mYL@45.=5MCsN8maFmkB6=&[[0aYn^e1(I:OIO3Ft`%[&r`1Oia7oh<!m*RdidB/!*h>VDU!
%6jRF_D1!3)V+-;RZC+d2DO>m]7D2+,58r?OP8GUpW+U^&"lJf'7&/qa8j-+PMg?7p72@]/ER[7E:dUs2^YbN[E*e'(VHO],INTq3
%Z.Z3Z8g6u+)l_V,^cV3Ohp73"'0XP<Lk8nNFlP"o:o0`Ieh</(4Ze<UZ!9P+C:Vio1e1dV#UcHFCj4_=VlqVeh^N/BA9Y%YGr7Z7
%)dQfH0a`@MF<bceBM_i!/1I<,'I>tS";Xp&??o;jS@e;ST-<Um#`^r7P&O9#pY]6q@DdGOHD>T0C=Iht9qKG3g7OemMV^b8.ATV9
%G7I#?4G;$HK=EDDJMZf,aj4NG)(q4c<4oL@[`!4>/2fphY"Ees`\<.+,bF.c$p1s-S3(RU=+ge7Q\tQpn&?-!OsFuFDR;$+nX!k_
%\PfJJ>3tSkIfun1/2:5PgLbh#l$9+3:5.qUX8(]^7'DoV6mSU)RBu%B8>Jl4X/1R/ZHYkPbZ@_eb/A.^Zc\QT)U^"W)16dF0X:Hi
%L[u1t;C6'FL67&(0Zk(TP)ZCh%I>7t,@(MaOV8erYFo9/8N(PO'g+D@?>6TXng=-3-:oAnBJUi(_*gj#XH?^h=R3r)j:>[i6ZF":
%LJm*oek/Qn00'MDjP%:L?)cY:A/:j5EL`D98<#,uG[7]uY`o>FLT<CR)]]YT_=9t'G$6P"WbKs_\QFlWgj1DmDplap'$':FDo3WM
%',;&-$URp4\OYIS9PpQ]3<Tkh+[A?q.9%7.6WR3:WVo4_b,Y\OcV"3d.5=AS:^9&VVX%#'XA$r?^U#.2m#\:2SZ1-qnO'6:,!0+g
%c"h8:\Z5jaeAZUr-.7^#:;.07l/IVJ<(Q@@RutP?HSo]^*Pu'hH5*#EV"Ur$0RB"^O*Y-YRD\n`\-VkrnqIZ*:#[<B?,!q(T<=g6
%%525D2Z7%d\pO;*J*+:`7UO7'f%C&$Ymnj'rb<fV#.Z.16D]CTYFSM[=&I[4%.jZU/b,$#Du]h&5@+9'GXa1MHVs^VPa42U^)1FL
%B%GF:0=,1kB%Ea^COc<'FM4bmH3!5Vf$[edZV++nc^L;8'@cZQHfA^(/LTjg1c/s_c+9?]#cO;:F;"!Eos20j],B)'W.!P;+NGXG
%Rae2%GqM?GIB!+3')HURRUZoU2RA]`>F?>fBN\UC,d-B6=T\r&VG3HD(4]_WL21Bp8'cLAAL'NIf(XR(VlEBARlV?BZaNS&S$&>/
%RKEf8+<pVFK8BM]!,4?b]h*?0-Yn(#:JbfFp'H`76'N\R=Z!0^gG)sR_aNe(DVFknR[3Bi#Kq'@eO1u^`sbnQe36(KaRLl0=a^tm
%Zo*XdQl;D'i)*-6WHEu8ibA$M,\oA=[a5,!ZU?gB1X*P0HNN8B2F2_Z$XFQrTpr4."LSL9dh=uBF"h52OkV]*+JOhT3k\Nf@O^&4
%\kk'ea3ft=-IZ&BjI2aFjk.MH6o:D.9sa>?7d5K.]&brDJ=*Kj1)=kaMcF?Q]'J!B@WcY.72Q7C29*MSg6Uc0'N@GU65!G/,cI[S
%;[Y!*/O-"^BO$;XX*"lDYgC'/3=V$OcuN*+`h7"`M5h?=^ehY!+lPEWE@in&#7Is8-'6ZaI:"]b2E#S%'!R.N6is(X-0eLjs(0%X
%rKWBqJmp5Z#[dQ'+$VQrOEp^mMEru!^UJ$8_m7!nY[hg36B7:S0pDs<M7#sWOk$D8iDA2o+4SnUV>qg&"qd\!oW\*53TBpr!'.2*
%f\Nr+Ph;@Bh8^e9Y+>4p57)A:RV01EF^81f/@OP5<#"FjqQR^%[A&W*TJ%j%co";1V!gm@WlRZ&Qn#Bo@n*3D1?G%9Q6E*."@7&G
%$&WJHQ9KOV'\0Fk@)IeU&qco5-gH"\_p\KO-S["f8ftd2[U)M-cj2@IZmX=5.Nb<?3$'ZI!?ZPE+a.-f<VQEm$Q@OErEo;TR'%V+
%s%$5<D%]4)/T_.GTkfb83c1+Imu'o[oq<liPXt).^=ZumHJ?+[>5f]pWA#L<>d'R0%]'^4LMPRpFuGHi$c'f?^mDc;)bJal?a<5-
%8^\)qKOa:b;PQi\F<E`>B=T@r&`'of6AHM%?Z0GPSaMZX#^4Z+hdMACP<.n6g6!<8B\n7M9Y6*rYTe5<U]g&hiAcK_KDD[bh(,Js
%mk32jL&:2[kE3pPBTQ3#(eM<MJq0Zel5oEg-4C2:eEnNG2?hf8"nO`tf(F\OK<<W;C_jKqOa>q)Ae-`bm05?gBb)KND5dS>P&pe'
%*'t.m`%Gg4mE=!!-E,@oDJ'Ea3I7@(Za!Hs2n"WnEn#j7=1geH,/<#*%Y[H+aZO"$m'!Tm;B]:81PL8@qPN$raDa&i][ELjgN'F9
%:hmq8.i9JUF((UW=P%$FNLMefcIOatTODJCB=M_[WZf"(L>b+F*lNGdD*re/%,+e%5,#?ad;E`X4_6<ghUog$:QO4+#33Z0.a^;S
%STd&Q##ffQQKiV^Rnf9'6YdMq)o=2<7@u_5(c^#ui%0[LL]F.pl$Ra5L7tCR__e35]rYl44VWp&]98J+egAUgB/8-lAg*WPEPaG%
%3YfUWjNn=h4lCD1>p?653&/=5\P)<nYZBR$L(/JK46_3>K,?k6g+`MX*UN!m/[Ss,2"]`p)GK;Z+O[[0H?@bIT=8E"l\DO]YUi$j
%i]hUAS*YfYNs@3@$6"N/_Lq$5[LWO.G=_2sXiQ--lR(?lZmnWdadAAiirr;&LO(+:/-B7bmlA+d,Wl_<_S`HJ:Q"S-6p'\][*>]2
%1G=s[Cm--hYXd9f>./@#aES-9'/gh5]cPK4gs)DscXu&G^[ktI!A,3%36*_$T=MnE4SElJ:I;^"f<JGFZ*VW8Ge<Hjl"H<WN@f!D
%MjBgr0fMp1huL:c/B<mm]1"9.hV#7!_m?;r/lBNjfhZ>:%a_IPf'/J#&]ThZ774G8O42(0%+-928Dq(d4]_BW?X!:9'*o,SU1o?k
%@P_"L%ALFIe,rif+p^S2=9@Q!QG[2X[@-*c04mnqgCAU'TS\Mu:VmVMs0X9uL*7O!VGA:>?N<goO+B'H-:'[!IPHNdiG@`[8j"Ch
%89<u4NoU1hIVa3N`HT46r,p[aNI%1s$f8*^0CnE&%(7Y.qNf$t>%AIS@-YH\]bVUS=b\./qQ:Wp^Se,Or2.ID6S'cC6;t?ue!)B<
%'WgI*YFuU^6AKm9N2m^;/MDl-,@!OAd9;0'*08^FK"`DT-#"Y8FYjM3%+`hFF?)%d/6bf,Nb&DZTWL5_i*'`7Y`;?YEgZtS(!02q
%#4NHKTPkKJP)dR7dT5a,p*$,FO9/Aj/S(@F,JqJUj=-;7.#&l:A&C+B",[HZe)HoDZ\,aH*2]FsHB+XAHXL.2KVse%(?*os24AYN
%rX^iCa\EKFT](^2-;RN]&A[6&d"A6gjZ,.\iWS"E.=b.7B+P[3o?Hd3K(`IMED4Afan9L/KcQl2Y_bjX6@_T2lJVec*)RABc.BL)
%g:0i`_IO;r]/ogg8UC.kmjJJfBKC:`TW8Y45r@?cG4R\0*KF>B\F*M63$GYK$Hf*r^tG51Yd!)F2eb$]&l!qXc\hj7f@^[.'X;@Z
%'6S#g(uc+Ua75J@"\ieY"CeQuJZ7YZ:VmN:)[JEkI_pjAgsTn^Lt1FNNgo!e9.+<`+/GKBJ6#cRRS,uQD_`>,S),rhTS_elM947T
%o(5\SY/a%.E\_X3W[4R,0X59sam%;HN;$'pm1GZFTl<&l?-UfEk0ot4]6?GUGQ[l^I$0b,JrQ#jUcG5'HKS4^FmJ\DVs`RN3M'#]
%fJOtdb'\N^jR'm5P-&6YG40f^=_c=0o[?!o:QgS>:Dn#2[Y'DoBuYgBf6i?<32V`]@iS;7iJ?._FA#:X8MK&;E@Q@G1u4`7Kb,ka
%*2h13&)/\pDXc&F7b%!W+ZWYj(co\$)r\o1DR7li;p1sYMlhr^)]6$%)`f':g9ft/\o8=-[+7WNP,gY0OgGdc`MYNS`%R_O[ob?I
%!7JfJ3jiG_Q64]N-.RCo%Psb;+m]Pn>MLkW[lE0PYYWB+7\&QB88RDHjH0G6`E[8ABV6u&RU)Og`.2SrV)Cb:g>WPBeU4GqQS>cA
%W0FAa'$sNmPO[e>j,$G7QOGYcgGf0W;$u#]Uj745K`]ATp]1#f6P\s[UY"*DU9Pgqa<cHs$l`A99l.n*bEGKOSkUg,Jfm7oJtS)n
%,N6H]bMnd^+Q>R\d"M24?uN0"%@dSA'KIK]JVZu@Dbm`D9i9NlFWoYiNm!WBm0c4o#`UNcp&[KH,l9"k,!#&6BF+j"9ppg""SjZm
%nkKUTFTW-0Y^K%2Fq5=j6"&,c?(HDIkg>Q"%?*\COq@*7&=E!4D"&MLVD92%/.a9,iN+0a_amH.C&B$\F(J6C-j9]"72Msu4=Q;H
%W)+iFS!`C2:Pra%AqI7_c1Xm=aTK#%8i3%KW?@B#U^?RU37nQY.;ap;i3to8]tQ,dO-D5'@p?gj@!s3h>]>Z6GsjutH8nDO?!U&g
%U9$#43[-GRHJs7@G$(4?B8GB\!/WgHZe.5bkGTF-3Ud4<?XgJuBHH*f!f6Okl(YY`ahfN!(mdRZM`uA!on>6/acL!N3T@uDBLJ//
%<0ocH9Q^HL/OTr.`g.Pog$/tiZ8nX3g&Id!5qNkq(,U3QAKZBA2L(9Lp]AZ9.c`Um+iU5>o$KT-=q2W%)Xt%bT?-HPK[cd1^iE#\
%&[tXeP;`pQ7[r$e8Gj@6JC<LEh"W5#'pRmS-;`RNZ*4Z\08V0qb])Ze8l01G@8$gWd?_g.'@IO4FoT+hrdBD)#apu/9MR+n5A>MB
%a!1a0RrY;]IN-9NC#?;G&A:pU._WfZ(`lCGUUI1S*F0./K6N@,ZeR3)(.\PH`f<mo9?&u*DJ6H3B%X*i571U/ZuST<O%]kYYRGY3
%kpc#?+geU]gU0#FK%>S#`]_F+:NHYm%*dn;U_Es]LAN>\3[H4%CfTmra?LKBaQ!?>5fRcY#^d>FWpX&>\7PNR..e)9#,\&s%G!fF
%ZLR$l;:$(J5LE0RTf%'?^.bu]aYGX1)W2ACh4[Cr;mU&>+@bV\EgW.aNV3n\p!lR=,SWh7Nc[`Z%QN&`1b@53a<oh)+]m\0,%<p#
%>pkAg=0MqjY&,]$G0D_K5PsDjIc%B1!pLb(8>i7$(:AQ8@L`Y.'Y!@hbRYX8l:NH<\gmP#S]DFu]SgZO#EET<U%Zf1Np)5m71Hs5
%MqO3gF:BDjak2.1pG?>mYTlXAor,Jd(*<>uB`HIn`tcc4ql/m2bG(GY\e$$JTH5hU-!_A%.t&EZ$l7fT,Kt#V^P[1?B/:k$/BHS;
%"\\04KQIKb/?b(mg,3^*W8_JN!JHe-GZJgCBo3#9IY>VH9d1MT-_*3DhSk?qC#ZQM%NgKOD-oGROE:qcT&q!'E+4(]="tFad](o0
%M=&L,Fq9GS)c&kfmp`**ImAs<n=G9'*.niD&L1^OOX>/YLC\\fiC)E7,1&#HY_ETrrEBab?m6RV4L+l;_\Km!)f'n$cA';5erZ1;
%rF:N;BU4fGK^:RDNX<"2#3C_E/WCJnbSb9o]Q_01D4&NjfO7>\TRnLY(eZ(m;-60W&<mkAQLSqVQkgLf>]GjZ3)a#tNZ`Q^9b+/=
%,[f@NNQj>j/p9D(*bZ)b5:Ym'\q2N[K2WHBBsu2HL@7\q/fJ-)[;H>9D/@Q-[34,,YL43*rVD+SIn9UQ(@":+)e@<cFPdXb:)5`I
%(<\=0&oNgi-k+*?isQbI+'P+0R,`$)+`!*JLY@:?Z6lHdM$8Ts7UQT-9-^RiJQ58Iq*#%/d;Ej]+G&jqdc6`#rLb?:)IfRtIK6-p
%3h\-e-CD7X0T+2&/qBD[o3rYj!J,;5bHc764:N]1!1>J.[d[:[NQpN/Js0T(:2B\K1nC3q')U2fgCf8IL<]..RhcB)1$VGBHd70)
%g`#Z*gfZKmG'1`KRsHL^/L(D0/sL#NZ!Tl=A9^i[`5=l:8^rti;KtJ/[4Q'nYkF>G&_8Cr9d5i)<sO6o06rUq&lWm\+Zr0s&`\1,
%<&KDnefj>$f&5_A.GfiZLhTiH`'Q('2+[kJJhAu"i^R0A\mke.CDofgJcl5;KqPl.2.ids5p6AW-R_5F1;OUe;P+G7gBiu08f+*$
%-.)ht884(-,H*p20U3o6ce)Z3NYNMh&'Yq19:qn))(T0E)A7W5"9edb`tN]r5i6ZPZ*5[HFpg[9cs`R9e4UUW$NdRI-)cHc(B@T%
%9.0jUV@7YX6-r1S/$'[WE?LZHRj62(`%:WBg.)8fk)&9o&AcDd5"tk[4V@fUA5>N3"L9DR5g*5aj&'ZOQ9JndmF6[10RBYt3<O\5
%6&n279/6YR;b&l4&l=5)2jF_6$l$b.$p_68hV\+!gGf;b'H(QG\K2,CZu2?Njn&T:CS[s;8T-l!O;fmq0sN)f\m\/Ab]SG<"::0D
%a4c2,@!]E6VCW[h=4Hp=9G#>q[JN]-`YJe)397GKd.E=oh:9ZFY2^-hH=c^"Xhp[10LP%sb(FKQ"(!c?4:H3:j9YE]P1S,fH-Q_.
%@rEQ`f^KIX]T+%K\Xl\t'%aP0\KJND*A6PkHj1#ROQ/DGF^<>e"dDt<mpDaUDt#7mX?8(ul5cptn-E`K`%JZ+qN6lgiG5,-a::g-
%C^r[[08rI"=t$qalR7KdUoapjV[gRQ*nRf>f]!:@f@T+@Z:+"#nE,D0C;2&?8S`?GT.Vb"%Ag-pH6%bT&S6)%>l^#$CC2gXYh:;L
%Cr;?<Ph&?0*Cp&k`9#GN?g(LUY^L>-PWE4!f1On$f@EhTqTG_k7/6,*cbou2a+36g@=]lE9=43X7LQE0a:CTJ,`]cB8Ck%?9+rqD
%LmpE3gljXZY-F$jK=_5@:QZA!J#?ut<bN^lRS^Ar&6\D:kmj2kUkP"X0;k7T3&p7]BK_f+V77^gM@BSjB;scI_JAYO.AhfYbs8j)
%TTA^/@G"R[\rdO;_jK2O>\HD"I.:-FGDnAe*>3gK4d'*d^@9&A"[cZ$():h0"3,:cd0XW[=M?oX[iFA!-G'V:>s`\D3A&V7'Up:a
%Z!^m79\2C*kU*H,C(4$lp.jG1)QsEI!DkRt)8U^+=OZoq'd-=nTjA.p^.j0jC[`2X$pO.n[EJOpOOLIVo*Y18jk:FQM9iDt@9Ko@
%J7T/X%R@Vc8Ss:5,&n)Y:t'%<K*FqKKW+4j<Z&J[aocX'CaQi"Skb0d!0UYU8/!_JMo-\bNfEYlRd^H:?lW"jAjtG&Kt!Lbi>JNF
%YT6LnTRlEL64<Dtn0Ajq_C6(D+s?Qg0fY,c(@(6/!::5o!TEE$a-4.Hit@Zm4B6u+S\the4Hl[2k:d8o][Z(giaOc=>AT(NgbTd%
%h%Y<S`G7^]2`uk>+n*B%1fF6/?g+GW0$\rdL+G!ckqMtn;Y!_TC%DplNfY+7.mc*]h!q7nn"fZqp,g21+#+1s]U2GOC@=1na8:9]
%dY2Q5]FnYTfkasP%M(?MX=bM?*us*k.kMkcU%"QBYQ?^"gTqAsroWe[_:LXd1W@1oX.(kdP#.K&/`GQ=)[HZi]98&c]Re&a+onJl
%cTQ)<);c/se35O.9@M.i4eeN">XN%BG[+).BF[RZc";.bErq&*YrUYHF^8/%i<AB(&Dn9&,L>tXktN+[&aH0\nCeGI1gADRGGX-V
%nG+8,Qp\X*V4P%/i.3S(i?Ye3cop=>SoEpsDJ7)eSfLk>Kkh;K#IpqO4)fLiIpX\`PY(&uH]*r+bg7QaGRq2u*&7f3P!fq=NM&I:
%F2C0r;[`s5%B_PF>p8tT#(g&j5K)"!`E=$5$p[;RC=Fd@o&96@/dbdjn:g-eaqIZA$q:BV\WP?>%s:k/Q_pqiT."J^%W2H!(EPij
%EnK.l2K`.=$itag0,CLilV_Yrh+rh7pj#9?"*NSU/-cag_1#D=KH0R99k\9N+Jt6*RmQ#ZKF3Th@hBl^3kQIQN;X=eGu&(f)_R5i
%+X?sLY*]on(7?pc]5O_/4kr!le:m&-YhAtL>::S;OcnubCH*qOK,W`b:#=ag/aoaM!/K9eXi7$['UB]aNb&Q#nm+;2/@HZ4ie"*P
%5&g&FQF#LEPZA/@;7^-DRRZ6:NP4*_X^.Hsnucc6d0I[12,VuS`74&X]!9,`T#6j+!X9W.F2R7WK^eY_73;[03&8.'-IQ;"/K[PL
%Mc(bV&I4"?d6+m)_H8?a,[Yd%G;.#2=@Ih!i<ugs\/*q4J7KM"g+A]>OK-(Sb&WdVc:*s0]*c3,;sZ%c@jS+kRVp4:(@=qG&h7e6
%_Xl+;q?T<i70f+j\u:/ub:F#68/FmVJJ]W'>L.MHWT(H>`\#,k8k-h7a3rUNT;0[GjnKDhd0d^@!fL!^/kfNP%JNP#G[;8&H[Le!
%a(Xoc*d/N]DoZ@s?npbi(8(BKf'3MOFQd#=U0)R.+hX.OBgt(27gAj:=FVm39FCm-n9%Ym9k0\UEKKcq.XN)+AV<#OB^nUM`dL#'
%8>:C).DoSt\2tQ/+hIU@K!$X&=$rWh"+="o-j?Z?3p4\*C_6omX=BrL&EN4L,n2'B@ZuAhDd\5a^GSE*Qj<h]+tM8[?(Xo'*OQOq
%5r"NdPcm0F69I.Fkm;_foF?OF^k?:Z1.F,&75P>:at:FEBmhsE`Y:0P"F2uh9[FGCI+XjNoOOkdA4/GB(_i$6WTtdba0sMn'MpcR
%IXELpV8BX9+<duof)s(lf]'E=Q@PFF:Z9HsLDk>6@jmRG&@\0/-r^Zh3>M[l7"c/:$PH]p337o;jH;F:VfB3Kl%m,Nj9Hj:-34Qu
%4UFGWVJZ"W79hFbZ,N9P(^fA;!7'3/>1CBnQ6:u%,Cp7U)TEPf)M)@dLoMae:!5HVHuK4S$GuVAS#D5!0LcR-9l,h8M3W)!TP1u1
%9mE&-7/IQA)FQ6MPI=#2bL[FSdaIqTMVJ<E9ii18RP4),.9?eSQ3WUg=&$70Dh_a=nd[j#Pd[rc9OFYQlgJZff6Voko0\0?%WZ)j
%>YI.A<K`b+#1@QH3M:%g<g_@O$[)9ZcGiVihmhG\k@p^1BnQ^2K2<O]UEMbOhs?0gXE!>Al!(s<ITQ_)9#opu_DN#JThn-McFAOl
%2`,Q:63`Dn<.s]]iaRrtF(c]k9BXY=;F>P!W.tJD*V\slmPS_^a\s@8]fb9U$:b0%&4@3C4'rH\SVUJR?$(;uf[oB*8LNs#)Eu70
%arT/Z"m5o$\K[Gr"1OY]!Q_\i=cancgB6I!e<6aL6cmIa"V!h_(IK`Yho*;n4Tt"Gm7RL$8)l"6gd?'%/naEL#dJdYlG<;=6R>.t
%=<sBa*X,i=RK8:]6JK==^gC"R:s7lAD1q$0Op"&:HtJI5#'g9g+kXGO-_W/e&_,rNrgOe5>79U2Ni3;kR3Trg`FX$2aM,G=6%$0Y
%aE1"*885QN\foS=7Nr1obop?IcO@V_8o8's2oU8ZrBZg?2M*S)T6)(,e5W@i*1Ea,E]T]pr\/$866F^s5lrEqj$4uBE/_pE!IP/D
%HU$2lL7DFPbQd/0ol240B?V&i,ERO66EdjN63&lEm6a<=%\sWuCY$Se_9qBMVlCQU0nG#Z^RN7P)WIcI6D?kj97ibHbmXpo`qD1q
%`!&k_[3hF8Rcc'?Bd!Bqk<@$R@Seo@6sY3-HYOW7,T9/pY*5`K?VgMl%75b%W$$&pQFD-K-uRSF+sj,F]/&'s&89]_+4U!iZ'uU$
%L8ebt-S!jYmQnBQ\23r@-!_EgcHAJVn4_/"J.+EjP>t=@WTE0fY_scQ%UVHga8!7E4Rq?'"FaRlk_ZQ0JhT9]?lB(jHA(r`Js)-G
%r!3RqTReL6!sGkBFicK".$>i1%HMs,/X;\X-lT9ef>LOrXd_p1$7Hn:!*lFFSVW@H<JSJ76/,k():Fg31.dD+#t9cF\@X7j4&F(?
%*'L:>!?/OQ=G6j-ps)f;\0NJ%iK@#<i;g/H;pjNfkts8s+Cf(SXM=kPH:4jM%7#.n'faD<A']53c?u%>_Y-D&Dc:1[!6C7+##9:8
%Y'CF""]"Ir8Z:\.5XB,068iD;ZQSTN@CrBUhD2M6D?6CGc4`pdm*7*kpD=IbOT_)<@t\tl.(BS]GtN.4\CND8h[*3>#+S(dchbQ,
%QGZdCEL-g+;:%HGdWqKn0:<#A%/4bp\3q<#Zu)#_F>Dkt&e'SLBS]Q0A0Ol7DW=PE*#/:]\-#E*W<>66qNE$8-]`;^6DuKq6@!VH
%^(<QJ@Nk'AYf=bXr(A*k])p2(5"5X9mdh/iJ8AAt#OBK:KR?oCnH35EUpnM)SA=J<0MEa:+[(p._q;['3S:H6&FV9bF!Z>HK#uNn
%/7asdW4h2:K'eGqnAmrC!c$_4(15hYYT!/V^>(!T5l?27)a_A;^7A,j1W3Gb!,O#r$!sYIV/bE*?hH,6S:V@+BLsa8;oVJ09+DlN
%mg)S=&ZJ,DeDpEnJFWjIJ6Y`,6ZB3dQouQb>[:3X[ReZc(9Jqa-DJEmboOjKVWES&3@R&$6q2Brp$V@D+@&I2d#[^m/iP'$5m180
%\\\(\Xt@3>_!^.gPfkW_.EbEhb2jDJ(,!)+=*;'-Od4(0ZOt*J-^L5/MO.NUNL!f(>dW;_Yarqu`]426(5A&h)YgP&J0KG<Q];>^
%;1K*3(l7oBHteDU5Sr&%*G,9jE?.[rj0f]J2+%r+k/WZ1"<UtEE*XnL3G(_]Z(oY6Xc"_ma=aC_TqZ0Cb&m^(fBol"7u,n"#^V\L
%K1#h15^:N?&[F,>,YD1(&L3j)F4Pm44q00?Jj:%!=/p"/'>'$knCa08E^l.(]SW)u.q/40*b%r&N]p^GdhG/cOi<06&5Ii@oND<R
%S:n&(;+0W4iRgMk@1.K[EJkb3Qd/bQ,-!WZ1ficNDsDS0.d2b;+<FEufcl>".?AWRKPXJu2%c2"m`2gF'gXjA5+Jh2Bb?@7&LZOS
%a;>*A)mik4a@IKnK-H2+F\@=T*/hd4%4T1/&Fr#RR\eS(+GjSH4k'n28'4Y;O;r87V@?FMM(TuK1lu$K-Y].D*Sqs*g_IB!*)Bga
%EHI`RdE(UkdKj?dFTdYEdOJc>Z(qM]:>0dlTfQM-JB-_=^b=-VmAe3Q0K3fPS;)XRXp@:*j\0`B:@R2@7TQ,:J\@'A+Skd#$,oE%
%S63jV`?pa5'j6HLPD'dSI+ep#+.!(m8#(m@e3tq8JDS:@_V`Yn4+Jli@JluB,Eo]O,6d('@LX[YjK@V%Lnl1t)<0U5`.$G"C*B3E
%)R`<U8`,?3kou:D0:"lRd\VrcYuW9c]UU'\G@7c/'\)Wqb\#5YYAm5;mS4o"*?X*6,JY-J]]9p@g+?(kaq%+31)2BYV6SXj6H2U7
%@/%0Cnc<P86C=8$-rnr1N[p3O$m"r$02@&mZ4TFsE7]d/MNjXP7kAL*mNW,R1XUsp#U^:D5o?kE-`WW*%)`II!g+QpJCo\u%V,RF
%j5.:ps107M=*geWYUd(@k%h\HKp9U^c8VE)n9q2G6B]h5):QH[,p?uF@DZ6Wa;ult-HA]FaSP8G])5Y5fYOoT"JQD=mXU4-,j<0+
%7/jV#KE8EG2Gr'4cQft6:G@VOY'3<%ksopp1\g9mN#4pr.Oa.nP/0F.4-h/ujQYZh#m6OcI7"WKZ_bd$!!ZZG6R%EFQ:Hg\m>b6r
%iLJPD_l-iW!ZQs,S9@lGC2(e?7?hpg^@Z-nHkRtthpk.'O9B`/[&;Ssmp<d%fU&n1=NEU8pMNiu2:`0`^45/]]Gh;nGKbV^^D#3Z
%J0),:QAm;)hmdDG+2$hKV":C8-iU":_p@h0'V)]#KS2N3)X\;r2i2N3dh6*\G`PY`Hj0dm#)*(@r)//!O($8ZiotB*h!34(LgpYp
%[B/HIMRasjGS!Flk/-P]gQI>2:h=\80]_=]^5ZFWh9p[G3Ju#XRN[[%^37OJNY)K4QTm4B"tm+\;*:6(YpT]P];COM6l'a*e#VGB
%UE_'<1?rV%DLhX=Sj^?.h/OZs/:DgYKd7k1`S5+.Vm'pr$W@<P=g@@'".!j,,+Z3hpW4$4A;Ah32*5,,Y>nICf._Qo>eU=iG_:E4
%^@^g_B#5f\`X7/f*47nC;^-WH-_k4la3t($"5=j*V"j<bqRf[MiW'p+..Y:WC&4Z+DBb8Il,u&gp,QS-!g,V<UX0g[>7t_5((g'V
%P*t=jLI%XW9=M,Xkj+/Y3`)"N`7_?XiJqVA)+F`pni&bM92n<B8[bmup(\-Z#*Y0.!7`$jGpC_Jji['.99W5r*-`a'%rc)^'<<,e
%^__,&:.O4MhF@WgTB.7p=MWqQ*SBeI-(on39G&Y'.uB!?^qgs%,30I6+q,pNO;H6/;5^iSS8<Rtkjq9!g`MPYbl+Z(),1s-\g7UB
%,*<hk`'YR)![%^]M4GSS4l3d>6oe/7a[qN08N?&4m_DlDD-m]3&c.Ip.^5FZZ+lc!BI2`QM=g^t(N<(grW3`+L?9dJ873c$79LE.
%`C0P>[T&q(GdLdV&3DB?6sVob+gRc@S`";pU"[Xc,#CC6V(QWN\h4JO_G1eA1mC1OPq7Y<iq!B4F.O)*cPM:8,-u).q&Q&0^^%,)
%%(NQOEc,)[o]opqX<jMN,fi?i9SO8UD!qjgL+W$_Oi%t0+>:G7^IRQ2/4sN$^A/90(qQ4PA7cFOF0oIt3lJs[]d1Z7\+l.eO_9I,
%/W%)q&I\omO)slJ9lk\\A/Wun>hmh^1(lXW&q3D`*%p-'Q<Y:<R$r#_"_4n`:kX:"[j4N-\V;@cdTEL\(l&F7+`bg@QV`r"&>j'u
%QoQ3Y%#RQVejZC1AZ:*r&35c">fXRdasm5LjT%nVS19+:V^oHDLiD8X?DN,A&PQ[q1@;RQZ>gFg.TIc<IGYG\$W3KF#]D_;G+u-8
%bJGu#Tb;O#K\K=9ifQWjGf33S$_!\tWdQ:gBI&#YQ3QH9?s;7Mp)miaDi/?.g-)?ja4asXTu6h[1=@D1[2&AiN,i6M8@93cN#50X
%aGl'GK6Rf=#ZS7Z#N]bJ^rgkC.6N#<V:iJ@*!Tm*CSi+)&47j:aJ\(NQC(a9YU]q:WF4QNXc(h=@519CW$of^oO4;T/R^\hZ?q\s
%7H9oW3m/B$XjK+BJ!;UCPXP;Q6U;BGaq3h3UnA$LO1iii1FeP".&Ma#.p9k-B,7"Ffb?2&"<f[U(O]9774LZeN`bNKk,,?10a'o)
%:"6Lg/PT#_&;.i.o]%uM61[\s,`jF/gcKcl/cYJcB@nA8B)c%5NZ'ZK)4NjV-aK/X+(gCp"e=RBlMT"Zm80F^%A>`@Urd`Rp,MK]
%f^_&ZrcZ>!n,C=b$T]6-[]h'qL`m4AT6t>j(gsp\EH^OPUWA[+=IeiL3hO%CBb3pl$h^nfDYj:d_'r,&`3WG4WJa_486dSbAAaUu
%5$o`n`SDUNUa(Z0(KZk\NPpH2#VYgh2C^s9</:i/DK;/*-f<kA-_]UD'MYM?8EDE!^dr9)!TH%P^#$>F,fqp]:A>#&5U'r7%](9%
%E=7fm3&lVK04r5E=e]$mGRVKSX4B!"bgD`=JdMc\\\)XuW]Yn<:/5rJcSu+D&:R\Q4I9j)RXAG^O/=u/n.T)`V1;BN93h2>9boT@
%#Qn[3>cA*si5B<7'7&K]El8W4iCJ97*WQ'9L,@=@\.uo>WfHCu,$U9*B]JiP5]GWD*(kU/C<I8FgsRrgi/Fj2Oknp_R(XEZd;Q;J
%F?+uCi)+#MF62%s=5&RWqoH2,SL[DS1%6p2kt-Z&LEul2"'Zd)RKflj6`NYj-=+pD&q).7"#P;/NT_$_\fiXf>UT7cdKW%Mc'7)L
%ramP%HZM=[*)9CJaJ<<n1KRJ8hm_X4%R#KqJ>j",ob&B7WE'Z%@'7RhJCbp+HqXQLpI;ZjW.p(YA@-[<13"#C;m#[6J`;51<IMN\
%C\ql40dmr-5E;T0)6$t,DXU:T!h.kufH0j1Vj;kmq.5u]LO%4pL-rKTe*)K0lSgG]i6J&I4S,e+BIO;5dZdo4**[`r330//hp#\E
%5%L/E#TnKu_NSB9hc&,o7"fKXSL>n@6g;X;o=#C/.g*Y`?^>pO72\,6JDrRR"htlg&L+="KYY3um"%K$9co_Z'bF7V_ssK5&_=;$
%&?cWWch;'E,"A5mLe:r8R4)s;7\(s#E%(\[L>6KGT$,\JWE:'/1cW'XLcBJ%dDb'C)#"p%rL.uV<KPWp@"]\LF7?EGg];4u]_ZHl
%b(FPdg`%jNBuM3]rAI8R-3min@gS$JLH1EGbA+)*.+Ri"UkKUn*0D<C$&X+*+3at+=$enfZe?D)14p[6IQ]f9+gS\t"6B2GHnt>(
%1h':?Y>X!47IR:J+L7Wg^rA`-rdW8#HcE-$%$<nu@]t_]cqii^(GKU!VKcpTBC_^X=C,J-,#Cs$1O?!TVaX?B=V-Z6E4*j1e-PrP
%B!-?8#;F#&Np12Y!=UrLJceS-?pY(D*:DiH.W1dPTCqW.!<"_qid*EN$6-b,#hoSWd.K8&D[,G:]E7Kim7&o(D&T2](t)@$De"VX
%87Wp+=slOh@iGbS32/FId3P:6:-]@`@^lKQ&/ahU;N5`B0r.0`!Neq$aX]?B/"UHVTOF>%8SHU4T$XqE_uTZg.4)ZAi,F,LeBgq(
%<ofEI,5c5dHGnf9>/a5Rn8F3-'>h-)6MA4JW@JiNL@R.D[TJBH#j16.e?R!N4L*H`84kI#6<=Q+a=8XgRBX4='_Y`D4)bJEd5=6`
%j5uG=dUaJYq@,`RJ"8"A=;4_r$_-J&2j>@AM%#S.alKh>i&[L,Lh75;0QAY3aIAe8'g@A6Lo0Yt;kpcB'2_(V,;q1S,-SP]7QK3`
%0,1XQfGl39,WX.(CpbC`oloM8k2SW6KRbZrh68oOKs5H#?>rd`dB;VgS^=Z/&WD?A4uDiI:iB]'ZGfk#$jfEtK-t=Lil:GjB*Mbu
%^Q+)aKX7ANha\L%B!>,AlK*Y-k@,e\.dbQ;Q9"rl%'Fh(k?:i,Ae]5.%=CtcFRf1p"`kRETL/3X:RplB+C!q*NpE!a18VOmN4\+O
%[T*mAlM50pnMjMoP%>_!^D8Gd+$#Ji'G"?KM^K-bIe#Se6\0mml,WK.S?O1od59oq5gJ.`91!dk[-Fe2[4^6T6_L`=*[ncI/""l9
%--e,"1I-'PNk3R9$fT&*'ua`SeDMGkCk"@P(5%_:fBB>OiV_5)qbU)q#L\\)Dk+%$j5AO:jUM!0]QhE;(V6_:.YPa]LG^Aj=LKB6
%7l[c(!n"gqaf:dhBhd%#77L9j5Og^B:c)Ld.\m;rfV1PDO;pe5VIOh!rV#c]cSmRGC>_"('I]P%cKXHbI'@O6IKBWu?E#C<-j/^"
%8*$4?5r-;5Y)/*&DPW_V*T1Ks;b3*k(a2EfY>Q0Pc*u1D@RrJ;ISBdod4-e9GqiG0Zh).$$]e2>%Q)N$XeA!_]ap"Dl`;U=R_7nO
%i?99oE1c$ij/$W]X+DuI1Q_3E0Wf3@9n;`cPbIhN`Gpj-lpAOJLXCnDFWID1,JrIjSf\<*E9Ps,GQ]aQ&L\uZX;eI%E$`=HW4PC)
%KHM.GXO]fY459%s,*G+R#pP+cGf4>k'"2t.j=Ip!6/b**YoU;mq5#<9SoetVqATrT6G7Fll(p1`R1%DOZ/u@@dRK[0A?53R*Z@<a
%>)JWF<5mMp%]m)-*]od:G")YoqHosD*fr0G)R6dWkb6'-V$nRM`T'suimO+%Z6jop!9#@&0ti#N#H55:-<!/j14PAm74Xfdd'3#.
%X6C(Kaqf;rACH'P^kW\Z9F'h?q$V^HnZ4dGqW0d]((4%Aj#;CRd(\`k5Rqhr3m!fr(&)NCm6SQ6*(N69^TQOoj"SF%Ssn^K3FF+h
%6R%1#WsB=_0<7^jYXK88bomg>7KmKMH](c<q&3N6HskHZKejUZck[-;#"9b;WtJ9_q&f;A!Q%_+@leKVo\1i*aJb"u*IPL8.!!\P
%WcWr[M!*U`H4eil)S]USJ2f9KXjiVHF>_s@KXC9j[0"4-38Qo\le7(!p?&q`-]"cm8?ak6#S[_NXiaB?h,aDL5iG91Yl.L(%PL6%
%PAW8(%p)1.`<0EjD`Wd[a74pPAICXt,Se7M5Si2sG%=thDGMsTiJQ678'5Qli3=OAfec!3?agaMmFe@LpX[5.EmmpT=0MtNd#[TP
%.6?ae&BZOZ.]R"!hT"n!itm;V3ln=a;[dZHLbDtW)&5JQ1C%R22+_Gh7&6O1"!2VQ["gDs#S[eOXc$9_4uSJu:dB%DrO@kl^l2.8
%dA*hfjG[&#mlJ2i.PG7PoEE+'Cm3E=(dt^N:U5[SAI&e1W!pW)5d$MP5q\lI]L5aqY]NHi<eYt[Frlel.3j[7nVG`,S4:^sF:s5C
%U%Ddj#;dGAmUM@h!Z=A=s'OTOo]ih(gOXDJpHP1iRi&Y'p<Csu[XeKDTP@<;.#n^e(1.flo5*WU=Q$rt>Uq"f]m"q$FO-(.T/=nl
%0Y_F5B+sY>Aa,jK<g)'B10i0/1>#NP%jriH.4plR>W#>%@KsJV75JLBNFMYd(K5@sfMop\R$iRkOC32biVZnnWlZ7cR4B75\LdRd
%ZHb3;$T"GrE6d+E%>?:EbIRml1-g>i]>I[l'V<T1fc<\*-o`0tT=Un$UADikGC[bh@_^,tP/`^s^W"&a>fR\G3K_L"n%Oh=0(/e/
%1GOW\Yp2RPctaqbZ*s2)GV>SOb27h<X*RlsWJpJpoT*!NGZdRSPn$#]Id;uX6If:/a(YB^"cR":P;Hm!phf;i)KV!+RT$bup)bXN
%i&&m\mo_)fgau-O!$>[b/n1-i@8GD`:=Q))5:rBI<)"g&UHgN!Bq=,@#"c(G5%=)/j'YsXX(JU]9G6,2eXh6u<enR0@jtn3k7tau
%aKnR^,G6ab>Gf^emi3gP0.S$<aU8!KmZsU!&J8g>L@-<TWRlCiXX3b_M2R2<c1/Tg6(1_YIYrj-BK:j8UbS"TC@AlJrcksN*uB,t
%_CO(4_2>73'=Em]R]9)@"E54DiQ<s8o%$)L1]`4:*$M29BAg(JMS)k<Gpo/2mgd\@a-Ekq0k?4!IO.UsPI-m7)A$U7WAp2As&3D,
%rL"L$'*_j)!'h2HF>TbsZXqPiiRY[fN7`Z&83Emn\glukTWkc!'![P(#4<R_b=Z]n6.Y/>9J-]:?:&Q7gfu2H.L]WC3Yi;-Fj3@6
%V,#IsM>ia_Jc_F`G9dPT^9/a]!Jl/ZT;!ZMn0`D=-\X+>1DuuKj7TmcaOfGpP;K.W?L:O-(VN$kD;,%=j+3JBQA:cI19#fFXs2]V
%bi8$S.CJnhU0=4M2i]*]M)?tQC,_8$WN^P)80s)r`r`FGZ&+J*,`g-c/")#q8SsL-Q$E.B@6)iE%^IXj:Z]1QpHC-LFtS5/J/['$
%=5f=0KU9)AdU7t3oTSc#aW9<t82=j;8KQaCGk``)O`EVT'DRfPN1VojUh.QhDqbA(Tm85B/>PIpbA)O8_t&QG>1Rn1SO"$h6/pSV
%4[uSEHdPXX0u@L["?op'Y,4Q+T<(ZT8IJmBabp'/P/+>?#(*ODq?H/fAMp0UG.]tp1'*XT"N0L26auutYt%YIG:JO>G;It?]_ga*
%XE3"OM#(fX^"og\$(%7M]1]p-P`>6p!MKDORh,$F/EYo2(3-aR(l1M3m_$f;[4'\&784SM;*cb;5WO64qF0>E^4OtQrXJ<Z<_K2.
%*%/+-X`A<gCYZ5uKi2#((,D15$>hT27>3Xt0soQKDJ.cE?Af1Q?Cu*gVD1W,9U+qm`3LtY[TrgR?J%3.<#0OXGa=GCPi\F$kft"#
%b/d.C]p0e\I!BtRe6h0A8R<Lk3>QRZXZ[9RRCfpJ?4UZ^QiYC>\4a7\h"-+fQTNHuZArbDhPVq<-MuF)F?A+2H>Zej]KY.R[;A&5
%fWL$Ylpd<NMmaW)WK(gSUB<3?_==\1LUl4-;Y#.(1Tcr\B&?3j0<6rMUZYdY=`slS$u>.0D*gi-4bFT5l/bR53_W[EO=7qjBUJ&W
%Jf\G&p%/&6/Ed7M"*[iMUcF0De'UmVTQd*L<`#Ut_.S4]0.tJW_)5Cn?-gp@?EIHRTi<Iqltb,J,f<O*hkF5O=)HD1\[Ut,&"+_b
%>.Y,')^o]>RPnp;"B(\:<c-K"9Y$"Y<ic,6mFUd"O'@(Tee%$[.Gok.nW']:g.bCCGpX"BiHU_:KNT'9Yold\0Gq1FdTmCM.Ym"e
%M++(#C<EuQI[,tULq!K;FhmD'/4("a6\5I]Bga5OhA(A&;8A0)Xg<&S7c`hfm1>rB=Skrm;J8P>;?EmP?!$d.Vs[]?(_)c?nL;5W
%=@;tS<rUI(c:P/[GRIctc/*M:o,eKicQe8)ZM+d_RHr^fi]]Kn4bHXOa1Wk9NJG41D=Q5k(M_$H]a#K_4RYEDS,[3k_3=uQRs"0'
%_YGj3O4@7cC%%bNEG6MX%9#Jl*b,.\mu^rfr<R>Ch#_a6mS\tQ.)f7XrOaBlUQna_1dmY!ing"r!/=!Cfoim$?.o:`Md%0-.qZ*2
%V;n:8:6@.lR%h$NaI:!NR;JIO7ll4(r%c+/gUA8JK;YBirpiMjU5Y=$'dBmWkkiHPc$!IefjIVcD[5ImbBduT&01Z5fS#CmGi-.J
%%)Uh\QU52:5@4cm(+?2+\.gJ:!)JqJ`q/C(QNB@?/"=G*\J,I99.`f,W0scPVQ>7%Z"n0i[bE$jGCtlTG%($eIS6*m'OnR?=IqQq
%D8h7[cVPqT\il#Z*#E"V`ihc9+`>&RGCU`S;h]nW)Gl$MU@5;.-^eYpUE*`_>afqp$3D$MQ""bLfX:8UZjS0>n)P^t?6EB?-Q@Pm
%dd7DY+h70F"%5-faN'9U3t*H@9mf\eSlAE#CW+F0al9PC8TCg^#X03_k/$_mcjiDX/fBoWkpNq;;?k*T:_WBAcJS@;j#>g4`kmbP
%g`E9UX5JLWQ_8<T#u5i[UEpNZ!B;aCZ0&*WBNnRV"(IZuJY60JG+^<3P?Dkb=lPK-]M4iKdAU)"J1>fd-]jW,Y.@nu9mZoe$pe+f
%n_.=b@24jj`8>8R)h</'SM<h&;,PJ%n1%lhCL7bP&JkVgePJs\agGJegU:1V$8m-?Lg_s1DX">imRSeMk7%D?jrcNP/2jFa<\GtG
%8.F8="5QG<`Cq,rJ<Ku^3'C^&JB<(^7,('CH$R39b7$q+!B7*eLrZF1GD0t0RKN]R,_?nCFsu16*?cn7A-O`(g0<,1j-GFJRh=;f
%_Jeg8HVuGW4eoF.mJdn1!LY$n:`\"-YIsio_lZi,Q-*hTiLON:RLCTV=T@./`s:tNs77=3.[V1C2&jME$d]>jHcR_#D(rgC:mp]4
%1)ml(;:j?3D1H;SF61nghg'/4"pm76!<O[R3LMNUP6C.hRH>"W7HJG,QA/a8j*"`/522Yq5`8>S\a0\$BQ<NX69,.OOJa6ihO,.X
%9;AWjMKbb"8<V+onb<poAgH1NV/N(BfsM.dbf'@8d*$UcDclp3()!Et5`#R?$!%g?4%*Fis2^2:H7h?p$d\3p2'7n,@nlrQ?QY-F
%Q)5$-$98VcZXZah-kD;3,1i;"l1br;#JFfF4/bm6+]8S#$6%ON4VIpM\rqh:.jQ?1LEPj)eLm$rOpMEL&VpO^\EFZl_dm7K$8-)0
%_h@X5Ip.2f]L1[B`b7#+cPo-l.7iihn"^qG=Q#a>?5sRMSj3XsC)0>?Eq!\O5OoTCVLo-N2chRXqG>RcM'8hV[ij't5[^ZYg.4SB
%PJJUM7?ErNdcRR6"O=<APj33NJ^j>P/F9`ofa#Xk<FmiVJoTh8(c5I7!u[NoGcd*N7XL'4/)5kV/HTuJ[HD/;DT:oe8W?09LMI-6
%Ze4_e'?8#bcu"^FHY/.dJ.>L<&@_e'4K9rD.7Sm#6=liD@b,?cSu>ubh)E?%OkVuR5(T:[i.`8O$+OAG>niXQqYg-M&crj%fU2u!
%&JHJ59(:X?Tg>[Q-qV:H,+cZ[`C]V/U&t`m'iZGTK2pF:OOTQ\MU`(J0GqHNi#@p)9jV?%RuYU4dT6b).3[BP@E!Z['QPV]!b\<j
%-W%b)";;E2dj_.B,/HnEfLjT=7c)[*`E1V!<!C=<)Ztaf1%H[O,/O:aKd.)o;b:TZlhJH9MjqlqVI+l=/ESfLqM^Z;W.Z5f,",d_
%.Z#Nb/(Jf6A#tFd_5'537As&GU/eH5$j%kUX?hB)BjCQcm2@Xj8-kLc-NbgIHP%P:H(5Uh_)hY*"_N,!?.MEPD?>cU*f*uF%mL4[
%$I!lUd2r[qJRY-j@lRM\LY=24+19s`#Ts`Z`WmnH'EMr4FP-$L-e&60pW+]k&Y)gi%.$]kY)aC!bEopb)cba,-IOtl>QdcgSn;=(
%5$$clgSd.[X:WU!-ch8Rr10rm+7oWR&8rthET2rQCc#[t#9FEWdFZ$X0YaU=48,:f90]l>UEB7i=ELgc"]dEH!71KMTQ#,+$+)jX
%q=To$BV5^BZW)Wu>`HpaSlS_=JAEN5^l]7e1^&pj/dqWP2i=>11R>Ii*7KgnZsNqRL)#TQ&4.&lj@rFXf1'.VXH2,tr5b1?@*6`D
%lV7C"2f+h#hVcY]<_T,JQc6"9M7Rtp-9@sgR<\FJXY(O)'KO5HM^a@DIGIAtBg&nWI@!s`PM87sF#kWLjCY0c-.,9_fRAZQf[2Tm
%_BEPrB?i46JkrAn!S>_:BAIq0'g"K`T5Cc"s+XTr=Sf11ER20In)&b=mgjmC7P,5;\qEL/n^[jm[]r^BIp%113j)EgSl)nN$T4VS
%.CXSu'c$!Yl=5?D4O*#5?_\=#L"]ETD6!il'3*;TB9YeO_^$DIMT3HLDfM3:<M"iE9@TqG<rLl0K?NW8>n?.(eH9q3RGl9HAQe@F
%9s3\u57'iDKSNJ-GZb>IFq;\9IL5sPJ/Hl]N0J-_-Se56`p7P!1jFKeA<M$YQaQg/+bT6(<p0`AI(#,?>I4b26A;;>:e1lNQeL@n
%W7o.G8i>GQ)H`t_JHUU8,G?_#4UJo3-k[a4gRVk`qaAW'(^M@?mY(dg!QJTP^\,PDp?NjE@es',X+'6<ZH`q\E=&jTQ4X_&%.p@+
%fL_N:dGKBcNd;nVJ84$:=\6-9?lr^(CC-e[A8%bbV615tUcIQ4;`I76\i>II87Nj1ec'B_j\:@'85+RRX.4gei"t_PR,C*+C<&5-
%;7C2LMh/,lBflS.=`i43QriFnEuaNFR$Blghos(#/=@9O0Km_nWlHo=DRgntG`UZ:ae#hoqH14JmO^.k1IFb7+m#]ZX`;O[B7''p
%m8"^+qe!`'S;nbV1Boh.ineX5oO0@8]P?h;KU:2#F]1:GeU3YZ2@-f+$niBX[d`JcVn\182F(/A7kIVH><T=D"H=.WE6Zbq'tqnH
%BHJL"RX!c`WZh,o-Lk=YB[fM#CZ(SU)6"61rTY`kD^41HSPU=,"$eWpX62==O4=h[>$Y_@_)fjk!]EUUISb68&DqB##$-b726-4u
%`P=pTD&*=`ER2LN+r\LVrBJqOm6_!qrasXJ>9M&H>%OOG.A:2rMTOkO9^5ok0XfB@c!'@:">&eE20R#s>7L]M2[9cIPSiqQ`*&#P
%)K@H2SaQiZ#l<Wi[N?,eR4Hkei#fEAHtVTT;/g?0FIk2in1u;0LCAikV0d'=JXg>WF1ee."6TT`m#=tuL4[5MHa8)"<Lc-?iP]VD
%/7,Ak=V%]'<-ol@[=N0_",HgT`]<g5'2LHU]uY9jm:`7`%9&7E]IlSSh6*=<%Ru^-RUr0ScufMUC.L,+e1N"$LKVR0BT6qoEp1US
%[e,0**`sDhV?OO4S)2`K,Jcj:WuV?I)<'aBp`-\$UIDW0a(Ma99`;3ucTS>dDo`7q0\fb"T-V59;+bTG<Ke]I<!_YSbV*fd!44eg
%,[=q-XM8UZ3`ndJeW)p%]RZ9#d"*Mi/AHm2(aUVX)$GZ[&Z)p0AWZ&EfA@pJ'G\4iZB4o^Y3YK#M"do7&Jta@#ABU=$\:f!aLe6m
%D]*_gi98LDib++hiEo.o,s$<r(+SU6__2`Er<HZ!dggQ\&/[pGP42\7((T`):3#aIhBlqWG+hfmN3+8_R#1rYR3meJP!b<M;7_jU
%S*AgDR`Pe9'jM]TX?_FLgAE,n_(E3+e8K7`cXYlYW,3Sn]dWb<^nF-ZE1GfDYs;\:>2(A1?e*om[q%Zb5=oM@T%NV>O<VD4>^m(s
%?5D_q1'V^!&F?sOA<QeJf:N,:WE-bB0e$TRQaQP#r760/3-@ZIA^QkocU8&GWHe6gLjKIMTlpip)AM*-S,J]7KL6LH.+HsG4u\-/
%/F0NcTXY[MEA&L!%m(*bWe.;a?$>Ik)K-&MW6fapA@O;!MZDA4\5($V->BQ(rG=e3?WLJPK)h:a7DDS$gYCr_P\7n=[Qk@N>o@VC
%n_:7A[F5-/`Lf@75pPFKb72ntFSa`f_LEpubXeeA\@=Y3%:TYhM$?.omsMar2r8A(rJnGTXR#</EcB4ebm2pN\S+%JgfR^P%lp`W
%^G>TklHNOk<T$VjQ`EG,[>UHG*DLpDGaV,4!!JK8N"#1aAL.An#<A@Q,_LsU!*4,F3DT(WVGrMaQ5mQf>*6^(M=FoN^!k#Q3^sW\
%.XN^f]Ir?q]@O"gGe=H#A0@c"kfZ&eK^ifT(AN<L0oss(E%kd>4\gV4^%oW?0Ul2MLNm#!RZou_KqL_#G\Od8B4hcE,:ZO^0aE:(
%I\5>12Wrup\up*B<;b]9'd5kn(\fGH*[F$^T`SI/O[tk6A_8Kb@M01b5$j*SM+9N,N\7CBQ^]3k+?Li7n+s0HMWB@SA0_YS<1q<L
%9`_s.TCb]Km3M6sN!te5^h(uDW%\@-U02qO".q3cS]a9o"ruZmoj/1!jZpQ]D@h%\Q&6pDHW@q$+V,hc-P9&c:(#sRCi/]*Bt[P!
%.`9[U1pHj[[eAGDh8s&?Z&PWM9'eH&J>fn'3g^MRk8g>+9b4<\rCi[ulZtl7N3m4s@8'6j@ZZ%u:m>5l+[qt+R&hc>VudA"N/0Hb
%Gq0*<ABG;.(>EM;E(^I`k:eS<M*\"EnB`lI^sG>Wk\bYCd358+rNP&WT!OPW+H?U6"TU(C$1Sd;9a+C&:D%S8TcP,WK>GX,U`hW=
%"W8(eMj%o)m<Ok(Tns\g%U0KN$rT0A^)N#9iBe*kjb#&VbeJOA\N&SXrijpjFt/2c"^_VNRk4)+:i>gm?qu9L4MgRorI^X484?+M
%jVr4Q3B'f9K\BC5R<;tBJFuU0"qpuEJe3dL.nim!F.GB$VEnRcLqO>Ka>1F+VO!DJ5AS[f&gT$!6U[e;5b1E=^b8eo7ep)/AE/CT
%S[iZ&%+p5%=b=^WJZ;G345EJfEtpuJg`M2g3@poG6(fQA!*dt&T(Yl,aAe!Z7s$nm7A;/,kTb'dU7Mc\!`9=061Z103m$YZgOl#&
%XqR&\%euA98<MJ#`)77H*_Ak&UZ;en&]@H>giFYHgk46!JbDk;H;1nr!DJ2)=cZNI3F1:W^$Q&^2:M)TgKP8lI/+tP(479(Jd1f]
%UlK`c[BsFHeg$EM"ZZ>#<#<_[Bu^DR'K":^,Q*b<WSE">iTnV/hI8bk9i5k+q7,t.fAg-oCMq%YpGe+9IRBA/@fAcC[h5J@acXC;
%f@VbS`kIOm#^,*VI#:"o6o@/@'GBsN"N8jtTi)C9=;d'LW-B"*k2#:@p]mEEG93L\PE=Kl@qSu2gBqrA;>=F,cs^@Mpa4mpm/jsO
%8e`r#G8U.a<$JOunS3aq.71aHAd4*r.khF-&-6%P&ibdT1r*-N9!Cm8'Muon+ddk5)I!<QmUb\@jL$H`l;pM)ikil-[lom+XkoV)
%<u*;;.bB$\A:7b;p",k@LiU*.*%Ka-j&J_a<J2rQe^)%(3%V0uC8J7CM@C8S&aBde7R@Cln`%:HoAVr9X2TH+b*Qs)\4uhrle;m(
%<&kg9lN0DVMC;/h#iA)cT5@ueZEI'']n6t5`CXhV"kqBt!-8](#M=C/c^FuA]ldThNcN;d?a=[6.W6B]VFlFK;uQO$YXmDc(h>1:
%biHFtGE.P_jou'J#d2>`N+@aG$QZ%Z&c&8<p8%ul)ARL8.u>a&3rBV;ebTq4RHtk']UYcXht=HLN92WG#FVABQ.&od[YT``M'%>$
%+XmATI%m>L%k>8e<>#oH+6)J5dDL[,n4>p/1b)a!m28G?)/&iCSlFg(%$3lC7Oi>'ZeMek2oq,7W`7uER_K$V0o9r[Ea0fdZ<?i^
%T9OJA8A;1Jf=?heE8VpI(HY0O/,EIjKs%uSPP-'aRj;6DIcVukhLP&VE"l8egI@f6=\*tdlYjV?-:69pOHlV?frXp\4"kOB-.#]4
%7&6@3e>u0**Jm<IaU>APm"*7q!\Z.)&kPd:m>[BW5"M`A'lg(cph$a[_iZWo20b@U'l@otFpKFR=:]Tah=C_tYBFu&;7`"<D9$>!
%oBq[[?S.bE!cboR%'s0uSkID<h50#$3/m&1Rh'X@==P13eO>aqQ%)Ll7>7f&c9_5\)FspfFGTM-lmYdc7^k)A<!hTrNqI=8k5fQF
%8uOl=B*`6sIBpdS1L-*e>="0J^+I%H+f[L,f<K5UgiZ1j4A*l4&Bq(Co<>BX[0i1]ZuFHBQ!60F>jp^"S22cm>`B;jR@kn"$U0%&
%R*Ee^YoUA+LG*CIOFrL7?mNDG[dHoO%j4Alp9OuqSVAU9J@'bfH?4Xa:@R<VW<h%cI*sf/q?2=h&.@TBV#/j=LLmhC2dW+n/<@<6
%.!_-J;U0lt<uu4Hr)90@pN!KGB8%gd?,/:[*,8@X[*Cop6W9-E:]c&hR0&lHG'dj)%2a%B-q"2j["LJO6j97'$pZU=NbT7u4`Y_5
%c%1\V"990C[Z1n\3M@Q21YdD0c(,o#<.;hl@"$A*^C[6=7-"g!3Ol6SSW&)Dqb/qWPp0UT(p5W_-PNBeL,,L"WBB;H9aLGU0@c-<
%\l]5N@hM`?<]",!Q'::(K2G@4V\LqD\HjWq`Uj/mN,&UW'S&V5NHtbo6";@V5uI0#C'j\>kJ.e0H<a7epV=bQ8UE93'gRTj@\!d`
%m6hQo&1V3AJqJ^e'<"kG-SS)qs&V[!;q3_+9jHps/h\.j0!I<R0+iju('8$`3WVMU[=d3,.eWWkiXHJ"0B+\$>L9@$/!J\EX(4Y9
%qL/!MGLOBt&L=UTXX+6C4'o<2:W&m,OuSA7TdKG<hPhnS+X+*3B1?i<1>iH![91"oD5LR:3nV]W!%]\;nMJt>\OnlX&>bD-8B?Mk
%=$mJ>&i\:SH^4g2$qrPQpTlL2>=_>!jt6;QhReJ^T?fnGlZUR!'AB;__XL@8O)7[(U1g250>8S]2ojAkG_?+Wka?q+crW47Q/4YD
%Kp!a))1*n\UQl+@9_f6L\_K82@c+l<h13EHG6S"s1C6[2_0mg[q(1HKi"C.';-RU$6uM_CldO>UG;*aC*H1)gS+fh_,%ns,$:.!a
%Hm[")5(_=c;Va;Xmhd1hZ@ok8@%tf%T96B'iUNCTn)i/)'rZdZ3^N"<ZB?1i,X_kP+`%aHo!N0uq>*iCcJ%GUV:W?46nuf,0aX7/
%Y;4?H`Fq!Nm)T(+:%JSp(Zn(*Qdn<=WkI9(cFIl"@&S,+1\r`H@r&-bGU7kA";RGjk!PjJ'7*DBXD2"Sp3Zg;OcCeE;*eYt*H/+*
%H>l$!diZW=8-t0Q^UZ4+s1GK-Hi$\AMA?@u&8=q'FN00+ScD_%[\\m3KqXnG%r<.c^\&3iJ>&/\i7dYe9*I(LO\P(.;<%jMZ&R2\
%JXg&p93]u\)Y^cU4OGNn[GUkJC(U_Tjo!(?Li(X592_!7A*9S4>6bm0(BsDpY[u]mqn7KY5ajL/BmZ3RoKDoU.LK6,H3%U@8>8?_
%;7M*>Vn3kAM^uL*WS@;OMT;%a.7F)3)_PZ[=S7k7SNceof@pA)dA;:D3sF9j\(,qG?Ri3^_LD)N0Q'"Q/9*0.8*]ZpCmtt:4($NO
%^=--[]mm$TK7Gkh)5TA&<&km4Ebm:<]H5K6[CARA%unb.>=tO^0@KJ4'`\7`JttfQAc3O'4s-te[RK1KY5LM_`g#Y'[GT`*$K+d0
%%01E]jcgD9[-H-)]o#C;on*GpZ@gP')RJFpUBa$M1m`Z0?RkP8@of(X[i2KB=O:AlP?b]`E]/WKe-3_AOa*M*eSah_.1AdKVhEQ4
%ND2%*MF>RNH5rCYM0SK(924;X/)B's:mBq#(BS009cdK-A@=$I_R44p\Ak\]A@\N1D7/9UQO;!616`G]S+h1jVipD(G98O%O(2At
%p$>ilK+jlbeUDFDC7D/1NF7W\cKP7=\<KUl[J$.PgH(#Yk$aheaZXRCrSG:gGfPCsEi]`!gaDBGVd6m;WAjL+<Rs#NFKFWfD5H"a
%(Wm@PH?C,XEt?o'?TS[2[qj9dSp#E'_?Z1?e#(jbrTaU+KO,W.)3u`Y$Bup]FQPRLNS8Kc#S8L=aM.P;g?JRZ"GfFm.5au<G<sT\
%jtJ0Oe?$0e"fu`/U51k2heB.ihS3%.mq+HP[-a6l0^(iQ+\FMu0<2KM.cl`qKBZXo2:ZS_?R\5eC/=r?!a%s(6-[^#/<2Lp-G=82
%;Lp<qOk-;s]WLmSs&.UI)+P.([6LP01!3Y<Et_Oh5QW/"!9lsr5s6[tZ81,lpDD@P\$n#T,rYT7)-lPaY:mW%8u`*%/5;6,R(LQY
%I>H4=9!@um'CuJZYo9P!E[X<gW_0aoVBO"R[_U+.\]]Aof(-JUp3Zg;]qAWQ)km(<D4]TeQ$H(Q_u7rO[dP'`qfN/mfsR)_mp@KC
%^52Le#WI4"n=ts]dLr\LU0V[E;g,TT%+5]=I8fP+re7)$?Vq\'.F]dn8jAn@[!%qcCeK:mf*.i^;L72#qn7KY-iqt;HHtX#-/KaJ
%@kc<YVa&os_=:GqYjKa)[+0Wo?YU536Ff-oZ!HK$Tt@:0dH>%Sl]AXAqDB2qB&uTgmJ$UVU6&s$3s&Z].LnqUXAn(QheWTH]CB/D
%8o!YK\(+gR?g%bjJb<&b[/_(VZJ#kaZfa:`XJsq/AK`L*qQ-f@Hi$,Sb.8=QmlEEOL%\tUlF"(D6F/7a!f,EmI'h4hVA1TMcBX\+
%6bK1\>=H@>WXA=^[pN;?3`OEREi]GCFPCh^c>U2`L?^WYTm0.>@2t6NC:X(B$Y!t2H9lgI]KN'-hcBWfJ#Q:[Bo-L5XLqW&W6[U0
%WgZ'/2kj<-"=i_$U]Y,?>/-V*-2cKam43$??`L8u8pZjKUc8*E-idgJ(f,&WABQap]NGg%T!\1(P5O\kDi.+tF$>7,o1%9^g,cg#
%Bf:Z@1mK]aB()<M%HD`Ih0bI"d7:P(DS#T0er6WK!%kFYWOIR$d%AO`i;rhAg?\\F,n-:ZMfUcO0(NU;NeX2lO(2+5q:uVWW`Bni
%2Uu.&?YDm-2m#Q7eKB\$'n-_lF"tQHmodO:<"Fp(>uPki)_`=^fWpRohS.@\,-&M+_L?8/LR4HdW0,W*`=Ro0#[Ie4^@*7.!2H:>
%e#I:@jk/u!$Up_&<X$qG(aRa->g\CsUkiDt8sl>!]qT^,KV8Up_'l1&VOY62IAI(UoA,I\>]j&tZATW;jJ.Sp93ZYOmEek_]=Mp\
%h;5nE$9IHB"$BrBeZpnJJ5\foT?Oabe*-LAeE"gGH!B\1rhW'e,\R;j@r9^@QuZ/33tBS[Ds7f_B=i7^oJ,%,SFJ\MX/&3m+'ICO
%%@,F6h9h2F:-SeVH<]<tKjg[aZ$rUQp3Zg;Od./?9ctp_cula"7ZLTcHBu!*.P.N%Apl5VgM4L40,8Jq^8oR?G1dooc(e%`3W4D"
%>6qTZ\1!`<p9^sqHiHupHL+V_p:u5ZNNG7FY/D[QKYFDA(-nK=FPY1%nt!5Cn,5mR./0C'FcC/9N'JS-WeL_i\6-*ihugliRa>R3
%G&=YEqj/4ifIEUX@MHI-Q&\.iX>752Su0N\(6tq<<Rc4mB3I&?4'fJs)-/f3I`THkPqKBjnU!ot^Y_t:#7>5`F3dK54d6!SKuksc
%a,+JFbag_C^SdM<8V).4'D3%CUPW0tm$.?+;c>'gT5R:!\"@4N0RK2Ef(9NeK9=#aJDG:q`U%#/2)@W2]@"[O'6c;Kk2>`&h9P];
%$T`dPVl#R`,DI(-40!.<^7Y?A<9Vh(r%ui@rdIYn%R0ouAptn?\&T9/Uju3g*2nWlJXJU.V(OoY(3s?N-KJ]maZ*7VHr91h9V$G;
%qs9&1^Q4Mlb='uW!_>8m)g=j]=fJh<Zbc!99C0FFKt>^Ae*qO^`&ZO8h.3A9C!\j5qUhJVDIRZKQ[QA3iNC[te1cC9@8H8RI/ZR0
%,!oD#^RhE7^jRp+JN=%Ko_W18Q`,iq#jF-aN5(`ZQb*90m9rfX4m9^RlCuYfY@m,?E$#:i;TF=>IeO5aR]?8$2)-Z3a-g\)kl!L8
%Yc%>#%[h6Ul0n^ird(He!Va%mPr]/_o_W18(\(!K`gBC]$T]fgGu_Qh4m]/]LN2_UH9?$CHD[j.eR%+$e2cH`h^8dqqcnG@N[FHN
%mZj%S?(>n8j7dn85!1pWVRj-`4]BC?>8PUXS>0A9I<o7k_T071k$qYpO#&ZT&L]V#fFn)M578.1'Euk7Y@li3D',m'T_@=s]foTb
%,sA'!RL&'U+VeNcdh7[(He;80&,dgF`@fDBO48<fD*lAfY/=OkIBqX$/o<Q+O)Vk%2S2jsSOp`*LHW'>n6,PEc(Xt!R5tT.BCE"Q
%3T-ak-O[X68U'>koQ?ikNmr_:;lB=1p=.d5BAnO<c7R:JO47Y@p-((?;qD%'rBC1sVo12.5E(8nRDQ@0I@9mGZ\L]OpRkmGV4Oj9
%k-&F_*,qNA[Sl:=Q[YPZp_:Ku!I%/@$h\M:L>#A9CCbc,mm0`g:2t"HH6UYnp&WVmFUiW`p$$mI#[?Q+Q9n&r!0ri'DM4,[hg`D9
%oj>m'QZfP?@1KQ'N*3-$&:5\hhq4-h9OEAcHG[m@':VtM]ekKcp=.qdf=.8W4*`tfkC@p.ge++>?M]("-_IK5qTu*=2tkNg%A?J'
%AG!+(p)ZDAGpCk9q<OG0#2G\R&(E>l[GRmknL5#KDe#R<_/%-TUp?`N\9E91Hg9r`0;i(GgALV7>mK.TSkeQ3i2,<Y$bk]0BbWs7
%-#_%9>H)cmnBDHO`;]Y[ap2_;D#JZ,cI)>gF=VJBGOG.G>0k<JlFMhP=061n.lGoBNuB$TM>d1@Ka0D[R]S4teS>r]4u[L[kBN>B
%T<.aL*i)QAjE?qVSI/k9R6^o._k&o9pah@0-K_0#l]Jag\5,Yae9/Q"^J>Vm8c2J9X2:X&;S4@,=*<RDHIu/C&"eOh_0:D42Ldkg
%kCEG'Z^!QV]_))3_3^ZUN<2\^jG!Fi;i>W?BOLP<VtM/q$R`N7U!6rje2cGNM/]<:!AFE>(OXKZe<'C*f!f.$k+k$W-V2_M@8H8R
%HkoJ1@a`^&oh6A.mLqu!e1omhh^8dq8*fJeS`t)>4YHb"oIe*XS\O&\j!%9mElt*Kl^9f^!4KE=.rgMkmIf^]4pC:'YANNS,r7B-
%;O_>`[s7@L9:WcK_cpUU%2iek'%bP)klI!Z%!V.4kuDk`fN1i&)#Q^KS>fB71ljfdWMqGL"]/>19CpakFUkoW&Ql#R^e;F<+/;ci
%^9ZKcETKQ@r^sSqMjJ2iHg25s86c2E05WUs4]CNoqa?"#3X<=iqc'^Z`KBlGh^#[-+%N>p\n@(6%t!U.5p\$MYLV4-#N@f"5&>@>
%fAY#g5*`2ZnLm%"/qllDS7uit%-mc`Sf1\8b(a6:SW."&e2X8@CT,KMRmUKXI(G53&P]ipI5PT050hZJm)V#P4m]/]#<fM1&(T77
%-fQ+`+$d53kA]TjTB\b`!+F\\/ql';O#&MfIdsVVhc$ob2+s>KldGY&9HD#f_i\$[*:;2?dg^]Iku:D6*,AFoB50>90Qm)nVtM2(
%\<]tXderc3SHJ;d86>'rnC$ch"^ckUH`DK"$h83\%KU2?q3KZ_Y"Gk%Fm7oY9Upb&6a0YW)"-2FPEfI+f$k\*WXfL1EMPKfVkIMm
%%^s=OHZa2"0_&uXH6fYgm6fq]FW'W&ldN%P`mYf77s&H8_j7f/+(qTHBmdhO_k,S/:fClu\SLfg1Na1@S']aZ\34sEGj4te*G&^#
%?R]^*%LXU:eAmuGo!FV,*qn+?K5TdaqcfVGIq#8"!LmnDWrF+t/J+SQI\4at7^59gI\-AY3Hr$[C&7@^C9eoobj8b6FYeSO%e\Pr
%l\RTV_`a.)pS`/CF0ABCALmG8Ja=3?Yb;b<b!LNHWD1Daj/j7`m&@Z']p=kABkdQmVTo2E!/</U=K-AW9>=7K%!AHMl*$$N^Ed/&
%lJkE(iO(WZ&FEjuSA/-..d;f:euqU/3ZR.MC3iW\a1M!@<"3TJXHdt&_`8pV]p-*)+(qV>@K2*(p=(ed*%=g`ig8f2BBgHJNq]+Z
%^Sf?X0E")bELi<1*@OYK-U>4Rr-,&&cI>hA7!0J4m&=Qf-Ru+dT_7HNBBgHJ6!s8K5GcX+0E(;T%!G1PAPB@^Odf^+%L_rLVOBOH
%.q]B>C@=H*(g.>PDuP'[c2e=.o&Y5J1#TIsVdK4dK@LE#rfV-+&n=\S?8R/HVrk@hf%HWQ_Ubo'C7aU$POZ$nk@g2gT,ulg.SD]*
%p6mEdBk8IAh"?d%pNroImq+tR*]eR0;s/D[baF/ELV*3To\hraU$,cBUZ<fha\)675Q#:-HYSp>GDoW@\c-FEHD\sgpZO+XFUiZ\
%pW8"?H2/rDWPNmT^gDoSa!'*[hs[PX"82S+?0:#Aoh6Cdm9ou)e1omhhkuWJECS^-Ya9n)g4fA_;fh3#hR/,%FU<Gh?mI%rHh5iF
%FUcpTi@M.]3T-ak-WfmC9=PqiFZUXAK-rOTA9[6F9C0Dp;gKE9VU4GUPrM7f,8VH#ICMqR:Y'gm_q$ruS9q.,$@CU.%Q.\F^-6nr
%;eHW5Kjdh5%(,irOh)%48)KofFhgYb:DS<Y3nJc->e?0(6CL]Mo4;<=cQ;f0hSX!b>0J!'Ls9;Qe2cG.=ad-l!AFC8=muRsr)K[b
%_eE.^n<M_9Fm@K0_k,S/q#&;f@o`,&NU6qZRE%@fOG?hZ?@(7&B+KD`W>egb??JbTEa`$Ye&2+93ofs]l4dJ0CoVYr9dfAC`G:Y,
%JXTjb)gM(\VtM/qs0BgjedYSof.Y\`kXfnc%:Y)6p=-;Lr`ukOQ(aIO';s@N5tlFXFS#6RC@=FV5NdYSM2CG%o\ZIB%k;,LC8R(G
%4m].@&,ckWMfj-#!8f#>ee0$f3jLLN4m]/]LE>1^7nbRp$/GciXTL>X_5-V(c5u]/hLf^6=B",)9AtLpSIkgJi;](2[)BeXh^9Vc
%"gCoOUoN*]7qg1>25NsACCbc,mm1fK3S:a'f/%OZ\46g1WH5jJ^J>Vm!AMslD<eM=#?K5=73^S*?%9Vac!P8Q>7G.en9Un4YXj,F
%Ue)SZSbq1qo9puZP;T^6ehJ7g;Nm/Om+K:Jg3`$T>c"6mq<OG0#Mc5RY1,JiV;LTjXen1^R.W@ZA3"HBq1qXkS>cVJIZJf)m<?_M
%*A00u-u"Do9&8SpI2o4:[-/QMo[<3Fj8i\R]0<Q3`@:J"VG=Xr4UBK4h`fsl95T0$)%:42+d[oZ3)\?BepV#nV;FHZ@`MsCrt%\$
%A]QClE?MEPSb)T&lKgbl.uVF9[Mu*qH#1uD;HTlY1Gs9ek!KZ+WcLgj%5r3-]DCp(jC&DcE?qt#bm\(]q3F!hhEP=g4ZqJ[/C*H@
%<*So<MfTMhc%A',^S`EnNg=d>7q@^8F7PDj+(o=BEGV<$_k,S/d)/[P^PWF:0[c_BGu.B\BBl#,g;BN9HdDf")%jVnDpA__WK/jC
%fUhWBp9:HlFa(]Mg&ka#]Y[CaKD%:RjqQBRn#7H]6Y2TA"OqZX"q0_D;<m1873UP`SNZ>=]n^JU$)[Tr_mG[S5EIJ7["!2_3fVh1
%SiV5^),LF/,ksD)%).CKqD_D$ldd-NeD>gM3]2&iIMYp'J`j;MB1[NAWF8c[>C5"$HOjDh)Gi5$KQaR`mn/!JWD0Yh4b$l5Yc#bf
%e8ng:E!)soJC.<`!B6f<cI<K=m:5Nl:[L=/J437+P:pEO>dXt,EMPJ3%D1Hooq'lehkN2J%pk]B6e;h6#j*'IL6XeIZ1bE"Raodd
%F%@4p\2#d<#GN*8O#+1\o3k@_4m]/]LE:@KH^0\SHWYiS\DnCjj%N1HMahImHYW#CgOlo6MJ^L7R@/'6Q\G8q;^^e`g;BN9Hg$Sm
%h2,0qB(3[8X<H:iI2o5js1&`nVB'K0oCpDR?66!bYArP&ld3l[@@[+XR_l-c3IBCW_g:;Ub+!Q!_U.-^<2Zrs+(o>EFaB0?%t!S-
%HYY*$@$VBu")0g&PBV#?4q:PlgN+:e_k+I3clFHB;59=mL6%TRX;PThKM?2QEJ@q_*qn+?6]X!fMJKFg$l]Go]OnoT+(m'u^E;V[
%p/JNR3+a=>Gid'NM5L/j;BKPO>>-WTLHY<lY*2)+iJFhbFh1N5ZutZo9J's>:.GOn@fLkc)4CI7Tr)6S.WX0&ol6kS8ZY)AWP&O"
%KJrMT.b?YS<j/bOCKoQSPl<T/K0V'fb(05<U0?.h'f1,F(\b8EFg0/?2n\>%n,5n%+7+eEY/S!b>'Yth>2->2nT=8;6FSTGhS7S2
%TuV/?S@Z]2)B7'C&h;CjCMamfE:!,o'a!QnkSm?60-[rbGZi`U[_e'ZF;NSMl1b1R[ZBHXJ(SQY'eHM]+)BW.2+9HE:Nd<kQ[\C1
%C2,MA(J3Z.:#*[(X\COTe7F/9FOm;?q\P.FA?YtpS*NU5\]3[3D2I[AP<Cj5GF*dI?RfSCWsW:[BirRQHDsss!A?HpcW04F^UGj2
%!0FYdKOX3^o4LMsmsB_6.V4,?mHc$`Id^VnAMl@?gZ][0Ru=rU#25Md0;8Bh\omB5re7'bQ^TdQ&+4aYolC5c[3MJ32cLj1]ml^f
%GW!2$>U[Mb\i8QYScR/2]>lSNXj*bMmp@K)!4lOB#$%q#)W@6Ya0qkpp[/fTn^Qh%lU6V`;n#=<77j(r2f,`>Kdj!Sn-n@JeEuWR
%V6\KA<7s=KK6Dtq4?#Ed`=J?u]e/U!n,5mJlKuq@rJ63`)$sU'a"n>&\P;\Njo(**aA4a+q[kIZbg>ZKcUs5;:#G<W2LXiarhX4o
%#J+)NAt\kC*!6^N<`@.s=kOaU0&>C!;W.7[("dr:1N%JJ>"]rH$u5$a&1J[HXaugfmpBg.6VH^:YPU&H(np/<o0W,!-?S^XAs[u8
%?Rd-gNSLN[9grZ(&tZm!#1i72'=>#R?i%HcWH]Xd0:H#@aJIcrpLe"nn2IqPB^^tkFF3aS>@V;<#l%DHs4V[cJ%S$b.k#UfrT!qS
%P:X!hjq0*!.]2kPE5(#6a]tg*(OD.CGO"p?2DO]+m(iiBXMa_=_d+6Vo4"&2L7!5Pp&9)gp4[kC9(f2%m)("J8`GJ2T=]@@/C*e8
%n,5ne&E>hf3FL+]J%EJ#SkT6:d]:>N_4NpaHM^$;;MZAm.OZ-FL>Vre#ECYV%1b%H6okF>+5kEtrSG7faR1AHZDbIRh35YRfbV-l
%H6f-$jBqbsJ#TkJ;ZeeUj2=/Rg6ca3U?W.\hrS'IqRqBX.*Q>@ab'@7HNEo@<rLT,k)o/<MgE,0HiHtQYT,_G>`9mT@$>dkS%9-d
%W45P>\orDs3cWE%IiIj-*RH/qPhXk*(lN\7kOnn`a):?Q-u9<LC>;e>JV:YQV]JPG,/`OfZ\+Q-G'a0D;8Y!ZaQ,Aq"*QO7B%nXU
%\R#j-=a>Wu^UGj2G&)L6O@(c*or_0L=B#s1]AR'Y@-a"c-)YX!?R`j.@ZM53hN-T\%4(.Rg>p!_LDICTo/q/Bs%6qF<(,l7*Ka3#
%T\%l(BsYnke>4`fl`&M5(HOq@g9p1haB0pp,<)f?[CpG+csrJgh:iY!;nodp'hV-dJLrlq4gZSUR'Z1C27Z5_]_6^L;A$4"ZDR;@
%T10[=*pU,A7C^c6>hjjo?Fmh"V$5Ra&&<1-_MN)+CjXno>%nL4Hg1;(V8?l?:^41kF*S*hXA';-jG./d#;(>kp&9(p<8Ne-_n`8(
%5lin=s.a;?=^r<]ffSR"F0G>Ae&!Qf/$RY_E3sfaOL&g%&>L8.ot+2C9>C3Se[.9.QRQAA30a\,-"pmh7)YJFjechhQtrn70=8uF
%<YoTHB'Q\[VGc!n2DkLgNss-9OfM-ipFd7Y$rt5EgL&EHl64a>'XAnBh:U6V>7(EQHbFiu$"4>BL316B>g+5>j_X8!Lfq&r"&jL0
%p\q"DG+XF/`"KX]HOngdgNqrTFK'0`[r^g-rfuKBYJ$0YT2>^&_A0CoqtC,[[')K0l1b1Reu!/8%L*K^5g@rsU+^AQqRRg#mm,,N
%rSG<=nfakOZb[K6%R"t=7A!9d6sp4.nHRA<dd-i>7J'<`l5AJ6f(OXXZ`Sq2@\B%UYfnd!hS3$S_<WP@acH([*>83bg=FaUR@\qr
%T=_ddTb^(Sp$-37_1Yh%e:O,@&Lcp76(r-eVfT'90=6_4PmcT,P23(>\&1h-D;-XXquA_/^mn^-]mZksU+qs?c8k]/)SBI./1oV>
%3dfa!^uNl+rQ?`6L3PX">G"mD*)51>l3R=D<PgkBHN,bTX])pQ7&I2Q,26(NSSd,M8fmY"G6M8*rSG<==ZO1rDJ^MM>]Ds3W1_5%
%W/t+N7.@q'po30*Q\lWUg*,rP/L04m=*e>aFf5=(;73lU,>S3o^XVu,BfLG6@-U9qhUO$A:"LN1B,(W2h;5nCfBuA.mq+%pJaC)n
%p<TU,0^4n[-YWCT?LM67JNHQCb,dJ<d(;ZlSScsib%LLYVge)AC2LOld^[.@]B*qEha,U4rhLsm`pRJcL+.?3p\(F-(t,ErjcU^J
%*'7t$BJ2eQ\o[M]:qqc14Ec)O6CH?S;q@Ze$9ph1CcALt'/mp6r@ZIWV;L$oMVNR=]18idOgM^;J"CKdYaN4dh0eM]rfs>an&89c
%&ik/IIqDn83QeA-m;)EcqRqBXEIdd+jJL\>pViY7>DnlZ+&l`2om?^:/]qJoW\eif7rA[ObbdAAEB#I,79qOZhS7Fg4D'jjC'R1U
%>/[nZon_E%?N&\q^UGj2!LnOgLj&ikVZiM:TR5/;LP!+<XaKC-rhVM!`41i4RC^#i)+\=W)r'r]Lr\3-94%J.J#N\^1RcXVHPnQ6
%X]F&i:^8E-C`@@Y0:nRQGNZW]`7KJ,?YVYo-E?35464p-*HG.CgS32(+5mN-[p%uSe[=#`(OA?-8[]j@mHYUkW&3O'g".@XFF4$[
%=7@&>'_10SM5h;T`XWQDI<DM^^\9C("cpb_%lgn$q6:[!-?ntA-^DS%rSG<=!?pL7k4YU0cN'fH0lB6jc4,,]pTJN>Nu:2mqq=^o
%-4T!D<P7.Q<B>>Ns$BfNR,lEZ-Z3Z5*?](UP019b06HIQrhZdU0u7s]ijQSR$;'9)0ZTC2@$bd"?g3G(;jZL9]?5-"D%heRR`L\e
%DjPqA?`I85@r`G8hcEY('p?T0/G_Nhl_W(bQ[-B+n\&&E(>eb@8(12_cd7"lrSG<=#ojUTV'94HBdV9uKVL9NrNo(&5';2O3Z$S=
%[RJX[Nb/HrSo?OB<;de2qq1<7$XJ<nCki>Q+bq/dBO('0\Rc/)Id6S)FfrM73Hj&G*VfMh7K`+&cR2lCBS,IQLeGMW06K^DnJsE#
%LT>pCUBq#YC;H[5co'umDdVZ.2TD,kJYQ@&OXD,C;bfdsmi>g-V;M0:\mWQPQ#qdVI>"B;]jf"tGl-:\rQAGsA*g.?\AK.J!n-jp
%?*]5^^[umQ;HMqHjP96%>`jPtJ2B8'gI9j;d.*siqj4l<a#HIX>nC^N@-EG<j!TZW%^c)\mJSP@JRaZ)nI7SXj!,\+NRPqT"*_KO
%HiHuFi0[t#q">G^Hi^$o1YC@iXSN'(^[umQ;HMor?dg\7?BF90J2D9.-gj7k0>65Ud'ZWtWCW:_fr!>iDjM(;COENEifDRl]dSCg
%:#9_gX.epIs&^lP'#9rlWa@o^aX^[l,M(5"bS@$7gMD`an'ko]dhp***=q%q##Rfp!nX-[b?94JP3[im-cRX*rr$2$`p,d>*B(Bf
%%G77!;8BVu>lT=b9sCD"LW5S'++iD!e0DnBrT]hZQ&oVWHD"_o)%HG!J;)(IlQ+qND;&F0:_>11*Vs'%?MGfAHkO!;"N;A/M&Poe
%ee."`>(gkkhu?boRK)nKLnj:A?dD[fr0Uj`oQ]p.ku-E37\%:4A:C*Bho#<:gZ$^1rq%UYMII0LB%NFDqfq^\@-NdN1h?9T*dkWt
%'^rNEs&!"tl,KfmC#5N6F?[JFG!+N3D0]GWF1Id]T'X[6GF\*P'\e(Z08Rm\D/\Bo'LTh<D;B2eH;f_.Rm4FV$=a'A+)MHVOgU[s
%7Z`^=S,1ps^F%J6KD7FG,r`O\%/29@+lACH84:_T[R\tF11jsBJD'9.7KH,4E$E+0+^DX>/Sg*SN5.9cS>hcTFINSgqKW@!KoHh4
%K*\X`,dga3P6E\:[TB7B;/Z^uaKEQBjYhZGW@cOs>jpN(-@U@=7::.0LQ3gc6OHAQLZr6YXX"Jo81[@mcho6#A*J^lTH4\8`f0]j
%VUg>`E3T3,rt#&d\1XWL-b8M)=:dh/T&7;21OaLKS8c\.Z/tnujAA2O%@7488*c*r.Y-ho?jWo]#TRS1BJY`uD$7W<RkTMm0^a)l
%6--r4)PRRo"kbV;d1Cn=(B`CnZ2BLHV[@eP\is:4a,$;g\Z3p4PPeJPi\2s[!Wp8p81,[:g5bl!8k:#Inl&Aa4][r>"+H1)/QbM3
%amA4N&U!0c#g8S4ZuIEs`a%%@c@TK=Z>M3og\,F;]=F%(>JYG^f`)lI5KS)OM+=AY,+NWkYXs[t<?YVWoR`jgIZ*VdJ`S`I\"KTH
%<93g4)8oSjj-1S7(_h[eI<WbZ+RF.$JeQ`ZC*@Ba&5&f;_-bn#>gG'tbA3DP)q?XR4JL>I>:sOI%.u>[J>a7[;%@P9[+0rcmcU%\
%QWtq8idl(9meRq5BmpG1,m6=Ri+\?.]XHQ]`co%4^u,"1s5VFDBmYdi`,,n.)E0N?=KUG\#gqRP&e.Kn&sA@rW_m%o3_:72^0ig8
%NKH4sOjO5I"1JHr)YAm+Z?4W"MW`pk%MlrYRgmNoCkQo#?sg9^7)3\Q[+ul::(a1&\A6ZhNcT*i;8kOjr<[9>(\`]d]l_<!LH)>8
%d/j;qYLKFrLGfAs_\rF:@EreDnXq([R`*ts*2Qr15*d'aHNG*uHte@-%-/#9D[t5$heX'O+;d/uVeqn=Rc>S)?&LHTkph'ZBUJC)
%fNsA9o_Ad^ooYRNn"4t5CnD&#gZf(@(g.tX"IYcIBjNqi0es.fGX971D_hp7a!!C(B/dqTm[`k6PK^0D.eg+%IILlc=SblZ=1c7q
%_Rn:"?<H6l8[:5O>cD=!>YPEYB[Z=mp)e[aG#qeZIr"BNLE>[<lL_68Ehg#`T>nA=Z'iKgq73AsH=U*c_m/IrpE(erNApNK(UDoi
%,U59i5[T8ci=V_\]S;2AUocEjfWSsC?UYpYA].UmD4JV^&T,Gh)HtA'`sfr0"CA.QHZMIdk(CY'"+O@:PQp3n@p"su9_(fnkM@&Z
%^MOLd5"c[=[EM#0rM=6>AE)c;i^9CR<.Gs[AKabRMF*3A_Y^>`Q7B'An]:+IL_mJaD_6!u5&M83Gl./i@/f/-:8N'qAno@a*Zc$p
%`g#1'?2+P3mRWeqYL(c2SZ%0f9^EolF*e>.AEZaM@1\d!hk9pN4.)uu\pTU?QC1),S:96gn%2a)%TI6.rq6g!Al6+S"":%\G4_mD
%9n;eTWq%uA;OiT4?N?Ukp2.O#9]A^#GHsL<d#sCbVs(Pa?%f7T^%sl1j3S?mc7<**(WOhi'(SBc,USt[V'8DsUno%/D?]"Igg-(k
%<FCQB,"B@E-iQ>$+I/[94,&7[F+M\q2ZWfRW3%93@$T9r7`ii_o*(s3#U9VeBo0Jcq&2nr*GjdXmESE(H;T$.]gB(aZnE3@57A[5
%%$lfEM>tOb_D1QYs#7YZaKcLR)["i<Q.VT"OLK.]`HmlE\[@]*,RYS@0R,oI)*c)D*FS(NWU4LkI%Nt;Gd=QmkAR=_(]!G8!srqF
%8[qH)OQMLgT*il5>DAN05**rl5EV@`V2WeiOS7(Q$=hhSM(@;L-74Xf%#.tsK2A#WaY:9haabofXL/FGI=#f50K<Ss!Af:[>[g`C
%Y3e2u&SeZa!1SYuIak;=&Kh)gT!7,"Nf`mD/]%m72&g3e&ACGf&G<^;C8p5C)[?A,#M'e?B^m$,3,+^U>@!G@3Cn,V,iMHVmCIF:
%n3BU]R,`*@gnQ"g[V=Iuj:+q'OcY*:V4EN66>Q`l6')NEK_X#r:`gMiLkGJ:Hgls;\30nY)umc,\_M/.Cm<Kc^3Zg:Hq+J'-o93%
%'htJ)'IbDtYu9q+BGHn,UV`#=%P9N#G,]K3"j-WF-OTaPi6sT!RkY%`E'%%X70Zq+&e]9'fUWVfL/_ruEaVU2HYA5Y`,Up0UOa4%
%MeVWjIG(^jX1i-.dSeSSI"3V@g%NA,+"H;;-;P>Wg4&\"&Wb/ChHdU^"01p+l_+_834Wq?:jb<B]aTgK4Dd66/?n0cF0PXM[U,0U
%nmUhbiYcLO@I(=n`m`K@dR(PbNa'iIhlpu]$g`JiedE5dMtU?U9>i;"%/6+%B1Eh+8o7>+djBNTa1EMR*QPc.OJUD#NX$m#98ME:
%m2k*nng,:H5;<D`aAfEh)O=C>??L2oiiP!J?ULF^s/Rie&q61rofTPdbi(JSfUac-bgkaV5equShP*P6UI*;FiO3tX+]in)nA8a>
%rFLkI2t'#%4"mp.&?!$d@=foMk=2T@GdsUk2+h0n@bn8%`2lo<iN+E)a9-`N3DC+I/%sdJ(A<Z4\euV@Sh:5citm'R(_!DqS1Y![
%PW7P.!@$Lb\=`0mK[7,u"Hm=%)5`a?gct5:e\=A]&7CcSOU4&`hj]f!m_HRCh#]?Oj_NuTP8's!aEN.==eK:aYoCQ-PRi>1PbS$c
%5pEHSOV:n?8AXd%K!lF]Ip,a57DTW$qAn^D@>oql),9MY<%gL@Ec-N[hZ@r/3r'ChDI[XGEWBGUJ)DVQ]#dU\4NTa#lIsNN6is3@
%ZIdZXa0jJ^BH\(-P<t`QR4p^1VKuZC"oK!W"H_L`LO73L%2tVMWW:;/eCJQ-ns-,f^Y=0FWTg*pK9C/A-t]/E6X.E-$4S'.,3("@
%0j1(W*+dk!I`5Y(<`EB_LA-RV"q2deAcS]@UR)BHnWR:2%$AEOdI'R$D;05=.#]@,:MNi,5<-h^CP08+O6sm[DAA3oJ1;U7hHD'>
%h_[ZZQR+J;_mgCWfUZ1e^**KC5c)sqCKW`f[KF$Equ)ZKe[6@9pqL)tC=b9FeohfJGD[6!Z[C6qDFK"Q42f!RN!f-dq/JQT<@Bt6
%CERO]!5s31aoR0A^hj\&,Zbfl/BY5&8i5Wrm=6P6/t6=LS&/k!4FR[uAI?!P]\GoN!iV\ta.SYZIbWLWA7IHuZTTQ7VKH3q#)39V
%,nSr/U:9m-D79.o/ftI@TLN`M*\_\N"3-J_G7nK$_Gqt((3iX_X]O&0H/m&5O73&/hKXrfUGGURkJ29Q0S:Ph]RMKTn)1%Y64H84
%EJ?6krI1"Ndfs->#3!mZH3fKpmAH%IP)p(]E>YH-EC=+hJ9Q>jB?d0>o&fYnbH!3\YJ)>i-]2n-Vge*B48sF9pM,Rgg'+G)34Z+[
%6/`'<`&m1DR4g(PC5Z=.%XDnTW^&iR_BZ-YhJ%c]Efj8cE,lC8P`!Q;14dD-L?.l))Yt^8$ue\E?$YCN2^u0c%f/&a)QJBTP:K''
%+u6p5Mr]hj#\Y!%N?>Ebd>h\#o4*Bh>$0SKFOe`tTm)HLU?J[b\;fl$,4g<lAXd66rX>b;T.#-HJH3In5&-@L`5*.PAER0E"U\f$
%UdIMf>uiKRMsW-4,[d.#oSo'dB).q[e62KK@l\$sn]tZ4`c#_Q_$oh^E!0k+=eosAkI$B*L;ZBe5]P&cGeC%=js!d6#sbZBZX5-O
%j-`=%$\]AU$?=`9M^2V%\0+Dk6.''%IPghDk_JPKWR[tDW5*5hMb\Z2Q/>3@9pi"6o*TKb+`E`/]`?Y#<"+U#[r'CBX`3[4e_edZ
%dZ'SQFk>r5Hdm6N//Vn3mV9'shSJ+7i31:<F37hLWZ6VMN*?/eTE%8U,8Oi#?615t<@Z:,jn%Eg9<l?lp3jl+JDDDe-!7(>QS$s6
%](XskM7.iQ:2Rbp(n9/L9u'TDFo%RmEj[;@)SH;]V4ht=#@8_uDAYpM`]^TNo!dYb&KRN@Zr^iFLS9&Sj408q&95_==eWFROm;F0
%p&cM4K*BPa.O83:&KQIT*1u;i71_ctA`2ZRUGki9XapE44E5r%[;IuqY*T4KGPirXJc\1BG]_Z"Fth<D2*5CuD4C3HP'p?*=),>b
%$9t6kV.4ee@e`[cf]]mq5=7mDWJ#g5KWqi@j['6LUEm4;M4mdULiIUB_S`_R;>?UAj!5j]OU\A'r;(RKa2)M$oW=$CAK4r;;T9%3
%Ns7O&fR^Qo.Ln.c<QAJJlrNlcNP#m)jUSl+$Ru/7ag.U%S:M`BQ!05n0o@7_("$tBMtl!O05X<"IX@Vs5NaG[6-g9nhuToMmH[V)
%B\JTDOk'3dmbg0_;j8(.!&U4f,>;lN@DQA""a)d0gm?Y-c8uJl8O2X(B2HGG+Bd7"H]2U_*3jI&q)deCr$ddKi&]t+UaQMl2a[H<
%;ni/:E5N<L</k_7gPWdJ^m(ti[EiVBqHGqt9s=BW3%Sq=MP?8bfYIC+=MJsUZ9gV_*>T^3M'+f=\%#05_Ta)tI*[X>/K4VsU8F%>
%!\jfj3$L`>oA^rWJ5eDRGPS@rg=]EniQQ&g<=3&.:J'oSSMAU2bcMQW'!Hu7*T"j^J;L);M`*;W0#*329Ls,&H$OKcL_HOHCc?;l
%[Y[C<9F"<OD^g`N$$:M:NsoZ!XlYi!:e$+(+=EL-4a$7]A2pEhS*JJWrEV%s0bHWNYB`Q.V#.CuC8d5p)?W[\0)(\Te6YhG^ib!Q
%=MF0EShEF;&mA0=[r*Y,KUDE1.WBW[Q+`8*U`>+55kX`/E*:_aG+4!:Y2i*qT7Mh`s/dch8VsinO.Gs"-F$EYWtNqBlZ/>i"7gOZ
%*"LtMUn\'M[q9ph.-)P/";eD:9p6E6TNiog`HA9NElS5m1"Z'XYiHb'A-NS'b3DE1NA>C``'$26"dfBf>R?3c+[Z?+fLAZF&!@XA
%)=;=m]ci:)b)Y($gFHBVn5NCaF&L:X*jp2NA9glCSD3Z74ZN0WZ1*6+KYYX:\PeR*+mWk2p07jHG@[t5VU.gMWH1,s,30Y:W*9T@
%"!LQ>95[EQjEAMsU=5/(4\r#iLC5t*F5f)j`%AXBN17bd;C_'t"ec*#>T]OE1VRUT4UBApK?]a_gEZf"bh(<^*A'g2*TXFmREB[&
%'!'RO`dh_cn?RmJ&h+B/6!6u3mNiUAn3VeJe)IVh%%g-tOIEMN='58ZQN;@H@?8T@#AJ3IJ#h"K'N7F[=+iK=Op]FTC&KVOGhB-Y
%*/01*6F!%ZRA;S#os^%JWGR\N-DaN!]%TqE;=_f?SJIU6/>6JYdoIb)DkR6*fa5A$/@gK97SfuHTh#1`8qfgkQj][/(>fa6GT[3C
%A/X_7&i8$%M,DK!g:NHJ"]/lW#d!eZ-OFHVWLeV*&K"U[K?PX%WE`L&cDP6E*HnH5AZs8W=9dS3F0U?S\Y?i=O,IY!*+ge<fs$Qg
%%o>e8^El!-%4@/;SiW+$Tn>+4I/#"FVp\I&LDZgIOiqKh[aXd__;$93eZ#1jBH.p4<3,._<s=*g]SSmPUG'YIafBr&>Zim'VWm)d
%>NSMXK.AFWd<2\f8m8hq`#4JaC^7*3aLVG`4=nA?RA!i.:qpE&6:;f]SsXX@luptYEK+M^1I+pk4h"YSQ:4TXgptlU6nJ<Gq2g*Y
%d*!e-iXB41JsB-8i8hfh%a-nb*Y?@C^2*pd_"d\)DK*L\?.c=nE\*TK_6?4ONXFh*O<%c;4!Ztf:Hhm,KAe7K&>sb/(jjUVj'W`O
%ami8`f*R#AF>9I.$6J]MLef'&&m`<h%`U!9St+he=Z\9c/4`%:n?NNt>i6o<Wu(LED#`>OmZ;#]kH,=6a>1pf$POp[Boh+d,[>=X
%B2a`9*`52CW#%Kb#oMEEJfj>=,So&%G6E3knQR"DG+sE%GN(Y9MnoQDT?[K8U%"=I0;9bI7I$BdA-0MYj#T2fn?(e.jWH4eMog+=
%7Lb#cl`Ap)K0Vn&ZMmfJ+?j[Ups.ZA]7'KijF%abS5\Q0fG<$0MdTnLlnF&m%2?%CWL?gMTO-V[iDL5([fH"s\?Rn(n#ag+[r^Kj
%of25_k,NtO!r5R7*TZC#>?=",;^T/eFV0U&JWo2oock4HaVZ=ij@^]I8Y']F0[\lKS9M@1iuX$36OkJF?)o>rr-!0s_OdZkP:]/:
%PAI3*oipF;#ma#P0*D/1A;jX9=@Qn-<P+c1j!`rb-RlDQer$?+5K2`;35lG.6]FX.>Y#SY$'7L:Dinjm.Z*rf(e!r?g3q[&1'hs8
%lOP]N9?6Q>@?SVmY&!FegcmFg*2AQ8j$8\-"-Fm/W=srtT2HqV)TG\`k-_C)PH%Ob3B7HRR@R@NJOqGD?uFR7;r)E7reg?:J=n":
%[PLRN%MFE#Yql(eB1%n89O^9Nh+c<Ym\H][QV3ejdOCPi8d$Y(\!br?(BNN>/"B>K@J^$JT&U#gB2(TYC0"ka5A[DBiFNs7]fk&/
%+IkjD_Dk(VQ2U'gM>JgYi<a[Nk57Z)Sf8qI*HCm,56-SXE$Ie"h+;d.-NT@)h,2@6V$<$oe8p_iL_K.=0pP<KF'a?SbRB)ObX!"B
%T?;;iI8>VpOSXaU!+>2%'B*OHn'OS9]$r9ae/-O(;J0Q-Bk9o!Lkk7s!t0usq;Q@k+9aJmptMHdJ]O@r,W"@/1XnN-Z8L@RM,[4o
%\q!`l9`[_\.O:(*-Z5kR*U8@0dYq;C[5/r@\\k)es/fTV@rd]l:U"Z:@$9YMQf"NHS$-uQ"8FTBIbH0$UnK3KGg:MIf@P`%TE?dH
%^G>TOpX.E'5iRj:Ho:]1H"G4G2FrISrO6;\iiGc>C7(8*W(<_'>DtkHh"0uXrk=k-Yhq("D0=Z\>7POR^%if*&(b>%M6\*/_e!Fs
%=dOX"nY][B-,NG`V4<h*"=qc(Y(d2+25,Ul06VWaMbZY0/ini\_S'9-7Z!P5*tu-%JV`+GO:/sJ&Y<jWJJ>ng/0AD!,7SH'c8\Es
%PE85-(0GDkcm*_/p,mbf?)6!,kMo,#K>VONGm8>IkEUEUR,T;J\E2un0EYmi1@iZ)bth)W")$nb32k5uNf\&?N\=(jW_lnVWJIQh
%ar^Wp7*EHUKA+VM3EgJbM>'2L@F_b/*!)?A6LSbhqP]X0"r59dk'K==1N9_TZ4>V\HL:%r7`2cmdG8rQT114t[R=G8s6dD%Eilu@
%9ZW&6HpMh():pe\WJFPNR4-u#2Lk)X"%j"N;P(tHaA;mWOs[19$OJ%48NajU$Mc4^Q^bm?i5Q$6nbT'q@HSmD$^(n14O4KJVWcT1
%b6a)0jZt`CBM<Q\_aOEQ#<a>4g'Y,?Q:2q)#tJs@g?To2@]am-]PR[pa^?'?Ua:T%FY3[$#n[l-&dRP((_?hGAWRIIS=.jZJ#b>Z
%'/3FbW't9e:9"@7])7lAG*3uY$j*V)``"jp1.ZK3lYd6JAf4f/#$FKF.bF>'q4pSYJQA<gL'kEjj:Q9+chIkNs7f4#ido9a8h(e-
%)g)MP5dSZO8QkK($?]4F*ha'7^LDmoKV)GfEYh<i+pL1E;B$/Z<3/pdpu9,qaCFbVOU;kFf:iM6"9rs(LEAuR1ju;"f_5"Kl0_Y[
%A3.8<7ueGkPRIUc,$S1UF$@@['C(I?FV$]3*`Y]g^`=S<P+X-9=!k=!I6mF=ERS.-0d,KCRku\7!jr#r5c?e6f8@gc=hLJb4V%6u
%\2l2R3,h\-e)1=!8=#$@LD]]/J1\W^N"JW%Xrul\><4M6>7^Bk$45Bh,"+C#5_"ranc47JN=)ErOm=RV:P6q&V5q*>O>YT[!&AP?
%rkK#2'sTM!o.OU2XAuDWn`ZH)gQ#F`giOqcWa!k,?P]-6[/JV6eC1mQpPngcFf`Y^[7(iDUk$R!c!Q,aL73&XCl".1IEhBQd-LO>
%]B4S?aE(lKV'm>akaG9pW3f$Q1Wb];T][<e9V,noK8>=AL%[(qm>M09$I/G7iQ]SjaOq9!^8?Dsatc>+).E/4A/Omd\"dHD0b!SU
%;E#L^_h2Y/W@U`[+jE,gNEUm[8NiLSDAKZpa+.S0'9$S=>3c`W.2$qm(?hq;U$G66qtAi=Nu=FsoTGRYMUo)Nk6Y;NF)g6:aMWka
%gu@/5jq@S=i`'O77Z0gQ+KJq.36XW'$'q$0]]$nXDgiDem?e:@\Oje0ih<jhgRt6e3VZTGp5@Z0l@*:M4lVo&<PdH6]pS71D$j>1
%*ef;5/@<MeMO-;8fGD6b*Oo#M"839C9fk-pLF$bq"hmo72BoP[nb3eY,quGXFsZDU(tBl$j/Y<0QJ2X#N6!gZ"A9F?.18cc#4V]g
%ibK&4CJPd8[R6-*+p8TU4*")p;rMF$L(_WSM$hsd4/i]2KHl=66/TVbjcXQe0:.&t1;Yd,d\7:JOF;K8p"+ED%M#11<`hfO13);4
%C9bq3$:bC\X@#`?6S7ggJ_(*((8P5oXA1"N[#Ctr1b$k!:dY^<.juYK91BUIISh=ur*f<=V>3\n`107!_qAmq)+ZZ,1H6UK9RQjk
%^dS6GL_@9#C/ZD"<TJiJD.jc:O&&h'Erl=-Up^hP%>F]6Yi<?W*m3%(32-7&<T01r5%eO:c^U-f$=<UlZ/Be;C3'>I^bl`T;9D5o
%8nT$-%/0`aVDpb6:XJc[.gR1m2F;P7G@i*4+*O.XeAo/\(_%hO`Skq1nQ\jKDI[<Ta4hQ`]BB!Er_[CKS`^rcd35+-2r_5b@4^Tr
%URG^ST5Q(`'^PR<GT6#.Hm=cggZ[hredD,K_i-FTdn)0Da0JP#=@K[e9$.4^pJ((!.u=H7?>QT&^%m-G]trQApN5nEQ7DH;[8O>?
%0%(Bk*u6,_#T4n:=[^%k*r.;.Iq8?lMgTgn\q/oJ0]/I9A-RkK^fkFU]gVf9K`8h*#egVlr=LL!,]E1\D.n4%rIF+Jk!gU:fM-4B
%,j7j-L"f&)X=5>u3eT1gh?FN6i4e9\F,b*7dk&-Xn72dj._)Uc\:@E=Y:>bj0?WF#P(:f3I2j+`DrG'.,SWcX^KR:$FbN!Z:::q#
%`!Ij<L.(jDKWI!#/c[:nV/2kgM\LC6-pQD(1iH.GV\8-=GXV<`T,s,J;!<:O7$*t5]$Pgm/0QIti=R6Qg>NLG;YfePL7#o'@([Wu
%_8l=Mb8ZV@^?=Se@G/3a%FMZanqPdH&[WKP]_`<@is6N]R%R[m#YHI54nr&IDIK=bK/$1V^ak>!dR[##<hL-7n"H4u/rk:g_!'s8
%=!_Lm!5+*Md72Mh)@8-+Wisj>LYt:Q^i%=c*<7\%hmq+#^.C\DYTbR0,$"_^kWIq4R/1\T!f`!e?C9QZ>EWfqV)qe!.M[[V&WqhH
%(L\'Q3bM-J4lScDp;N2adKLcun=uDQ+ta,=4+oMC<@CD'oteO?L>jQI]McBR2fQV"Glo<s?arjureR<j&=2mVgbG4A&lt)XX0a+)
%MHFljVLU)5&9q:qC_kB<$>+sF[ZUabZMEWI![7Jg2e6F*V0NEuOI61+'Ib5'N%F4MPK?'f>5eil.(9GEQt^Lo#kNqJ;`hpQj#]W]
%o12QmLMH^GqHmhg1Dpd5QqF@Z!e'0gp/u(=!d97e@^mWS%8O3?UlZC@&'k[#ofrs\q[tA0&i>O9,&gh#F,XaHmoOj?c.(f0^Ge&b
%khQ:XL[)XJ0Vh[DC[oB:M;*m[NM5#&RKdIPnhH9S(:c*7(P4qY=nUWY1UZWk++P!1]EGTc'/VW]XNYjA*psYQ0'XOQco\%-3\^pA
%!EgZR!!ac,JU*X(TEBHm[YY?IB4@<[)GF,16'W=LjJ)b(#6%3.PZGrO;"m_R)%UJGJCXYM,TR3@^/!o?1+4<H!ETE5Pjq<tA_nqB
%#\%>'C1,7fF%U9[[d+mWL/=_%!"8m+JW>nNS;UeHfW(?YStl_W$,dhdMc&f5,#h<nFIiUm*T;W(*s,&[Wr-6)lJ]u\.k%\?-t6g-
%ZhiMM9b(OB!PMBnP5D*5a0]I<U(;"6G-'`*9@Dh!)c"*@BCtTdAW"eg>5jXobS6iRqF?kl0=VMcY[l_Pj(+Il,&<`q2gf'aK%peM
%#1>u_EW\SCJf=?pfR3h3BT[k'kHIfmTI$PM3u5ZthkXO9@cmn!QR(Bc:!.i.i-g:,#4^<ol\h[_+a$jt=;.u(:$mR&O^T]n,9id8
%=CgEE%Z?.5hQS$;=h:0V<fN[Z]VL/#Yndm++9fda=WhWJU7h%=T:V+LL)>FZA^(bpK)!6N7aBg4;F(:FLTh-pm"$Sk6Dm)#83,^a
%?\+(#\8SXlO5#`dhL"Aorik^.I[,Ouqpos;k\3LHeuEo=)YD_P?p<!Q/0n.VZ2=FVYoW2E3J"DD)AZ&HKd(9d%s7Fg9LIl;lIV2m
%;s)anH*\VE_9'Pi*Yf_1&3uhJ5>JrpUsOt]l'\6Xm03du_ZnU!-]h4.UFY#7;5;lWYb1,r!:ki/bC`PChli:#I=GQnB7r5`TEF4h
%Ir)aqW@lUGZ3i'A0$&W:d]`3e*/-Tlo-b&N]_e[O+YU'g2XZYngCRK4.h7Uh0JItmZ-O1G4S3+)_j)uG2Iq@X'8F>SZ*'B=i,\0^
%@qHkiRiLpo/F=@In5C);8"cZ*Q&/R/Zs01_e!U[<eOY`eTJiajau]m<SVCS"N*0_J:m9Nu"V[F.IalG\98%P9O#XB!%T%dPIm=jE
%nCVdU-Z[[^->KrB<'/pg0U<Ap%jCmG54.?$ToS$[`rt.N:r%Jn?U2kpYM-)9-9rUi.TV(_@)2i>[.gBNj!iHcbltk<#,tWNmMQDZ
%_;+pgbVFgDhDCEGj"bTl,VKbDD,mQmPYU]l%;(Sf:SL%ga=L-)NaE8?0/P\o(;[2N`t_5b>\nM?qOqp9LaI`3Hl1mpNaTNneoNF)
%=t;44*ZHT6/rI@W"QCG=P%k_^&!ss7<PqZu2-t7q\<FW$hh\Kr'JNiT#Vnna$9a`4abM;3iOb2g$63o3eVH6PZ2<PLIMF^d91gus
%q2-N#p5Q^iaA%cU*slKtGUIVif1A2D:Ts,Y&uFfZ,8q&PIj6:b1MIk+*R9Oj';XiMWc^3M7OP2RjJ5D<o=T;J;B'FbFs.%1-DDi5
%YI84_:+mi&5[f4A(]qli+>A03LR"cfee.kOV,[Ql)[mp07Ifo1,h\<<EIT-O!*K:)NJ$jkCDJ>>N)AWI.=1P/;NS/i%H%cE=[\87
%l]M,k#2*a:5`mM2c&R$>gk1.2J?9B!ol0d*MB&=ads"K=Nh!i$B&;mmO.o9X<YiJ"%[JH2o=''RpXqVro"Y_MBG#r%'s/1A!4AA6
%fC`Ol,6V5='8mgZBU!cd[:"*A_,CrJc2u,>dB(.cGu!,2g*`KYe38Z+mVM%To/m?qREVNV/"03u(F<>lX;M%R1%Hkt!"ElP^cUXb
%?ujKJWBm3:mJ_uD8W.`<p',VYg*Tt+(n<H`>Q\qJ"R<c.Ud-77.+*l#+"!d]V*bqUTn=G@]E,!d%\:ZkM/-tCD>QL0"Uh=G]iC\H
%GnTt)&0Em4nMuK%E>4\3McdR[l.T%*:]m3m+9b;Yo&]D1rN>&17pSb$)r_6bXKlb`#c7G,^Uci4"K)3%faAU>s#^oKQ:>/G)mqim
%Z59ZBk#OtuFg%*fVNW8\2G4kmWl$,SKL2R:cP:n_OQ);*hrI<s,a-JJU'E:#DTF;6!cl*HSGBR;ctj<V?KV:Un(jI#Eq](5c,3'T
%_&7uK9*e8"h%\=l;(!+N-uEVTo[@tZ>9,s]X2<a]PTa:i7?dcsMG;W[1lH]bjU20p/ZQP#i=9!TmcDI:gF]\c&0l4WGD45fqL4PR
%.hNKnAu;Mt]g>iTgnGc/dIn4L#K'6W>YW<bC+r;k-9A[mA**iqD?Qkf/&^sIUfIN_&,Cj^H)"hod?m9%i9FpY@`3;:q@)h0li#iN
%4'q?`HJK%<C)l"BqkO63e@seB7*%t#9MT?cak`3F#kb$_)_qOT_u'e=pNH.f@m2T57\mhnVZQ^%:.h0a,0k(R>MT%S.8#:<RWAIS
%8ahBne.H$r=m;DHOKR#+CqWrk^21R+ru/LF4,2;((\&*u=p0r+VF03,#6hnIf5L8efuGfj6tY^Vd+AFN2m$t_5RH&RfUX_K_8"/G
%1R8eBXr[UMYQP*(>Rs4k!RdUJ]f2F8>jY4(H=]A^Af=$oogOk(2KT89et?7#RP=XIVhmWaN>G)A^nSTB>#l&h+*6YIF0%PmqjnDS
%H4g1RL'(seIlrAdG[d=Y\^A'Sa$s""H!::A0Je(XkZUP9@aGZI8G%c-)UDl8h&qp`mk+unR/o".H%5S^_'f&*'!l;2o+\=BZ_.?P
%KN-94g<+Xha90h`?nPNp`4#(PjX^2-@Hj/bcYi!Q1WIP9;!MZZN^h`+@aS6;H0??c-"r23!<gI85O?=7I^YmW)qC!jpbKF;:)iWE
%G&)NH%s6dQ@lpm_T)ZS"6QV.P]u:L_-.-Do_:S(Fp-nDa,dnT'`S;fE@0CmA/Bs6`47Q8/jae$s.$4n#'e.l+osVbrI(X+,FDB53
%fi#/ql(YimgX0N9?c<rA;ULi3#oWDIZ_$o>])M$mF`ks.8#@m*+\dV)jK7JSJHR.3$V7Da2A:-m(6m9FS;^U&%+hFUpsTjI4)(Kd
%7*lT<<j6!Equ`/d`*3A%j+Hu.q^nfhHW(^FA#2NK[S\MAXAjR"F:'ZUK+JppJV4CXYDAk*8PmG/b?gK%6UY$KbfK!cP&ssSYu;0S
%KHX.6H`g?CENI)%p4X`QLbPU^:2S4oY&1YUOt-$%0oSCPM,g.D+Hb[l'k,UTh0:2G\@st\`5O\=r3n1jR:.H`=4=.0!u4[R#^AI/
%;3\:*[)kjb(h'\A*$6GH]RQBHiV;'3]1LFjO1Sklj4lp*Wfn!bA`4pXZmW!B3KT1b<\21Sj4@$)GV;bRoai6G-h9<'%tRVSgKedP
%:IMu0[lpseJUm%$q/?P&F?0N!iS<pt]1J/o:Ief\iGo&:lJ.5e\o)A8RJW>qB)cs8!Yp&/*VM?XQk.qT.&U?&`7+F6o.4aeHIFb_
%HQ#p(T+63O8Z+^7)Qk#]HCGThosCRY"IC.B&Eef!'efHkZfSc@5P5JVgqr7-g%ZE94o!baebcOgO!(9Q`]O.A/C4!8Uh6SNVOth2
%M.>FA[>,-tTE5Kl_=Rk-oF;5o*KlRB`.2U8:RZIB;@ne6Z*#';8?L)'r7`E@8';b8!d,]R28:q6j#X`&H?3OIS#\gF.]S1SCRq9C
%'`BU"`WScm4WKG3Ksp]m0;7Li1HQ1XMkJmK,(h^b]`&[?%!EY$;YiL.C]2rU)>1>Moq\6Y8#W_6Ml`c,PmSbA7I[;Er[]49>O(G2
%64GW_o0Xk*+.Fm%?@Z(10PeU,BNb>a<P;i]?YbsaZ3M!p)LMHtJM",HL0,7j'=k4?GZ*Dth"Jk+12h\C5c46D0PD8gWO^N4Ub!BJ
%r?U0W`i;m#-G=Ua#q/[_n)dCZ@M.mfRrCD6`;?\N)5K"Goqt6Y6ENUKd[8+$XZt9#ftAtUbufXZ+l64bk/]Am&#)GA1+P41$P%aK
%Q2m8JU]]!WlV'XI$O^Vrd:Q2GrcOn&lImWl'Q(8X5]k:p+Q2:teRA^K/hsVg=;d6eIf^q6!2^aC.((Nsq/tf&:O%Q-ZNSAm>fMZQ
%BMoG&lc$[C`u+-;cm3'(iH*3&4$!%Q.*:u99DSb\]EK%P!-j$[?GK'7OlmK(?8.LLn9^e0r]YECi3h11HFu,KpH%6u8nF`HXiFQU
%fLQ'apJ]g"j/miEQV"kS)emLM8VI#C;ZCp:mjXN=D^14pVUeL75Tn,=_m@%7I^3bPa!`^IYEiA6a-7SAT`!LG%r*5-:(&S"qq9Di
%l^4nF`mKphkUY`T81fZiA*H3TrsqMY#jXs"ijV>f3`<ZFhP_d&PkHpXSBRj/1M7Oq3kAKD*:Yue:l,AT%fsF/'!]bRiHn?mqs-Yl
%DY1pc5LrgbdS(9I5_60Y'H4ap64T1-krXa8/h@=P7Ytq4%)A+"<NkEdp`njDSorgZ6u$"=ZDRUT^_[DOZ'm&^>[!PoY=4omdI0Ul
%21eGOY5^3+rki-3o)KsEd#!oFq;=s8$J@lE6O<r%&Kj3$fKT7hJ3F,_(Ze@XfUMe8.b0,A%*;Zul!,WrQZGeJi=i\`EW&h?&Pt\i
%DZokMH`OVH_ACD,^(M5hV<m;2W&`;s%#Zi<%kVQCe)QDfZ7M4ca;8go+W0a5FsneM%d">d7>7"(WfV8kYcqGoN=*uCY6C2CWV5?7
%B2i9C3hI=d?H>H%O;P!K5E7l\N%CO!g@+&W+EIJZGsE'D[cT=f+IL?_k;j#hRr8+J%P[s2$)0[eT>kXgWCSqo6:Dp:DRPuS-lh5V
%gT?KK:s/-Y\\QUl$%o3]S6VtD'Z>KVUgY6bOCFke&g\"gU5TN`n-(JT6!=a1_o%0Gq7ag=90K7p<NF]4&blA>nX)n*&-5&eN84TX
%_(C=[kT]'?5gg2RhP7,`N,i=;cEOCZa/oWt>?/=oUaJK=c"bkgFb6!/jCMh_P_#^*ko%2bgF!`-=%,5XW<dQ^D_O^g@O[D7Q\(;S
%U!<iKLB8b?4]acc_Rs@#Tt<nEEIX20.M[N=8LccnW9p%;T<e_'8MI088FTCI*h<MiL4mXB"D^4h*t6Vm/P4sJDA:_BonVpTO.FoK
%3[&L,*(U]Y!#"3%qJS7R[o"=BP@R!BO_j"%":=#UqHK/oO&0O.1%jIGALRZbV]qRmXI%j,OH=JY8Np?j,tako;5dAAbFgR5Y+Mh[
%qJXW0$;r@VGDG-J$9`Xe!9HMU<b+KF;PAH!,d/L5)OYXP@qAu;*70RG5E6f%XCagfn[YBC_ho94OGm_7+s[GT$X6%\m?)"T^jcF8
%<Rhb>Wdg\+@+:2"&0jn;Y#7+\_]V@!$NWN+%#_Kt3\:*(dQ?oc4"O>&WQ2ZF#&i$2)$cNX<M"0?0-FekkTg?-FWa,=XokXpW-n"b
%]uP5[H@QnJc\<oWi+?j;/1@q^NWh]S8D=)<DBrkrhG]*AHcYT>#]\/60UG_9qAr^n,533^6fpd)6anWi\[C43N<Cuu2n<2,VrKWJ
%mpF?e`+B<$aoK22V%r:.`:@QnmpUN/ODo@FVP1"#_0qET9+VIOE'Pu4;`QMse"*Y_SX#)RRTS$K;H&Y>pBW-X(hdqQ/4D,W8b#o^
%!,!aZYVlWQ*"4^24,:%i+(&R6X@Xp6KDZ>](mEa.#dEn/FA1A%/3lU#ig"&nq>*\Bk`fiGP&6Q.ljYm2XK7oQT(u1p='AC95c#Z;
%<\C%;&*CV\_;LR-1D=/#5WIT:"G=sa%nn\Pkip:o!s$?RXLL$MDWLn.6[^r!TVA*!=?4/H(M./C?g#"L9Vk-&k+j&Y.R,R;?FgPL
%N)]#3'L45-YrGE&'4?*V#dtg!L?:lZE4EUKJtVT],:5FP%#8Qt)t%6]TgS+`Dq&'FJ2+Yc-pVNKDYGH++"Hns>f&MRi:.m.iBR6Y
%n\>%cJ,/Po5CNG#?[hs]&cV%ppsVJ-q>^B9TDkH9J,[VEs6cNZohSrpr:6b8q%kHVJ,Z)-T3hNm07WuQs7_$@jj,U[qLAO+rsohA
%B`-e\rolZIn,ML9J+rsFS#c^+~>
%AI9_PrivateDataEnd
